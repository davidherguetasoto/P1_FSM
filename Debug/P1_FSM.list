
P1_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080090d8  080090d8  000190d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f4  080090f4  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090fc  080090fc  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090fc  080090fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009100  08009100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          000008ec  20000204  20000204  00020204  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000af0  20000af0  00020204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c965  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045ae  00000000  00000000  0003cb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  00041148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001628  00000000  00000000  00042960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ba3  00000000  00000000  00043f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f502  00000000  00000000  00069b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3f25  00000000  00000000  0008902d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015cf52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066e4  00000000  00000000  0015cfa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000204 	.word	0x20000204
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080090c0 	.word	0x080090c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000208 	.word	0x20000208
 80001c4:	080090c0 	.word	0x080090c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <fsm_new>:
#include <stdlib.h>
#include "fsm.h"

fsm_t*
fsm_new (fsm_trans_t* tt)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 80004d4:	2008      	movs	r0, #8
 80004d6:	f008 fcdd 	bl	8008e94 <malloc>
 80004da:	4603      	mov	r3, r0
 80004dc:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f000 f805 	bl	80004f0 <fsm_init>
  return this;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <fsm_init>:

void
fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  this->current_state=0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
  this->tt = tt;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	605a      	str	r2, [r3, #4]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <fsm_fire>:

void
fsm_fire (fsm_t* this)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b084      	sub	sp, #16
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e01c      	b.n	800055c <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	429a      	cmp	r2, r3
 800052c:	d113      	bne.n	8000556 <fsm_fire+0x44>
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	4798      	blx	r3
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d00c      	beq.n	8000556 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00c      	beq.n	8000566 <fsm_fire+0x54>
        t->out(this);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	4798      	blx	r3
      break;
 8000554:	e007      	b.n	8000566 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3310      	adds	r3, #16
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	dade      	bge.n	8000522 <fsm_fire+0x10>
    }
  }
}
 8000564:	e000      	b.n	8000568 <fsm_fire+0x56>
      break;
 8000566:	bf00      	nop
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	4b7c      	ldr	r3, [pc, #496]	; (800077c <MX_GPIO_Init+0x20c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a7b      	ldr	r2, [pc, #492]	; (800077c <MX_GPIO_Init+0x20c>)
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b79      	ldr	r3, [pc, #484]	; (800077c <MX_GPIO_Init+0x20c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0310 	and.w	r3, r3, #16
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	4b75      	ldr	r3, [pc, #468]	; (800077c <MX_GPIO_Init+0x20c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a74      	ldr	r2, [pc, #464]	; (800077c <MX_GPIO_Init+0x20c>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b72      	ldr	r3, [pc, #456]	; (800077c <MX_GPIO_Init+0x20c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b6e      	ldr	r3, [pc, #440]	; (800077c <MX_GPIO_Init+0x20c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a6d      	ldr	r2, [pc, #436]	; (800077c <MX_GPIO_Init+0x20c>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b6b      	ldr	r3, [pc, #428]	; (800077c <MX_GPIO_Init+0x20c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b67      	ldr	r3, [pc, #412]	; (800077c <MX_GPIO_Init+0x20c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a66      	ldr	r2, [pc, #408]	; (800077c <MX_GPIO_Init+0x20c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b64      	ldr	r3, [pc, #400]	; (800077c <MX_GPIO_Init+0x20c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b60      	ldr	r3, [pc, #384]	; (800077c <MX_GPIO_Init+0x20c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a5f      	ldr	r2, [pc, #380]	; (800077c <MX_GPIO_Init+0x20c>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b5d      	ldr	r3, [pc, #372]	; (800077c <MX_GPIO_Init+0x20c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b59      	ldr	r3, [pc, #356]	; (800077c <MX_GPIO_Init+0x20c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a58      	ldr	r2, [pc, #352]	; (800077c <MX_GPIO_Init+0x20c>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b56      	ldr	r3, [pc, #344]	; (800077c <MX_GPIO_Init+0x20c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	4853      	ldr	r0, [pc, #332]	; (8000780 <MX_GPIO_Init+0x210>)
 8000634:	f001 fb12 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	4851      	ldr	r0, [pc, #324]	; (8000784 <MX_GPIO_Init+0x214>)
 800063e:	f001 fb0d 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	2200      	movs	r2, #0
 8000644:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000648:	484f      	ldr	r0, [pc, #316]	; (8000788 <MX_GPIO_Init+0x218>)
 800064a:	f001 fb07 	bl	8001c5c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800064e:	2308      	movs	r3, #8
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4846      	ldr	r0, [pc, #280]	; (8000780 <MX_GPIO_Init+0x210>)
 8000666:	f001 f945 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800066a:	2301      	movs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4840      	ldr	r0, [pc, #256]	; (8000784 <MX_GPIO_Init+0x214>)
 8000682:	f001 f937 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000686:	2308      	movs	r3, #8
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000696:	2305      	movs	r3, #5
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4838      	ldr	r0, [pc, #224]	; (8000784 <MX_GPIO_Init+0x214>)
 80006a2:	f001 f927 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4834      	ldr	r0, [pc, #208]	; (800078c <MX_GPIO_Init+0x21c>)
 80006bc:	f001 f91a 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006c0:	230e      	movs	r3, #14
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	482e      	ldr	r0, [pc, #184]	; (800078c <MX_GPIO_Init+0x21c>)
 80006d4:	f001 f90e 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006d8:	2304      	movs	r3, #4
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4829      	ldr	r0, [pc, #164]	; (8000790 <MX_GPIO_Init+0x220>)
 80006ec:	f001 f902 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000702:	2305      	movs	r3, #5
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4820      	ldr	r0, [pc, #128]	; (8000790 <MX_GPIO_Init+0x220>)
 800070e:	f001 f8f1 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000712:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000716:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4817      	ldr	r0, [pc, #92]	; (8000788 <MX_GPIO_Init+0x218>)
 800072c:	f001 f8e2 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000730:	2320      	movs	r3, #32
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_GPIO_Init+0x218>)
 8000744:	f001 f8d6 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800074c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <MX_GPIO_Init+0x210>)
 800075e:	f001 f8c9 	bl	80018f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2006      	movs	r0, #6
 8000768:	f001 f88d 	bl	8001886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800076c:	2006      	movs	r0, #6
 800076e:	f001 f8a6 	bl	80018be <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	; 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40021000 	.word	0x40021000
 8000784:	40020800 	.word	0x40020800
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40020000 	.word	0x40020000
 8000790:	40020400 	.word	0x40020400

08000794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x50>)
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <MX_I2C1_Init+0x54>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_I2C1_Init+0x58>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007d2:	f002 fe7f 	bl	80034d4 <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 fc3a 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000220 	.word	0x20000220
 80007e8:	40005400 	.word	0x40005400
 80007ec:	000186a0 	.word	0x000186a0

080007f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <HAL_I2C_MspInit+0x84>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d12c      	bne.n	800086c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_I2C_MspInit+0x88>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800082e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000834:	2312      	movs	r3, #18
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000840:	2304      	movs	r3, #4
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <HAL_I2C_MspInit+0x8c>)
 800084c:	f001 f852 	bl	80018f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_I2C_MspInit+0x88>)
 800085a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40005400 	.word	0x40005400
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400

08000880 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_I2S3_Init+0x54>)
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <MX_I2S3_Init+0x58>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2S3_Init+0x54>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_I2S3_Init+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <MX_I2S3_Init+0x5c>)
 80008aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008c0:	f002 ff4c 	bl	800375c <HAL_I2S_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ca:	f000 fbc3 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000274 	.word	0x20000274
 80008d8:	40003c00 	.word	0x40003c00
 80008dc:	00017700 	.word	0x00017700

080008e0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a31      	ldr	r2, [pc, #196]	; (80009d0 <HAL_I2S_MspInit+0xf0>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d15a      	bne.n	80009c6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000910:	2301      	movs	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000914:	23c0      	movs	r3, #192	; 0xc0
 8000916:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4618      	mov	r0, r3
 8000922:	f004 f83f 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800092c:	f000 fb92 	bl	8001054 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a26      	ldr	r2, [pc, #152]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800093a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800093e:	6413      	str	r3, [r2, #64]	; 0x40
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000984:	2310      	movs	r3, #16
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000994:	2306      	movs	r3, #6
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <HAL_I2S_MspInit+0xf8>)
 80009a0:	f000 ffa8 	bl	80018f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b6:	2306      	movs	r3, #6
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	4806      	ldr	r0, [pc, #24]	; (80009dc <HAL_I2S_MspInit+0xfc>)
 80009c2:	f000 ff97 	bl	80018f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009c6:	bf00      	nop
 80009c8:	3738      	adds	r7, #56	; 0x38
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40003c00 	.word	0x40003c00
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020800 	.word	0x40020800

080009e0 <boton_presionado>:

//salidas
static uint8_t faultx, faulty, faultz;

//funciones de transicion
static int boton_presionado (fsm_t* this) { if (timer_boton)return boton; else return 0; }
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <boton_presionado+0x24>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <boton_presionado+0x16>
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <boton_presionado+0x28>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	e000      	b.n	80009f8 <boton_presionado+0x18>
 80009f6:	2300      	movs	r3, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000000 	.word	0x20000000
 8000a08:	200002bc 	.word	0x200002bc

08000a0c <boton_no_presionado>:
static int boton_no_presionado (fsm_t* this) {return !boton; }
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <boton_no_presionado+0x24>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	bf0c      	ite	eq
 8000a1c:	2301      	moveq	r3, #1
 8000a1e:	2300      	movne	r3, #0
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	200002bc 	.word	0x200002bc

08000a34 <sensorx_on>:

static int sensorx_on (fsm_t* this) { return sensorx; }
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <sensorx_on+0x18>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	200002bd 	.word	0x200002bd

08000a50 <sensory_on>:
static int sensory_on (fsm_t* this) { return sensory; }
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <sensory_on+0x18>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	200002be 	.word	0x200002be

08000a6c <sensorz_on>:
static int sensorz_on (fsm_t* this) { return sensorz; }
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <sensorz_on+0x18>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	200002bf 	.word	0x200002bf

08000a88 <sensorx_off>:
static int sensorx_off (fsm_t* this) { return !sensorx; }
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <sensorx_off+0x24>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf0c      	ite	eq
 8000a98:	2301      	moveq	r3, #1
 8000a9a:	2300      	movne	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200002bd 	.word	0x200002bd

08000ab0 <sensory_off>:
static int sensory_off (fsm_t* this) { return !sensory; }
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <sensory_off+0x24>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	bf0c      	ite	eq
 8000ac0:	2301      	moveq	r3, #1
 8000ac2:	2300      	movne	r3, #0
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200002be 	.word	0x200002be

08000ad8 <sensorz_off>:
static int sensorz_off (fsm_t* this) { return !sensorz; }
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <sensorz_off+0x24>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200002bf 	.word	0x200002bf

08000b00 <activado_on>:

static int activado_on (fsm_t* this) { if (timer_lectura) return activado; else return 0; }
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <activado_on+0x24>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <activado_on+0x16>
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <activado_on+0x28>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	e000      	b.n	8000b18 <activado_on+0x18>
 8000b16:	2300      	movs	r3, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	200002c1 	.word	0x200002c1
 8000b28:	200002c0 	.word	0x200002c0

08000b2c <activado_off>:
static int activado_off (fsm_t* this) { if (!timer_lectura || !activado) return 1; else return 0; }
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <activado_off+0x2c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <activado_off+0x18>
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <activado_off+0x30>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <activado_off+0x1c>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <activado_off+0x1e>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200002c1 	.word	0x200002c1
 8000b5c:	200002c0 	.word	0x200002c0

08000b60 <activado_on_led>:
static int activado_on_led (fsm_t* this) { if (timer_led && activado) return 1; else return 0; }
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <activado_on_led+0x2c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d005      	beq.n	8000b7c <activado_on_led+0x1c>
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <activado_on_led+0x30>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <activado_on_led+0x1c>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e000      	b.n	8000b7e <activado_on_led+0x1e>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200002c2 	.word	0x200002c2
 8000b90:	200002c0 	.word	0x200002c0

08000b94 <activado_off_led>:
static int activado_off_led (fsm_t* this) { if (!timer_led||!activado) return 1; else return 0; }
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <activado_off_led+0x2c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <activado_off_led+0x18>
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <activado_off_led+0x30>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d101      	bne.n	8000bb0 <activado_off_led+0x1c>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e000      	b.n	8000bb2 <activado_off_led+0x1e>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200002c2 	.word	0x200002c2
 8000bc4:	200002c0 	.word	0x200002c0

08000bc8 <defecto>:

static int defecto (fsm_t* this)  {return 1;}
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <activacion>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void activacion (fsm_t* this)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  activado = 1;
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <activacion+0x1c>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200002c0 	.word	0x200002c0

08000c00 <desactivacion>:

static void desactivacion (fsm_t* this)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  activado = 0;
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <desactivacion+0x1c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200002c0 	.word	0x200002c0

08000c20 <lectura_x>:

static void lectura_x (fsm_t* this)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  faultx = 1;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <lectura_x+0x24>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <lectura_x+0x28>)
 8000c36:	f001 f811 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200002c3 	.word	0x200002c3
 8000c48:	40020c00 	.word	0x40020c00

08000c4c <lectura_y>:

static void lectura_y (fsm_t* this)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  faulty = 1;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <lectura_y+0x24>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <lectura_y+0x28>)
 8000c62:	f000 fffb 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200002c4 	.word	0x200002c4
 8000c74:	40020c00 	.word	0x40020c00

08000c78 <lectura_z>:

static void lectura_z (fsm_t* this)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  faultz = 1;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <lectura_z+0x24>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <lectura_z+0x28>)
 8000c8e:	f000 ffe5 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200002c5 	.word	0x200002c5
 8000ca0:	40020c00 	.word	0x40020c00

08000ca4 <lectura_x_fin>:

static void lectura_x_fin (fsm_t* this)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  faultx = 0;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <lectura_x_fin+0x24>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <lectura_x_fin+0x28>)
 8000cba:	f000 ffcf 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200002c3 	.word	0x200002c3
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <lectura_y_fin>:

static void lectura_y_fin (fsm_t* this)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  faulty = 0;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <lectura_y_fin+0x24>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <lectura_y_fin+0x28>)
 8000ce6:	f000 ffb9 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200002c4 	.word	0x200002c4
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <lectura_z_fin>:

static void lectura_z_fin (fsm_t* this)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  faultz = 0;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <lectura_z_fin+0x24>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <lectura_z_fin+0x28>)
 8000d12:	f000 ffa3 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200002c5 	.word	0x200002c5
 8000d24:	40020c00 	.word	0x40020c00

08000d28 <lectura_fin>:

static void lectura_fin (fsm_t* this)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  faultx = 0;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <lectura_fin+0x48>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
  faulty = 0;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <lectura_fin+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
  faultz = 0;
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <lectura_fin+0x50>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <lectura_fin+0x54>)
 8000d4a:	f000 ff87 	bl	8001c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <lectura_fin+0x54>)
 8000d56:	f000 ff81 	bl	8001c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <lectura_fin+0x54>)
 8000d62:	f000 ff7b 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200002c3 	.word	0x200002c3
 8000d74:	200002c4 	.word	0x200002c4
 8000d78:	200002c5 	.word	0x200002c5
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <led_activado>:

static void led_activado (fsm_t* this)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <led_activado+0x1c>)
 8000d90:	f000 ff64 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40020c00 	.word	0x40020c00

08000da0 <led_no_activado>:

static void led_no_activado (fsm_t* this)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <led_no_activado+0x1c>)
 8000db0:	f000 ff54 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 fbed 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f87d 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f7ff fbcf 	bl	8000570 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dd2:	f7ff fcdf 	bl	8000794 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dd6:	f7ff fd53 	bl	8000880 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000dda:	f000 f941 	bl	8001060 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000dde:	f007 fd27 	bl	8008830 <MX_USB_HOST_Init>
  MX_TIM6_Init();
 8000de2:	f000 fadd 	bl	80013a0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000de6:	f000 fb11 	bl	800140c <MX_TIM7_Init>
  MX_TIM2_Init();
 8000dea:	f000 fa81 	bl	80012f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Temporizadores
  HAL_TIM_Base_Start_IT(&htim6); //Temporizador del led azul
 8000dee:	482b      	ldr	r0, [pc, #172]	; (8000e9c <main+0xdc>)
 8000df0:	f003 fff0 	bl	8004dd4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); //Temporizador para hacer las lecturas
 8000df4:	482a      	ldr	r0, [pc, #168]	; (8000ea0 <main+0xe0>)
 8000df6:	f003 ffed 	bl	8004dd4 <HAL_TIM_Base_Start_IT>

  //Creación de las FSM
  fsm_t* fsm_inicio = fsm_new (inicio);
 8000dfa:	482a      	ldr	r0, [pc, #168]	; (8000ea4 <main+0xe4>)
 8000dfc:	f7ff fb66 	bl	80004cc <fsm_new>
 8000e00:	6178      	str	r0, [r7, #20]
  fsm_t* fsm_lectura_x = fsm_new (lecturax);
 8000e02:	4829      	ldr	r0, [pc, #164]	; (8000ea8 <main+0xe8>)
 8000e04:	f7ff fb62 	bl	80004cc <fsm_new>
 8000e08:	6138      	str	r0, [r7, #16]
  fsm_t* fsm_lectura_y = fsm_new (lecturay);
 8000e0a:	4828      	ldr	r0, [pc, #160]	; (8000eac <main+0xec>)
 8000e0c:	f7ff fb5e 	bl	80004cc <fsm_new>
 8000e10:	60f8      	str	r0, [r7, #12]
  fsm_t* fsm_lectura_z = fsm_new (lecturaz);
 8000e12:	4827      	ldr	r0, [pc, #156]	; (8000eb0 <main+0xf0>)
 8000e14:	f7ff fb5a 	bl	80004cc <fsm_new>
 8000e18:	60b8      	str	r0, [r7, #8]
  fsm_t* fsm_led_activo = fsm_new (led_activo);
 8000e1a:	4826      	ldr	r0, [pc, #152]	; (8000eb4 <main+0xf4>)
 8000e1c:	f7ff fb56 	bl	80004cc <fsm_new>
 8000e20:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e22:	f007 fd2b 	bl	800887c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    fsm_fire (fsm_inicio);
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff fb73 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_x);
 8000e2c:	6938      	ldr	r0, [r7, #16]
 8000e2e:	f7ff fb70 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_y);
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f7ff fb6d 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_z);
 8000e38:	68b8      	ldr	r0, [r7, #8]
 8000e3a:	f7ff fb6a 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_led_activo);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff fb67 	bl	8000512 <fsm_fire>

    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000e44:	2102      	movs	r1, #2
 8000e46:	481c      	ldr	r0, [pc, #112]	; (8000eb8 <main+0xf8>)
 8000e48:	f000 fef0 	bl	8001c2c <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <main+0x9a>
    	sensorx = 1;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <main+0xfc>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	e002      	b.n	8000e60 <main+0xa0>
    else
    	sensorx = 0;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <main+0xfc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000e60:	2104      	movs	r1, #4
 8000e62:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <main+0xf8>)
 8000e64:	f000 fee2 	bl	8001c2c <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <main+0xb6>
       	sensory = 1;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <main+0x100>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e002      	b.n	8000e7c <main+0xbc>
    else
		sensory = 0;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <main+0x100>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <main+0xf8>)
 8000e80:	f000 fed4 	bl	8001c2c <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <main+0xd2>
       	sensorz = 1;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <main+0x104>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
 8000e90:	e7c7      	b.n	8000e22 <main+0x62>
    else
		sensorz = 0;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <main+0x104>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000e98:	e7c3      	b.n	8000e22 <main+0x62>
 8000e9a:	bf00      	nop
 8000e9c:	2000036c 	.word	0x2000036c
 8000ea0:	20000324 	.word	0x20000324
 8000ea4:	20000004 	.word	0x20000004
 8000ea8:	20000044 	.word	0x20000044
 8000eac:	20000094 	.word	0x20000094
 8000eb0:	200000e4 	.word	0x200000e4
 8000eb4:	20000134 	.word	0x20000134
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	200002bd 	.word	0x200002bd
 8000ec0:	200002be 	.word	0x200002be
 8000ec4:	200002bf 	.word	0x200002bf

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2230      	movs	r2, #48	; 0x30
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f007 ffec 	bl	8008eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <SystemClock_Config+0xcc>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f46:	2307      	movs	r3, #7
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 f8a4 	bl	800409c <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f5a:	f000 f87b 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2302      	movs	r3, #2
 8000f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000f6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2105      	movs	r1, #5
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 fb05 	bl	800458c <HAL_RCC_ClockConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f88:	f000 f864 	bl	8001054 <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3750      	adds	r7, #80	; 0x50
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
	//Interrupcion por la pulsacion del boton de inicio
	if(GPIO_Pin==GPIO_PIN_0 && timer_boton==1){
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d10f      	bne.n	8000fcc <HAL_GPIO_EXTI_Callback+0x30>
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d10b      	bne.n	8000fcc <HAL_GPIO_EXTI_Callback+0x30>
		boton=~boton; //Cambia el flag del boton cada vez que se detecta una pulsacion
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000fbe:	701a      	strb	r2, [r3, #0]
		timer_boton=0; //Se reinicia el flag del temporizador del boton
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim7); //Vuelve a comenzar la cuenta del tiempo del boton
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x40>)
 8000fc8:	f003 ff04 	bl	8004dd4 <HAL_TIM_Base_Start_IT>

	}
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	200002bc 	.word	0x200002bc
 8000fdc:	200003b4 	.word	0x200003b4

08000fe0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff0:	d105      	bne.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		timer_lectura=~timer_lectura;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ffc:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance==TIM6)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d105      	bne.n	8001014 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		timer_led=~timer_led;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	43db      	mvns	r3, r3
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001012:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance==TIM7)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d109      	bne.n	8001032 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		timer_boton=1; //Cuando termina la cuenta del temporizador del boton se activa el flag
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim7); //Se para el temporizador
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001026:	f003 ff45 	bl	8004eb4 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim7,0); //Se reinicia a cero la cuenta del temporizador para volver a dispararlo mas tarde
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200002c1 	.word	0x200002c1
 8001040:	40001000 	.word	0x40001000
 8001044:	200002c2 	.word	0x200002c2
 8001048:	40001400 	.word	0x40001400
 800104c:	20000000 	.word	0x20000000
 8001050:	200003b4 	.word	0x200003b4

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	e7fe      	b.n	800105c <Error_Handler+0x8>
	...

08001060 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001066:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <MX_SPI1_Init+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_SPI1_Init+0x64>)
 800106c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001070:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_SPI1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_SPI1_Init+0x64>)
 800108c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001090:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010ac:	220a      	movs	r2, #10
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010b2:	f003 fdb7 	bl	8004c24 <HAL_SPI_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010bc:	f7ff ffca 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200002c8 	.word	0x200002c8
 80010c8:	40013000 	.word	0x40013000

080010cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a19      	ldr	r2, [pc, #100]	; (8001150 <HAL_SPI_MspInit+0x84>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12b      	bne.n	8001146 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_SPI_MspInit+0x88>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <HAL_SPI_MspInit+0x88>)
 80010f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_SPI_MspInit+0x88>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_SPI_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_SPI_MspInit+0x88>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_SPI_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001126:	23e0      	movs	r3, #224	; 0xe0
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001136:	2305      	movs	r3, #5
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <HAL_SPI_MspInit+0x8c>)
 8001142:	f000 fbd7 	bl	80018f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40013000 	.word	0x40013000
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_MspInit+0x4c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_MspInit+0x4c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800119a:	2007      	movs	r0, #7
 800119c:	f000 fb68 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 fa26 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001204:	2001      	movs	r0, #1
 8001206:	f000 fd43 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM2_IRQHandler+0x10>)
 8001216:	f003 fecb 	bl	8004fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000324 	.word	0x20000324

08001224 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM6_DAC_IRQHandler+0x10>)
 800122a:	f003 fec1 	bl	8004fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000036c 	.word	0x2000036c

08001238 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM7_IRQHandler+0x10>)
 800123e:	f003 feb7 	bl	8004fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200003b4 	.word	0x200003b4

0800124c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <OTG_FS_IRQHandler+0x10>)
 8001252:	f000 ff9f 	bl	8002194 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200007dc 	.word	0x200007dc

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f007 fdd6 	bl	8008e40 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20020000 	.word	0x20020000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	20000320 	.word	0x20000320
 80012c8:	20000af0 	.word	0x20000af0

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
 8001310:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_TIM2_Init+0xa8>)
 8001314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001318:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_TIM2_Init+0xa8>)
 800131c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001320:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_TIM2_Init+0xa8>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_TIM2_Init+0xa8>)
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <MX_TIM2_Init+0xac>)
 800132c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_TIM2_Init+0xa8>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_TIM2_Init+0xa8>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800133a:	4817      	ldr	r0, [pc, #92]	; (8001398 <MX_TIM2_Init+0xa8>)
 800133c:	f003 fde9 	bl	8004f12 <HAL_TIM_OC_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001346:	f7ff fe85 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4619      	mov	r1, r3
 8001358:	480f      	ldr	r0, [pc, #60]	; (8001398 <MX_TIM2_Init+0xa8>)
 800135a:	f004 fa05 	bl	8005768 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001364:	f7ff fe76 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999999;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_TIM2_Init+0xac>)
 800136e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	4619      	mov	r1, r3
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <MX_TIM2_Init+0xa8>)
 8001380:	f003 ff1e 	bl	80051c0 <HAL_TIM_OC_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800138a:	f7ff fe63 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000324 	.word	0x20000324
 800139c:	000f423f 	.word	0x000f423f

080013a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_TIM6_Init+0x64>)
 80013b0:	4a15      	ldr	r2, [pc, #84]	; (8001408 <MX_TIM6_Init+0x68>)
 80013b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <MX_TIM6_Init+0x64>)
 80013b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_TIM6_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 41999;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_TIM6_Init+0x64>)
 80013c4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80013c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_TIM6_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <MX_TIM6_Init+0x64>)
 80013d2:	f003 fcb0 	bl	8004d36 <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80013dc:	f7ff fe3a 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_TIM6_Init+0x64>)
 80013ee:	f004 f9bb 	bl	8005768 <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80013f8:	f7ff fe2c 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000036c 	.word	0x2000036c
 8001408:	40001000 	.word	0x40001000

0800140c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001412:	463b      	mov	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_TIM7_Init+0x64>)
 800141c:	4a15      	ldr	r2, [pc, #84]	; (8001474 <MX_TIM7_Init+0x68>)
 800141e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1999;
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_TIM7_Init+0x64>)
 8001422:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001426:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_TIM7_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 41999;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_TIM7_Init+0x64>)
 8001430:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001434:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_TIM7_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <MX_TIM7_Init+0x64>)
 800143e:	f003 fc7a 	bl	8004d36 <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001448:	f7ff fe04 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_TIM7_Init+0x64>)
 800145a:	f004 f985 	bl	8005768 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001464:	f7ff fdf6 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200003b4 	.word	0x200003b4
 8001474:	40001400 	.word	0x40001400

08001478 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001488:	d115      	bne.n	80014b6 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_TIM_OC_MspInit+0x48>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_TIM_OC_MspInit+0x48>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_TIM_OC_MspInit+0x48>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	201c      	movs	r0, #28
 80014ac:	f000 f9eb 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014b0:	201c      	movs	r0, #28
 80014b2:	f000 fa04 	bl	80018be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <HAL_TIM_Base_MspInit+0x80>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d116      	bne.n	8001504 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a1a      	ldr	r2, [pc, #104]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 80014e0:	f043 0310 	orr.w	r3, r3, #16
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2036      	movs	r0, #54	; 0x36
 80014f8:	f000 f9c5 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014fc:	2036      	movs	r0, #54	; 0x36
 80014fe:	f000 f9de 	bl	80018be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001502:	e01a      	b.n	800153a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <HAL_TIM_Base_MspInit+0x88>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d115      	bne.n	800153a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 8001518:	f043 0320 	orr.w	r3, r3, #32
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2037      	movs	r0, #55	; 0x37
 8001530:	f000 f9a9 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001534:	2037      	movs	r0, #55	; 0x37
 8001536:	f000 f9c2 	bl	80018be <HAL_NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40001000 	.word	0x40001000
 8001548:	40023800 	.word	0x40023800
 800154c:	40001400 	.word	0x40001400

08001550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001556:	490e      	ldr	r1, [pc, #56]	; (8001590 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800156c:	4c0b      	ldr	r4, [pc, #44]	; (800159c <LoopFillZerobss+0x26>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157a:	f7ff fea7 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157e:	f007 fc65 	bl	8008e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001582:	f7ff fc1d 	bl	8000dc0 <main>
  bx  lr    
 8001586:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001594:	08009104 	.word	0x08009104
  ldr r2, =_sbss
 8001598:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 800159c:	20000af0 	.word	0x20000af0

080015a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_Init+0x40>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_Init+0x40>)
 80015ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x40>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f94f 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff fdc0 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f967 	bl	80018da <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f92f 	bl	8001886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000174 	.word	0x20000174
 8001640:	2000017c 	.word	0x2000017c
 8001644:	20000178 	.word	0x20000178

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	2000017c 	.word	0x2000017c
 800166c:	200003fc 	.word	0x200003fc

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200003fc 	.word	0x200003fc

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff ffee 	bl	8001670 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffde 	bl	8001670 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000017c 	.word	0x2000017c

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f7ff ff8e 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff29 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001898:	f7ff ff3e 	bl	8001718 <__NVIC_GetPriorityGrouping>
 800189c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	6978      	ldr	r0, [r7, #20]
 80018a4:	f7ff ff8e 	bl	80017c4 <NVIC_EncodePriority>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff5d 	bl	8001770 <__NVIC_SetPriority>
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff31 	bl	8001734 <__NVIC_EnableIRQ>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffa2 	bl	800182c <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e16b      	b.n	8001be8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 815a 	bne.w	8001be2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d005      	beq.n	8001946 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001942:	2b02      	cmp	r3, #2
 8001944:	d130      	bne.n	80019a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800197c:	2201      	movs	r2, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 0201 	and.w	r2, r3, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d017      	beq.n	80019e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d123      	bne.n	8001a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80b4 	beq.w	8001be2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b60      	ldr	r3, [pc, #384]	; (8001c00 <HAL_GPIO_Init+0x30c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a5f      	ldr	r2, [pc, #380]	; (8001c00 <HAL_GPIO_Init+0x30c>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <HAL_GPIO_Init+0x30c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a96:	4a5b      	ldr	r2, [pc, #364]	; (8001c04 <HAL_GPIO_Init+0x310>)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_GPIO_Init+0x314>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d02b      	beq.n	8001b1a <HAL_GPIO_Init+0x226>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a51      	ldr	r2, [pc, #324]	; (8001c0c <HAL_GPIO_Init+0x318>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d025      	beq.n	8001b16 <HAL_GPIO_Init+0x222>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a50      	ldr	r2, [pc, #320]	; (8001c10 <HAL_GPIO_Init+0x31c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01f      	beq.n	8001b12 <HAL_GPIO_Init+0x21e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4f      	ldr	r2, [pc, #316]	; (8001c14 <HAL_GPIO_Init+0x320>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d019      	beq.n	8001b0e <HAL_GPIO_Init+0x21a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4e      	ldr	r2, [pc, #312]	; (8001c18 <HAL_GPIO_Init+0x324>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0x216>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4d      	ldr	r2, [pc, #308]	; (8001c1c <HAL_GPIO_Init+0x328>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_Init+0x212>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4c      	ldr	r2, [pc, #304]	; (8001c20 <HAL_GPIO_Init+0x32c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_Init+0x20e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <HAL_GPIO_Init+0x330>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_Init+0x20a>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e00e      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001afe:	2308      	movs	r3, #8
 8001b00:	e00c      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b02:	2306      	movs	r3, #6
 8001b04:	e00a      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2c:	4935      	ldr	r1, [pc, #212]	; (8001c04 <HAL_GPIO_Init+0x310>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5e:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b64:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b88:	4a27      	ldr	r2, [pc, #156]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bdc:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3301      	adds	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b0f      	cmp	r3, #15
 8001bec:	f67f ae90 	bls.w	8001910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40013800 	.word	0x40013800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40021400 	.word	0x40021400
 8001c20:	40021800 	.word	0x40021800
 8001c24:	40021c00 	.word	0x40021c00
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e001      	b.n	8001c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f974 	bl	8000f9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	b08f      	sub	sp, #60	; 0x3c
 8001cc4:	af0a      	add	r7, sp, #40	; 0x28
 8001cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e054      	b.n	8001d7c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d106      	bne.n	8001cf2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f006 fdfd 	bl	80088ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 fe2b 	bl	800596c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	687e      	ldr	r6, [r7, #4]
 8001d1e:	466d      	mov	r5, sp
 8001d20:	f106 0410 	add.w	r4, r6, #16
 8001d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d30:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d34:	1d33      	adds	r3, r6, #4
 8001d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d38:	6838      	ldr	r0, [r7, #0]
 8001d3a:	f003 fda5 	bl	8005888 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2101      	movs	r1, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 fe22 	bl	800598e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	687e      	ldr	r6, [r7, #4]
 8001d52:	466d      	mov	r5, sp
 8001d54:	f106 0410 	add.w	r4, r6, #16
 8001d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d64:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d68:	1d33      	adds	r3, r6, #4
 8001d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d6c:	6838      	ldr	r0, [r7, #0]
 8001d6e:	f003 ffab 	bl	8005cc8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d84 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af04      	add	r7, sp, #16
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	4608      	mov	r0, r1
 8001d8e:	4611      	mov	r1, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	70fb      	strb	r3, [r7, #3]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70bb      	strb	r3, [r7, #2]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_HCD_HC_Init+0x28>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e076      	b.n	8001e9a <HAL_HCD_HC_Init+0x116>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	212c      	movs	r1, #44	; 0x2c
 8001dba:	fb01 f303 	mul.w	r3, r1, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	333d      	adds	r3, #61	; 0x3d
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3338      	adds	r3, #56	; 0x38
 8001dd4:	787a      	ldrb	r2, [r7, #1]
 8001dd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3340      	adds	r3, #64	; 0x40
 8001de6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001de8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	212c      	movs	r1, #44	; 0x2c
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	3339      	adds	r3, #57	; 0x39
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	212c      	movs	r1, #44	; 0x2c
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	333f      	adds	r3, #63	; 0x3f
 8001e0a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	78ba      	ldrb	r2, [r7, #2]
 8001e14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e18:	b2d0      	uxtb	r0, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	333a      	adds	r3, #58	; 0x3a
 8001e26:	4602      	mov	r2, r0
 8001e28:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da09      	bge.n	8001e46 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	212c      	movs	r1, #44	; 0x2c
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	333b      	adds	r3, #59	; 0x3b
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e008      	b.n	8001e58 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	333b      	adds	r3, #59	; 0x3b
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	212c      	movs	r1, #44	; 0x2c
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	333c      	adds	r3, #60	; 0x3c
 8001e66:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e6a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	787c      	ldrb	r4, [r7, #1]
 8001e72:	78ba      	ldrb	r2, [r7, #2]
 8001e74:	78f9      	ldrb	r1, [r7, #3]
 8001e76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e78:	9302      	str	r3, [sp, #8]
 8001e7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	4623      	mov	r3, r4
 8001e88:	f004 f8a4 	bl	8005fd4 <USB_HC_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd90      	pop	{r4, r7, pc}

08001ea2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_HCD_HC_Halt+0x1e>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e00f      	b.n	8001ee0 <HAL_HCD_HC_Halt+0x3e>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f004 faf4 	bl	80064be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	70fb      	strb	r3, [r7, #3]
 8001efa:	460b      	mov	r3, r1
 8001efc:	70bb      	strb	r3, [r7, #2]
 8001efe:	4613      	mov	r3, r2
 8001f00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	333b      	adds	r3, #59	; 0x3b
 8001f10:	78ba      	ldrb	r2, [r7, #2]
 8001f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	333f      	adds	r3, #63	; 0x3f
 8001f22:	787a      	ldrb	r2, [r7, #1]
 8001f24:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f26:	7c3b      	ldrb	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d112      	bne.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	212c      	movs	r1, #44	; 0x2c
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	3342      	adds	r3, #66	; 0x42
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	333d      	adds	r3, #61	; 0x3d
 8001f4c:	7f3a      	ldrb	r2, [r7, #28]
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e008      	b.n	8001f64 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3342      	adds	r3, #66	; 0x42
 8001f60:	2202      	movs	r2, #2
 8001f62:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	f200 80c6 	bhi.w	80020f8 <HAL_HCD_HC_SubmitRequest+0x210>
 8001f6c:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001f85 	.word	0x08001f85
 8001f78:	080020e5 	.word	0x080020e5
 8001f7c:	08001fe9 	.word	0x08001fe9
 8001f80:	08002067 	.word	0x08002067
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f84:	7c3b      	ldrb	r3, [r7, #16]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	f040 80b8 	bne.w	80020fc <HAL_HCD_HC_SubmitRequest+0x214>
 8001f8c:	78bb      	ldrb	r3, [r7, #2]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80b4 	bne.w	80020fc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001f94:	8b3b      	ldrh	r3, [r7, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d108      	bne.n	8001fac <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	212c      	movs	r1, #44	; 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3355      	adds	r3, #85	; 0x55
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3355      	adds	r3, #85	; 0x55
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3342      	adds	r3, #66	; 0x42
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fd2:	e093      	b.n	80020fc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	212c      	movs	r1, #44	; 0x2c
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3342      	adds	r3, #66	; 0x42
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	701a      	strb	r2, [r3, #0]
      break;
 8001fe6:	e089      	b.n	80020fc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001fe8:	78bb      	ldrb	r3, [r7, #2]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d11d      	bne.n	800202a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3355      	adds	r3, #85	; 0x55
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3342      	adds	r3, #66	; 0x42
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002014:	e073      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	3342      	adds	r3, #66	; 0x42
 8002024:	2202      	movs	r2, #2
 8002026:	701a      	strb	r2, [r3, #0]
      break;
 8002028:	e069      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3354      	adds	r3, #84	; 0x54
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3342      	adds	r3, #66	; 0x42
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
      break;
 8002050:	e055      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3342      	adds	r3, #66	; 0x42
 8002060:	2202      	movs	r2, #2
 8002062:	701a      	strb	r2, [r3, #0]
      break;
 8002064:	e04b      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002066:	78bb      	ldrb	r3, [r7, #2]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d11d      	bne.n	80020a8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3355      	adds	r3, #85	; 0x55
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d109      	bne.n	8002094 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3342      	adds	r3, #66	; 0x42
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002092:	e034      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3342      	adds	r3, #66	; 0x42
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
      break;
 80020a6:	e02a      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3354      	adds	r3, #84	; 0x54
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3342      	adds	r3, #66	; 0x42
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
      break;
 80020ce:	e016      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3342      	adds	r3, #66	; 0x42
 80020de:	2202      	movs	r2, #2
 80020e0:	701a      	strb	r2, [r3, #0]
      break;
 80020e2:	e00c      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3342      	adds	r3, #66	; 0x42
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80020f8:	bf00      	nop
 80020fa:	e000      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80020fc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3344      	adds	r3, #68	; 0x44
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	8b3a      	ldrh	r2, [r7, #24]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	202c      	movs	r0, #44	; 0x2c
 8002118:	fb00 f303 	mul.w	r3, r0, r3
 800211c:	440b      	add	r3, r1
 800211e:	334c      	adds	r3, #76	; 0x4c
 8002120:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3360      	adds	r3, #96	; 0x60
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3350      	adds	r3, #80	; 0x50
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	3339      	adds	r3, #57	; 0x39
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	3361      	adds	r3, #97	; 0x61
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	222c      	movs	r2, #44	; 0x2c
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	3338      	adds	r3, #56	; 0x38
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	18d1      	adds	r1, r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	f004 f848 	bl	8006218 <USB_HC_StartXfer>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop

08002194 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fd49 	bl	8005c42 <USB_GetMode>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	f040 80f6 	bne.w	80023a4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fd2d 	bl	8005c1c <USB_ReadInterrupts>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80ec 	beq.w	80023a2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fd24 	bl	8005c1c <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021de:	d104      	bne.n	80021ea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fd14 	bl	8005c1c <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021fe:	d104      	bne.n	800220a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002208:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fd04 	bl	8005c1c <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800221a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800221e:	d104      	bne.n	800222a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002228:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fcf4 	bl	8005c1c <USB_ReadInterrupts>
 8002234:	4603      	mov	r3, r0
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d103      	bne.n	8002246 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2202      	movs	r2, #2
 8002244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fce6 	bl	8005c1c <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800225a:	d11c      	bne.n	8002296 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002264:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002276:	2110      	movs	r1, #16
 8002278:	6938      	ldr	r0, [r7, #16]
 800227a:	f003 fbd5 	bl	8005a28 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800227e:	6938      	ldr	r0, [r7, #16]
 8002280:	f003 fc06 	bl	8005a90 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fddc 	bl	8005e48 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f006 fba9 	bl	80089e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f003 fcbe 	bl	8005c1c <USB_ReadInterrupts>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022aa:	d102      	bne.n	80022b2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f001 f89e 	bl	80033ee <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 fcb0 	bl	8005c1c <USB_ReadInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d106      	bne.n	80022d4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f006 fb72 	bl	80089b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2208      	movs	r2, #8
 80022d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 fc9f 	bl	8005c1c <USB_ReadInterrupts>
 80022de:	4603      	mov	r3, r0
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d101      	bne.n	80022ec <HAL_HCD_IRQHandler+0x158>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_HCD_IRQHandler+0x15a>
 80022ec:	2300      	movs	r3, #0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0210 	bic.w	r2, r2, #16
 8002300:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 ffa1 	bl	800324a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0210 	orr.w	r2, r2, #16
 8002316:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f003 fc7d 	bl	8005c1c <USB_ReadInterrupts>
 8002322:	4603      	mov	r3, r0
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800232c:	d13a      	bne.n	80023a4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f004 f8b2 	bl	800649c <USB_HC_ReadInterrupt>
 8002338:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e025      	b.n	800238c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d018      	beq.n	8002386 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800236a:	d106      	bne.n	800237a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8ab 	bl	80024ce <HCD_HC_IN_IRQHandler>
 8002378:	e005      	b.n	8002386 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4619      	mov	r1, r3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fbf9 	bl	8002b78 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	429a      	cmp	r2, r3
 8002394:	d3d4      	bcc.n	8002340 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239e:	615a      	str	r2, [r3, #20]
 80023a0:	e000      	b.n	80023a4 <HAL_HCD_IRQHandler+0x210>
      return;
 80023a2:	bf00      	nop
    }
  }
}
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_HCD_Start+0x16>
 80023bc:	2302      	movs	r3, #2
 80023be:	e013      	b.n	80023e8 <HAL_HCD_Start+0x3e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 fd9e 	bl	8005f10 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 fab6 	bl	800594a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_HCD_Stop+0x16>
 8002402:	2302      	movs	r3, #2
 8002404:	e00d      	b.n	8002422 <HAL_HCD_Stop+0x32>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f004 f98c 	bl	8006730 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f003 fd40 	bl	8005ebc <USB_ResetPort>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	3360      	adds	r3, #96	; 0x60
 8002460:	781b      	ldrb	r3, [r3, #0]
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3350      	adds	r3, #80	; 0x50
 8002488:	681b      	ldr	r3, [r3, #0]
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fd84 	bl	8005fb0 <USB_GetCurrentFrame>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 fd5f 	bl	8005f82 <USB_GetHostSpeed>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d11a      	bne.n	8002534 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	461a      	mov	r2, r3
 800250c:	2304      	movs	r3, #4
 800250e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3361      	adds	r3, #97	; 0x61
 800251e:	2206      	movs	r2, #6
 8002520:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f003 ffc6 	bl	80064be <USB_HC_Halt>
 8002532:	e0af      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254a:	d11b      	bne.n	8002584 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3361      	adds	r3, #97	; 0x61
 800256e:	2207      	movs	r2, #7
 8002570:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f003 ff9e 	bl	80064be <USB_HC_Halt>
 8002582:	e087      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b20      	cmp	r3, #32
 8002598:	d109      	bne.n	80025ae <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	461a      	mov	r2, r3
 80025a8:	2320      	movs	r3, #32
 80025aa:	6093      	str	r3, [r2, #8]
 80025ac:	e072      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d11a      	bne.n	80025fa <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	461a      	mov	r2, r3
 80025d2:	2308      	movs	r3, #8
 80025d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3361      	adds	r3, #97	; 0x61
 80025e4:	2205      	movs	r2, #5
 80025e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 ff63 	bl	80064be <USB_HC_Halt>
 80025f8:	e04c      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002610:	d11b      	bne.n	800264a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	461a      	mov	r2, r3
 8002620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002624:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3361      	adds	r3, #97	; 0x61
 8002634:	2208      	movs	r2, #8
 8002636:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f003 ff3b 	bl	80064be <USB_HC_Halt>
 8002648:	e024      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	d119      	bne.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	461a      	mov	r2, r3
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3361      	adds	r3, #97	; 0x61
 8002680:	2206      	movs	r2, #6
 8002682:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f003 ff15 	bl	80064be <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026aa:	d112      	bne.n	80026d2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 ff01 	bl	80064be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ce:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026d0:	e24e      	b.n	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	f040 80df 	bne.w	80028a8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d019      	beq.n	8002726 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	3348      	adds	r3, #72	; 0x48
 8002700:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	0159      	lsls	r1, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	440b      	add	r3, r1
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002714:	1ad2      	subs	r2, r2, r3
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	202c      	movs	r0, #44	; 0x2c
 800271c:	fb00 f303 	mul.w	r3, r0, r3
 8002720:	440b      	add	r3, r1
 8002722:	3350      	adds	r3, #80	; 0x50
 8002724:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3361      	adds	r3, #97	; 0x61
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	335c      	adds	r3, #92	; 0x5c
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	2301      	movs	r3, #1
 800275a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	212c      	movs	r1, #44	; 0x2c
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	4413      	add	r3, r2
 8002768:	333f      	adds	r3, #63	; 0x3f
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	333f      	adds	r3, #63	; 0x3f
 800277e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002780:	2b02      	cmp	r3, #2
 8002782:	d111      	bne.n	80027a8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f003 fe95 	bl	80064be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	461a      	mov	r2, r3
 80027a2:	2310      	movs	r3, #16
 80027a4:	6093      	str	r3, [r2, #8]
 80027a6:	e03a      	b.n	800281e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	333f      	adds	r3, #63	; 0x3f
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d009      	beq.n	80027d0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	333f      	adds	r3, #63	; 0x3f
 80027ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d126      	bne.n	800281e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	0151      	lsls	r1, r2, #5
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	440a      	add	r2, r1
 80027e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027ee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	3360      	adds	r3, #96	; 0x60
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	b2d9      	uxtb	r1, r3
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	202c      	movs	r0, #44	; 0x2c
 800280c:	fb00 f303 	mul.w	r3, r0, r3
 8002810:	4413      	add	r3, r2
 8002812:	3360      	adds	r3, #96	; 0x60
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f006 f8f3 	bl	8008a04 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d12b      	bne.n	800287e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3348      	adds	r3, #72	; 0x48
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	202c      	movs	r0, #44	; 0x2c
 800283c:	fb00 f202 	mul.w	r2, r0, r2
 8002840:	440a      	add	r2, r1
 8002842:	3240      	adds	r2, #64	; 0x40
 8002844:	8812      	ldrh	r2, [r2, #0]
 8002846:	fbb3 f3f2 	udiv	r3, r3, r2
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 818e 	beq.w	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3354      	adds	r3, #84	; 0x54
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	f083 0301 	eor.w	r3, r3, #1
 8002868:	b2d8      	uxtb	r0, r3
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	3354      	adds	r3, #84	; 0x54
 8002878:	4602      	mov	r2, r0
 800287a:	701a      	strb	r2, [r3, #0]
}
 800287c:	e178      	b.n	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3354      	adds	r3, #84	; 0x54
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f083 0301 	eor.w	r3, r3, #1
 8002892:	b2d8      	uxtb	r0, r3
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3354      	adds	r3, #84	; 0x54
 80028a2:	4602      	mov	r2, r0
 80028a4:	701a      	strb	r2, [r3, #0]
}
 80028a6:	e163      	b.n	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	f040 80f6 	bne.w	8002aac <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	212c      	movs	r1, #44	; 0x2c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	3361      	adds	r3, #97	; 0x61
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d109      	bne.n	80028e8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3360      	adds	r3, #96	; 0x60
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e0c9      	b.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3361      	adds	r3, #97	; 0x61
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d109      	bne.n	8002910 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3360      	adds	r3, #96	; 0x60
 800290a:	2205      	movs	r2, #5
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e0b5      	b.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3361      	adds	r3, #97	; 0x61
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b06      	cmp	r3, #6
 8002922:	d009      	beq.n	8002938 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3361      	adds	r3, #97	; 0x61
 8002932:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002934:	2b08      	cmp	r3, #8
 8002936:	d150      	bne.n	80029da <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	335c      	adds	r3, #92	; 0x5c
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	202c      	movs	r0, #44	; 0x2c
 8002950:	fb00 f303 	mul.w	r3, r0, r3
 8002954:	440b      	add	r3, r1
 8002956:	335c      	adds	r3, #92	; 0x5c
 8002958:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	335c      	adds	r3, #92	; 0x5c
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d912      	bls.n	8002994 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	335c      	adds	r3, #92	; 0x5c
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3360      	adds	r3, #96	; 0x60
 800298e:	2204      	movs	r2, #4
 8002990:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002992:	e073      	b.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3360      	adds	r3, #96	; 0x60
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029bc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029c4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	461a      	mov	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029d8:	e050      	b.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3361      	adds	r3, #97	; 0x61
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d122      	bne.n	8002a34 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3360      	adds	r3, #96	; 0x60
 80029fc:	2202      	movs	r2, #2
 80029fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a16:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a1e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e023      	b.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3361      	adds	r3, #97	; 0x61
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b07      	cmp	r3, #7
 8002a46:	d119      	bne.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	335c      	adds	r3, #92	; 0x5c
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	202c      	movs	r0, #44	; 0x2c
 8002a60:	fb00 f303 	mul.w	r3, r0, r3
 8002a64:	440b      	add	r3, r1
 8002a66:	335c      	adds	r3, #92	; 0x5c
 8002a68:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3360      	adds	r3, #96	; 0x60
 8002a78:	2204      	movs	r2, #4
 8002a7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	b2d9      	uxtb	r1, r3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	202c      	movs	r0, #44	; 0x2c
 8002a98:	fb00 f303 	mul.w	r3, r0, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3360      	adds	r3, #96	; 0x60
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f005 ffad 	bl	8008a04 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aaa:	e061      	b.n	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d156      	bne.n	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	333f      	adds	r3, #63	; 0x3f
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d111      	bne.n	8002afa <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	335c      	adds	r3, #92	; 0x5c
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 fce3 	bl	80064be <USB_HC_Halt>
 8002af8:	e031      	b.n	8002b5e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	333f      	adds	r3, #63	; 0x3f
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	333f      	adds	r3, #63	; 0x3f
 8002b1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d11d      	bne.n	8002b5e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	335c      	adds	r3, #92	; 0x5c
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d110      	bne.n	8002b5e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3361      	adds	r3, #97	; 0x61
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 fcb0 	bl	80064be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	6093      	str	r3, [r2, #8]
}
 8002b70:	bf00      	nop
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d11a      	bne.n	8002bde <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3361      	adds	r3, #97	; 0x61
 8002bc8:	2206      	movs	r2, #6
 8002bca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f003 fc71 	bl	80064be <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002bdc:	e331      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d12e      	bne.n	8002c52 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	461a      	mov	r2, r3
 8002c02:	2320      	movs	r3, #32
 8002c04:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	333d      	adds	r3, #61	; 0x3d
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	f040 8313 	bne.w	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	333d      	adds	r3, #61	; 0x3d
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3360      	adds	r3, #96	; 0x60
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fc37 	bl	80064be <USB_HC_Halt>
}
 8002c50:	e2f7      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c68:	d112      	bne.n	8002c90 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c76:	461a      	mov	r2, r3
 8002c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c7c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 fc18 	bl	80064be <USB_HC_Halt>
}
 8002c8e:	e2d8      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d140      	bne.n	8002d28 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	335c      	adds	r3, #92	; 0x5c
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d111      	bne.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	333d      	adds	r3, #61	; 0x3d
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cec:	461a      	mov	r2, r3
 8002cee:	2340      	movs	r3, #64	; 0x40
 8002cf0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2301      	movs	r3, #1
 8002d02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	; 0x61
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 fbcc 	bl	80064be <USB_HC_Halt>
}
 8002d26:	e28c      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d12c      	bne.n	8002d98 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3361      	adds	r3, #97	; 0x61
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	333d      	adds	r3, #61	; 0x3d
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	335c      	adds	r3, #92	; 0x5c
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 fb9d 	bl	80064be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	461a      	mov	r2, r3
 8002d92:	2340      	movs	r3, #64	; 0x40
 8002d94:	6093      	str	r3, [r2, #8]
}
 8002d96:	e254      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d11a      	bne.n	8002de4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	3361      	adds	r3, #97	; 0x61
 8002dce:	2205      	movs	r2, #5
 8002dd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 fb6e 	bl	80064be <USB_HC_Halt>
}
 8002de2:	e22e      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b10      	cmp	r3, #16
 8002df8:	d140      	bne.n	8002e7c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	335c      	adds	r3, #92	; 0x5c
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3361      	adds	r3, #97	; 0x61
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	333d      	adds	r3, #61	; 0x3d
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d112      	bne.n	8002e58 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	333c      	adds	r3, #60	; 0x3c
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	333d      	adds	r3, #61	; 0x3d
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 fb2b 	bl	80064be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e74:	461a      	mov	r2, r3
 8002e76:	2310      	movs	r3, #16
 8002e78:	6093      	str	r3, [r2, #8]
}
 8002e7a:	e1e2      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	2b80      	cmp	r3, #128	; 0x80
 8002e90:	d164      	bne.n	8002f5c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d111      	bne.n	8002ebe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3361      	adds	r3, #97	; 0x61
 8002ea8:	2206      	movs	r2, #6
 8002eaa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 fb01 	bl	80064be <USB_HC_Halt>
 8002ebc:	e044      	b.n	8002f48 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	335c      	adds	r3, #92	; 0x5c
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	202c      	movs	r0, #44	; 0x2c
 8002ed6:	fb00 f303 	mul.w	r3, r0, r3
 8002eda:	440b      	add	r3, r1
 8002edc:	335c      	adds	r3, #92	; 0x5c
 8002ede:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	335c      	adds	r3, #92	; 0x5c
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d920      	bls.n	8002f36 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	335c      	adds	r3, #92	; 0x5c
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3360      	adds	r3, #96	; 0x60
 8002f14:	2204      	movs	r2, #4
 8002f16:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	b2d9      	uxtb	r1, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	202c      	movs	r0, #44	; 0x2c
 8002f22:	fb00 f303 	mul.w	r3, r0, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3360      	adds	r3, #96	; 0x60
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f005 fd68 	bl	8008a04 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f34:	e008      	b.n	8002f48 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	3360      	adds	r3, #96	; 0x60
 8002f44:	2202      	movs	r2, #2
 8002f46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	6093      	str	r3, [r2, #8]
}
 8002f5a:	e172      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f72:	d11b      	bne.n	8002fac <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3361      	adds	r3, #97	; 0x61
 8002f82:	2208      	movs	r2, #8
 8002f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 fa94 	bl	80064be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa8:	6093      	str	r3, [r2, #8]
}
 8002faa:	e14a      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	f040 813f 	bne.w	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3361      	adds	r3, #97	; 0x61
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d17d      	bne.n	80030d4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3360      	adds	r3, #96	; 0x60
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	333f      	adds	r3, #63	; 0x3f
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d00a      	beq.n	8003014 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	333f      	adds	r3, #63	; 0x3f
 800300c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800300e:	2b03      	cmp	r3, #3
 8003010:	f040 8100 	bne.w	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d113      	bne.n	8003044 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	3355      	adds	r3, #85	; 0x55
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	f083 0301 	eor.w	r3, r3, #1
 8003030:	b2d8      	uxtb	r0, r3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3355      	adds	r3, #85	; 0x55
 8003040:	4602      	mov	r2, r0
 8003042:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b01      	cmp	r3, #1
 800304a:	f040 80e3 	bne.w	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	334c      	adds	r3, #76	; 0x4c
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80d8 	beq.w	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	334c      	adds	r3, #76	; 0x4c
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	202c      	movs	r0, #44	; 0x2c
 800307a:	fb00 f202 	mul.w	r2, r0, r2
 800307e:	440a      	add	r2, r1
 8003080:	3240      	adds	r2, #64	; 0x40
 8003082:	8812      	ldrh	r2, [r2, #0]
 8003084:	4413      	add	r3, r2
 8003086:	3b01      	subs	r3, #1
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	202c      	movs	r0, #44	; 0x2c
 800308e:	fb00 f202 	mul.w	r2, r0, r2
 8003092:	440a      	add	r2, r1
 8003094:	3240      	adds	r2, #64	; 0x40
 8003096:	8812      	ldrh	r2, [r2, #0]
 8003098:	fbb3 f3f2 	udiv	r3, r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80b5 	beq.w	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	3355      	adds	r3, #85	; 0x55
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	f083 0301 	eor.w	r3, r3, #1
 80030be:	b2d8      	uxtb	r0, r3
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	212c      	movs	r1, #44	; 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	3355      	adds	r3, #85	; 0x55
 80030ce:	4602      	mov	r2, r0
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e09f      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	212c      	movs	r1, #44	; 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	3361      	adds	r3, #97	; 0x61
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d109      	bne.n	80030fc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	3360      	adds	r3, #96	; 0x60
 80030f6:	2202      	movs	r2, #2
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e08b      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	212c      	movs	r1, #44	; 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	3361      	adds	r3, #97	; 0x61
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d109      	bne.n	8003124 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	3360      	adds	r3, #96	; 0x60
 800311e:	2202      	movs	r2, #2
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e077      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	212c      	movs	r1, #44	; 0x2c
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3361      	adds	r3, #97	; 0x61
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b05      	cmp	r3, #5
 8003136:	d109      	bne.n	800314c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3360      	adds	r3, #96	; 0x60
 8003146:	2205      	movs	r2, #5
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e063      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3361      	adds	r3, #97	; 0x61
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b06      	cmp	r3, #6
 800315e:	d009      	beq.n	8003174 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	212c      	movs	r1, #44	; 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	3361      	adds	r3, #97	; 0x61
 800316e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003170:	2b08      	cmp	r3, #8
 8003172:	d14f      	bne.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	335c      	adds	r3, #92	; 0x5c
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	202c      	movs	r0, #44	; 0x2c
 800318c:	fb00 f303 	mul.w	r3, r0, r3
 8003190:	440b      	add	r3, r1
 8003192:	335c      	adds	r3, #92	; 0x5c
 8003194:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	335c      	adds	r3, #92	; 0x5c
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d912      	bls.n	80031d0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	212c      	movs	r1, #44	; 0x2c
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	335c      	adds	r3, #92	; 0x5c
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	212c      	movs	r1, #44	; 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	3360      	adds	r3, #96	; 0x60
 80031ca:	2204      	movs	r2, #4
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e021      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3360      	adds	r3, #96	; 0x60
 80031de:	2202      	movs	r2, #2
 80031e0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031f8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003200:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320e:	461a      	mov	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	461a      	mov	r2, r3
 8003222:	2302      	movs	r3, #2
 8003224:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	b2d9      	uxtb	r1, r3
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	202c      	movs	r0, #44	; 0x2c
 8003230:	fb00 f303 	mul.w	r3, r0, r3
 8003234:	4413      	add	r3, r2
 8003236:	3360      	adds	r3, #96	; 0x60
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f005 fbe1 	bl	8008a04 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003242:	bf00      	nop
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b08a      	sub	sp, #40	; 0x28
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	0c5b      	lsrs	r3, r3, #17
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800327e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d004      	beq.n	8003290 <HCD_RXQLVL_IRQHandler+0x46>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b05      	cmp	r3, #5
 800328a:	f000 80a9 	beq.w	80033e0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800328e:	e0aa      	b.n	80033e6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80a6 	beq.w	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3344      	adds	r3, #68	; 0x44
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 809b 	beq.w	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3350      	adds	r3, #80	; 0x50
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	441a      	add	r2, r3
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	202c      	movs	r0, #44	; 0x2c
 80032c8:	fb00 f303 	mul.w	r3, r0, r3
 80032cc:	440b      	add	r3, r1
 80032ce:	334c      	adds	r3, #76	; 0x4c
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d87a      	bhi.n	80033cc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	212c      	movs	r1, #44	; 0x2c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	3344      	adds	r3, #68	; 0x44
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	b292      	uxth	r2, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f002 fc3c 	bl	8005b6c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3344      	adds	r3, #68	; 0x44
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	441a      	add	r2, r3
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	202c      	movs	r0, #44	; 0x2c
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	440b      	add	r3, r1
 8003314:	3344      	adds	r3, #68	; 0x44
 8003316:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3350      	adds	r3, #80	; 0x50
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	441a      	add	r2, r3
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	202c      	movs	r0, #44	; 0x2c
 8003332:	fb00 f303 	mul.w	r3, r0, r3
 8003336:	440b      	add	r3, r1
 8003338:	3350      	adds	r3, #80	; 0x50
 800333a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	0cdb      	lsrs	r3, r3, #19
 800334c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003350:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	3340      	adds	r3, #64	; 0x40
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4293      	cmp	r3, r2
 8003368:	d13c      	bne.n	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d039      	beq.n	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003386:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800338e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339c:	461a      	mov	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3354      	adds	r3, #84	; 0x54
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	f083 0301 	eor.w	r3, r3, #1
 80033b6:	b2d8      	uxtb	r0, r3
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	3354      	adds	r3, #84	; 0x54
 80033c6:	4602      	mov	r2, r0
 80033c8:	701a      	strb	r2, [r3, #0]
      break;
 80033ca:	e00b      	b.n	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3360      	adds	r3, #96	; 0x60
 80033da:	2204      	movs	r2, #4
 80033dc:	701a      	strb	r2, [r3, #0]
      break;
 80033de:	e001      	b.n	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80033e0:	bf00      	nop
 80033e2:	e000      	b.n	80033e6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80033e4:	bf00      	nop
  }
}
 80033e6:	bf00      	nop
 80033e8:	3728      	adds	r7, #40	; 0x28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800341a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d10b      	bne.n	800343e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d102      	bne.n	8003436 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f005 facb 	bl	80089cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b08      	cmp	r3, #8
 8003446:	d132      	bne.n	80034ae <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f043 0308 	orr.w	r3, r3, #8
 800344e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b04      	cmp	r3, #4
 8003458:	d126      	bne.n	80034a8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d113      	bne.n	800348a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003468:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800346c:	d106      	bne.n	800347c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2102      	movs	r1, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f002 fce7 	bl	8005e48 <USB_InitFSLSPClkSel>
 800347a:	e011      	b.n	80034a0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	4618      	mov	r0, r3
 8003484:	f002 fce0 	bl	8005e48 <USB_InitFSLSPClkSel>
 8003488:	e00a      	b.n	80034a0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d106      	bne.n	80034a0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003498:	461a      	mov	r2, r3
 800349a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800349e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f005 fabd 	bl	8008a20 <HAL_HCD_PortEnabled_Callback>
 80034a6:	e002      	b.n	80034ae <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f005 fac7 	bl	8008a3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d103      	bne.n	80034c0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f043 0320 	orr.w	r3, r3, #32
 80034be:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	bf00      	nop
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e12b      	b.n	800373e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd f978 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2224      	movs	r2, #36	; 0x24
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003538:	f001 fa20 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 800353c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4a81      	ldr	r2, [pc, #516]	; (8003748 <HAL_I2C_Init+0x274>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d807      	bhi.n	8003558 <HAL_I2C_Init+0x84>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4a80      	ldr	r2, [pc, #512]	; (800374c <HAL_I2C_Init+0x278>)
 800354c:	4293      	cmp	r3, r2
 800354e:	bf94      	ite	ls
 8003550:	2301      	movls	r3, #1
 8003552:	2300      	movhi	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e006      	b.n	8003566 <HAL_I2C_Init+0x92>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a7d      	ldr	r2, [pc, #500]	; (8003750 <HAL_I2C_Init+0x27c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	bf94      	ite	ls
 8003560:	2301      	movls	r3, #1
 8003562:	2300      	movhi	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0e7      	b.n	800373e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a78      	ldr	r2, [pc, #480]	; (8003754 <HAL_I2C_Init+0x280>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0c9b      	lsrs	r3, r3, #18
 8003578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a6a      	ldr	r2, [pc, #424]	; (8003748 <HAL_I2C_Init+0x274>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d802      	bhi.n	80035a8 <HAL_I2C_Init+0xd4>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3301      	adds	r3, #1
 80035a6:	e009      	b.n	80035bc <HAL_I2C_Init+0xe8>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	4a69      	ldr	r2, [pc, #420]	; (8003758 <HAL_I2C_Init+0x284>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	3301      	adds	r3, #1
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	495c      	ldr	r1, [pc, #368]	; (8003748 <HAL_I2C_Init+0x274>)
 80035d8:	428b      	cmp	r3, r1
 80035da:	d819      	bhi.n	8003610 <HAL_I2C_Init+0x13c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e59      	subs	r1, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ea:	1c59      	adds	r1, r3, #1
 80035ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035f0:	400b      	ands	r3, r1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_I2C_Init+0x138>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1e59      	subs	r1, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fbb1 f3f3 	udiv	r3, r1, r3
 8003604:	3301      	adds	r3, #1
 8003606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360a:	e051      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 800360c:	2304      	movs	r3, #4
 800360e:	e04f      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d111      	bne.n	800363c <HAL_I2C_Init+0x168>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1e58      	subs	r0, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	440b      	add	r3, r1
 8003626:	fbb0 f3f3 	udiv	r3, r0, r3
 800362a:	3301      	adds	r3, #1
 800362c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e012      	b.n	8003662 <HAL_I2C_Init+0x18e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1e58      	subs	r0, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	0099      	lsls	r1, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003652:	3301      	adds	r3, #1
 8003654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_Init+0x196>
 8003666:	2301      	movs	r3, #1
 8003668:	e022      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10e      	bne.n	8003690 <HAL_I2C_Init+0x1bc>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1e58      	subs	r0, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6859      	ldr	r1, [r3, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	440b      	add	r3, r1
 8003680:	fbb0 f3f3 	udiv	r3, r0, r3
 8003684:	3301      	adds	r3, #1
 8003686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368e:	e00f      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e58      	subs	r0, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	0099      	lsls	r1, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	6809      	ldr	r1, [r1, #0]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6911      	ldr	r1, [r2, #16]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68d2      	ldr	r2, [r2, #12]
 80036ea:	4311      	orrs	r1, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	430b      	orrs	r3, r1
 80036f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	000186a0 	.word	0x000186a0
 800374c:	001e847f 	.word	0x001e847f
 8003750:	003d08ff 	.word	0x003d08ff
 8003754:	431bde83 	.word	0x431bde83
 8003758:	10624dd3 	.word	0x10624dd3

0800375c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e128      	b.n	80039c0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a90      	ldr	r2, [pc, #576]	; (80039c8 <HAL_I2S_Init+0x26c>)
 8003786:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7fd f8a9 	bl	80008e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037a4:	f023 030f 	bic.w	r3, r3, #15
 80037a8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2202      	movs	r2, #2
 80037b0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d060      	beq.n	800387c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037c2:	2310      	movs	r3, #16
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e001      	b.n	80037cc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80037c8:	2320      	movs	r3, #32
 80037ca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d802      	bhi.n	80037da <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037da:	2001      	movs	r0, #1
 80037dc:	f001 f9c4 	bl	8004b68 <HAL_RCCEx_GetPeriphCLKFreq>
 80037e0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ea:	d125      	bne.n	8003838 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d010      	beq.n	8003816 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	3305      	adds	r3, #5
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	e01f      	b.n	8003856 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	461a      	mov	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	3305      	adds	r3, #5
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	e00e      	b.n	8003856 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	461a      	mov	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003852:	3305      	adds	r3, #5
 8003854:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4a5c      	ldr	r2, [pc, #368]	; (80039cc <HAL_I2S_Init+0x270>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	08db      	lsrs	r3, r3, #3
 8003860:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	e003      	b.n	8003884 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800387c:	2302      	movs	r3, #2
 800387e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d902      	bls.n	8003890 <HAL_I2S_Init+0x134>
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	2bff      	cmp	r3, #255	; 0xff
 800388e:	d907      	bls.n	80038a0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003894:	f043 0210 	orr.w	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e08f      	b.n	80039c0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	ea42 0103 	orr.w	r1, r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038be:	f023 030f 	bic.w	r3, r3, #15
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6851      	ldr	r1, [r2, #4]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6892      	ldr	r2, [r2, #8]
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68d2      	ldr	r2, [r2, #12]
 80038d0:	4311      	orrs	r1, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6992      	ldr	r2, [r2, #24]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d161      	bne.n	80039b0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a38      	ldr	r2, [pc, #224]	; (80039d0 <HAL_I2S_Init+0x274>)
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a37      	ldr	r2, [pc, #220]	; (80039d4 <HAL_I2S_Init+0x278>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <HAL_I2S_Init+0x1a4>
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_I2S_Init+0x27c>)
 80038fe:	e001      	b.n	8003904 <HAL_I2S_Init+0x1a8>
 8003900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	4932      	ldr	r1, [pc, #200]	; (80039d4 <HAL_I2S_Init+0x278>)
 800390c:	428a      	cmp	r2, r1
 800390e:	d101      	bne.n	8003914 <HAL_I2S_Init+0x1b8>
 8003910:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <HAL_I2S_Init+0x27c>)
 8003912:	e001      	b.n	8003918 <HAL_I2S_Init+0x1bc>
 8003914:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003918:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800391c:	f023 030f 	bic.w	r3, r3, #15
 8003920:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <HAL_I2S_Init+0x278>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_I2S_Init+0x1d4>
 800392c:	4b2a      	ldr	r3, [pc, #168]	; (80039d8 <HAL_I2S_Init+0x27c>)
 800392e:	e001      	b.n	8003934 <HAL_I2S_Init+0x1d8>
 8003930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003934:	2202      	movs	r2, #2
 8003936:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a25      	ldr	r2, [pc, #148]	; (80039d4 <HAL_I2S_Init+0x278>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d101      	bne.n	8003946 <HAL_I2S_Init+0x1ea>
 8003942:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <HAL_I2S_Init+0x27c>)
 8003944:	e001      	b.n	800394a <HAL_I2S_Init+0x1ee>
 8003946:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003956:	d003      	beq.n	8003960 <HAL_I2S_Init+0x204>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d103      	bne.n	8003968 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	e001      	b.n	800396c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003976:	4313      	orrs	r3, r2
 8003978:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003980:	4313      	orrs	r3, r2
 8003982:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800398a:	4313      	orrs	r3, r2
 800398c:	b29a      	uxth	r2, r3
 800398e:	897b      	ldrh	r3, [r7, #10]
 8003990:	4313      	orrs	r3, r2
 8003992:	b29b      	uxth	r3, r3
 8003994:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003998:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a0d      	ldr	r2, [pc, #52]	; (80039d4 <HAL_I2S_Init+0x278>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d101      	bne.n	80039a8 <HAL_I2S_Init+0x24c>
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_I2S_Init+0x27c>)
 80039a6:	e001      	b.n	80039ac <HAL_I2S_Init+0x250>
 80039a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ac:	897a      	ldrh	r2, [r7, #10]
 80039ae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	08003ad3 	.word	0x08003ad3
 80039cc:	cccccccd 	.word	0xcccccccd
 80039d0:	08003be9 	.word	0x08003be9
 80039d4:	40003800 	.word	0x40003800
 80039d8:	40003400 	.word	0x40003400

080039dc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	881a      	ldrh	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	1c9a      	adds	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10e      	bne.n	8003a6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ffb8 	bl	80039dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	b292      	uxth	r2, r2
 8003a88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	1c9a      	adds	r2, r3, #2
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10e      	bne.n	8003aca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff93 	bl	80039f0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d13a      	bne.n	8003b64 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d109      	bne.n	8003b0c <I2S_IRQHandler+0x3a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b40      	cmp	r3, #64	; 0x40
 8003b04:	d102      	bne.n	8003b0c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ffb4 	bl	8003a74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d126      	bne.n	8003b64 <I2S_IRQHandler+0x92>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d11f      	bne.n	8003b64 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f043 0202 	orr.w	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff ff50 	bl	8003a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d136      	bne.n	8003bde <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d109      	bne.n	8003b8e <I2S_IRQHandler+0xbc>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	2b80      	cmp	r3, #128	; 0x80
 8003b86:	d102      	bne.n	8003b8e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ff45 	bl	8003a18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d122      	bne.n	8003bde <I2S_IRQHandler+0x10c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d11b      	bne.n	8003bde <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bb4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f043 0204 	orr.w	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ff13 	bl	8003a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bde:	bf00      	nop
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a92      	ldr	r2, [pc, #584]	; (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c02:	4b92      	ldr	r3, [pc, #584]	; (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c04:	e001      	b.n	8003c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a8b      	ldr	r2, [pc, #556]	; (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d101      	bne.n	8003c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c20:	4b8a      	ldr	r3, [pc, #552]	; (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c22:	e001      	b.n	8003c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c34:	d004      	beq.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f040 8099 	bne.w	8003d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d107      	bne.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f925 	bl	8003ea4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9c8 	bl	8004004 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d13a      	bne.n	8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d035      	beq.n	8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a6e      	ldr	r2, [pc, #440]	; (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d101      	bne.n	8003c96 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c92:	4b6e      	ldr	r3, [pc, #440]	; (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c94:	e001      	b.n	8003c9a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4969      	ldr	r1, [pc, #420]	; (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ca2:	428b      	cmp	r3, r1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ca6:	4b69      	ldr	r3, [pc, #420]	; (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ca8:	e001      	b.n	8003cae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cb2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f043 0202 	orr.w	r2, r3, #2
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff fe88 	bl	8003a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	f040 80c3 	bne.w	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80bd 	beq.w	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a49      	ldr	r2, [pc, #292]	; (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d26:	4b49      	ldr	r3, [pc, #292]	; (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d28:	e001      	b.n	8003d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4944      	ldr	r1, [pc, #272]	; (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d36:	428b      	cmp	r3, r1
 8003d38:	d101      	bne.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d3a:	4b44      	ldr	r3, [pc, #272]	; (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d3c:	e001      	b.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d46:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff fe4a 	bl	8003a04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d70:	e089      	b.n	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d107      	bne.n	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8be 	bl	8003f08 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d107      	bne.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f8fd 	bl	8003fa0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d12f      	bne.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d02a      	beq.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dc8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1e      	ldr	r2, [pc, #120]	; (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dd6:	e001      	b.n	8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003dd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4919      	ldr	r1, [pc, #100]	; (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003de4:	428b      	cmp	r3, r1
 8003de6:	d101      	bne.n	8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dea:	e001      	b.n	8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003dec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003df4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	f043 0202 	orr.w	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fdfa 	bl	8003a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d136      	bne.n	8003e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d031      	beq.n	8003e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a07      	ldr	r2, [pc, #28]	; (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e30:	e001      	b.n	8003e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4902      	ldr	r1, [pc, #8]	; (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e3e:	428b      	cmp	r3, r1
 8003e40:	d106      	bne.n	8003e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003e42:	4b02      	ldr	r3, [pc, #8]	; (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e44:	e006      	b.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003e46:	bf00      	nop
 8003e48:	40003800 	.word	0x40003800
 8003e4c:	40003400 	.word	0x40003400
 8003e50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e58:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	f043 0204 	orr.w	r2, r3, #4
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fdc0 	bl	8003a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e84:	e000      	b.n	8003e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e86:	bf00      	nop
}
 8003e88:	bf00      	nop
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	1c99      	adds	r1, r3, #2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6251      	str	r1, [r2, #36]	; 0x24
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d113      	bne.n	8003efe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ee4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ffc9 	bl	8003e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c99      	adds	r1, r3, #2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6251      	str	r1, [r2, #36]	; 0x24
 8003f1a:	8819      	ldrh	r1, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <I2SEx_TxISR_I2SExt+0x90>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <I2SEx_TxISR_I2SExt+0x22>
 8003f26:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <I2SEx_TxISR_I2SExt+0x94>)
 8003f28:	e001      	b.n	8003f2e <I2SEx_TxISR_I2SExt+0x26>
 8003f2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f2e:	460a      	mov	r2, r1
 8003f30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d121      	bne.n	8003f8e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <I2SEx_TxISR_I2SExt+0x90>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d101      	bne.n	8003f58 <I2SEx_TxISR_I2SExt+0x50>
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <I2SEx_TxISR_I2SExt+0x94>)
 8003f56:	e001      	b.n	8003f5c <I2SEx_TxISR_I2SExt+0x54>
 8003f58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	490d      	ldr	r1, [pc, #52]	; (8003f98 <I2SEx_TxISR_I2SExt+0x90>)
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d101      	bne.n	8003f6c <I2SEx_TxISR_I2SExt+0x64>
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <I2SEx_TxISR_I2SExt+0x94>)
 8003f6a:	e001      	b.n	8003f70 <I2SEx_TxISR_I2SExt+0x68>
 8003f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff81 	bl	8003e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40003800 	.word	0x40003800
 8003f9c:	40003400 	.word	0x40003400

08003fa0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68d8      	ldr	r0, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	1c99      	adds	r1, r3, #2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fb8:	b282      	uxth	r2, r0
 8003fba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d113      	bne.n	8003ffc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fe2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ff4a 	bl	8003e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a20      	ldr	r2, [pc, #128]	; (8004094 <I2SEx_RxISR_I2SExt+0x90>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <I2SEx_RxISR_I2SExt+0x16>
 8004016:	4b20      	ldr	r3, [pc, #128]	; (8004098 <I2SEx_RxISR_I2SExt+0x94>)
 8004018:	e001      	b.n	800401e <I2SEx_RxISR_I2SExt+0x1a>
 800401a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800401e:	68d8      	ldr	r0, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	1c99      	adds	r1, r3, #2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	62d1      	str	r1, [r2, #44]	; 0x2c
 800402a:	b282      	uxth	r2, r0
 800402c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d121      	bne.n	800408a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a12      	ldr	r2, [pc, #72]	; (8004094 <I2SEx_RxISR_I2SExt+0x90>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d101      	bne.n	8004054 <I2SEx_RxISR_I2SExt+0x50>
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <I2SEx_RxISR_I2SExt+0x94>)
 8004052:	e001      	b.n	8004058 <I2SEx_RxISR_I2SExt+0x54>
 8004054:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	490d      	ldr	r1, [pc, #52]	; (8004094 <I2SEx_RxISR_I2SExt+0x90>)
 8004060:	428b      	cmp	r3, r1
 8004062:	d101      	bne.n	8004068 <I2SEx_RxISR_I2SExt+0x64>
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <I2SEx_RxISR_I2SExt+0x94>)
 8004066:	e001      	b.n	800406c <I2SEx_RxISR_I2SExt+0x68>
 8004068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004070:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ff03 	bl	8003e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40003800 	.word	0x40003800
 8004098:	40003400 	.word	0x40003400

0800409c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e267      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d075      	beq.n	80041a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ba:	4b88      	ldr	r3, [pc, #544]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d00c      	beq.n	80040e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c6:	4b85      	ldr	r3, [pc, #532]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d112      	bne.n	80040f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d2:	4b82      	ldr	r3, [pc, #520]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040de:	d10b      	bne.n	80040f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e0:	4b7e      	ldr	r3, [pc, #504]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05b      	beq.n	80041a4 <HAL_RCC_OscConfig+0x108>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d157      	bne.n	80041a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e242      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	d106      	bne.n	8004110 <HAL_RCC_OscConfig+0x74>
 8004102:	4b76      	ldr	r3, [pc, #472]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a75      	ldr	r2, [pc, #468]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e01d      	b.n	800414c <HAL_RCC_OscConfig+0xb0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x98>
 800411a:	4b70      	ldr	r3, [pc, #448]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6f      	ldr	r2, [pc, #444]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 8004120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	4b6d      	ldr	r3, [pc, #436]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a6c      	ldr	r2, [pc, #432]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e00b      	b.n	800414c <HAL_RCC_OscConfig+0xb0>
 8004134:	4b69      	ldr	r3, [pc, #420]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a68      	ldr	r2, [pc, #416]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 800413a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b66      	ldr	r3, [pc, #408]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a65      	ldr	r2, [pc, #404]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 8004146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d013      	beq.n	800417c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd fa8c 	bl	8001670 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800415c:	f7fd fa88 	bl	8001670 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	; 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e207      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b5b      	ldr	r3, [pc, #364]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0xc0>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fd fa78 	bl	8001670 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004184:	f7fd fa74 	bl	8001670 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1f3      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	4b51      	ldr	r3, [pc, #324]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0xe8>
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d063      	beq.n	800427a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041b2:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d11c      	bne.n	8004204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ca:	4b44      	ldr	r3, [pc, #272]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d116      	bne.n	8004204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d6:	4b41      	ldr	r3, [pc, #260]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_RCC_OscConfig+0x152>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d001      	beq.n	80041ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e1c7      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4937      	ldr	r1, [pc, #220]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	e03a      	b.n	800427a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800420c:	4b34      	ldr	r3, [pc, #208]	; (80042e0 <HAL_RCC_OscConfig+0x244>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fd fa2d 	bl	8001670 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421a:	f7fd fa29 	bl	8001670 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e1a8      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422c:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004238:	4b28      	ldr	r3, [pc, #160]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4925      	ldr	r1, [pc, #148]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]
 800424c:	e015      	b.n	800427a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <HAL_RCC_OscConfig+0x244>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fd fa0c 	bl	8001670 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425c:	f7fd fa08 	bl	8001670 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e187      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d036      	beq.n	80042f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428e:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <HAL_RCC_OscConfig+0x248>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fd f9ec 	bl	8001670 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429c:	f7fd f9e8 	bl	8001670 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e167      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_OscConfig+0x240>)
 80042b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x200>
 80042ba:	e01b      	b.n	80042f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <HAL_RCC_OscConfig+0x248>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c2:	f7fd f9d5 	bl	8001670 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c8:	e00e      	b.n	80042e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ca:	f7fd f9d1 	bl	8001670 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d907      	bls.n	80042e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e150      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
 80042dc:	40023800 	.word	0x40023800
 80042e0:	42470000 	.word	0x42470000
 80042e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e8:	4b88      	ldr	r3, [pc, #544]	; (800450c <HAL_RCC_OscConfig+0x470>)
 80042ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ea      	bne.n	80042ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8097 	beq.w	8004430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004302:	2300      	movs	r3, #0
 8004304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004306:	4b81      	ldr	r3, [pc, #516]	; (800450c <HAL_RCC_OscConfig+0x470>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10f      	bne.n	8004332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	4b7d      	ldr	r3, [pc, #500]	; (800450c <HAL_RCC_OscConfig+0x470>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	4a7c      	ldr	r2, [pc, #496]	; (800450c <HAL_RCC_OscConfig+0x470>)
 800431c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004320:	6413      	str	r3, [r2, #64]	; 0x40
 8004322:	4b7a      	ldr	r3, [pc, #488]	; (800450c <HAL_RCC_OscConfig+0x470>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800432e:	2301      	movs	r3, #1
 8004330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004332:	4b77      	ldr	r3, [pc, #476]	; (8004510 <HAL_RCC_OscConfig+0x474>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d118      	bne.n	8004370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800433e:	4b74      	ldr	r3, [pc, #464]	; (8004510 <HAL_RCC_OscConfig+0x474>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a73      	ldr	r2, [pc, #460]	; (8004510 <HAL_RCC_OscConfig+0x474>)
 8004344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434a:	f7fd f991 	bl	8001670 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004352:	f7fd f98d 	bl	8001670 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e10c      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004364:	4b6a      	ldr	r3, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x474>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x2ea>
 8004378:	4b64      	ldr	r3, [pc, #400]	; (800450c <HAL_RCC_OscConfig+0x470>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	4a63      	ldr	r2, [pc, #396]	; (800450c <HAL_RCC_OscConfig+0x470>)
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	6713      	str	r3, [r2, #112]	; 0x70
 8004384:	e01c      	b.n	80043c0 <HAL_RCC_OscConfig+0x324>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b05      	cmp	r3, #5
 800438c:	d10c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x30c>
 800438e:	4b5f      	ldr	r3, [pc, #380]	; (800450c <HAL_RCC_OscConfig+0x470>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	4a5e      	ldr	r2, [pc, #376]	; (800450c <HAL_RCC_OscConfig+0x470>)
 8004394:	f043 0304 	orr.w	r3, r3, #4
 8004398:	6713      	str	r3, [r2, #112]	; 0x70
 800439a:	4b5c      	ldr	r3, [pc, #368]	; (800450c <HAL_RCC_OscConfig+0x470>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	4a5b      	ldr	r2, [pc, #364]	; (800450c <HAL_RCC_OscConfig+0x470>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70
 80043a6:	e00b      	b.n	80043c0 <HAL_RCC_OscConfig+0x324>
 80043a8:	4b58      	ldr	r3, [pc, #352]	; (800450c <HAL_RCC_OscConfig+0x470>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	4a57      	ldr	r2, [pc, #348]	; (800450c <HAL_RCC_OscConfig+0x470>)
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	6713      	str	r3, [r2, #112]	; 0x70
 80043b4:	4b55      	ldr	r3, [pc, #340]	; (800450c <HAL_RCC_OscConfig+0x470>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	4a54      	ldr	r2, [pc, #336]	; (800450c <HAL_RCC_OscConfig+0x470>)
 80043ba:	f023 0304 	bic.w	r3, r3, #4
 80043be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d015      	beq.n	80043f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fd f952 	bl	8001670 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fd f94e 	bl	8001670 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e0cb      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e6:	4b49      	ldr	r3, [pc, #292]	; (800450c <HAL_RCC_OscConfig+0x470>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0ee      	beq.n	80043d0 <HAL_RCC_OscConfig+0x334>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f4:	f7fd f93c 	bl	8001670 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fd f938 	bl	8001670 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	; 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e0b5      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004412:	4b3e      	ldr	r3, [pc, #248]	; (800450c <HAL_RCC_OscConfig+0x470>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1ee      	bne.n	80043fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d105      	bne.n	8004430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004424:	4b39      	ldr	r3, [pc, #228]	; (800450c <HAL_RCC_OscConfig+0x470>)
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	4a38      	ldr	r2, [pc, #224]	; (800450c <HAL_RCC_OscConfig+0x470>)
 800442a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80a1 	beq.w	800457c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800443a:	4b34      	ldr	r3, [pc, #208]	; (800450c <HAL_RCC_OscConfig+0x470>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b08      	cmp	r3, #8
 8004444:	d05c      	beq.n	8004500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d141      	bne.n	80044d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444e:	4b31      	ldr	r3, [pc, #196]	; (8004514 <HAL_RCC_OscConfig+0x478>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fd f90c 	bl	8001670 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445c:	f7fd f908 	bl	8001670 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e087      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	4b27      	ldr	r3, [pc, #156]	; (800450c <HAL_RCC_OscConfig+0x470>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69da      	ldr	r2, [r3, #28]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	019b      	lsls	r3, r3, #6
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	3b01      	subs	r3, #1
 8004494:	041b      	lsls	r3, r3, #16
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	491b      	ldr	r1, [pc, #108]	; (800450c <HAL_RCC_OscConfig+0x470>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <HAL_RCC_OscConfig+0x478>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fd f8e1 	bl	8001670 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b2:	f7fd f8dd 	bl	8001670 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e05c      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c4:	4b11      	ldr	r3, [pc, #68]	; (800450c <HAL_RCC_OscConfig+0x470>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x416>
 80044d0:	e054      	b.n	800457c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d2:	4b10      	ldr	r3, [pc, #64]	; (8004514 <HAL_RCC_OscConfig+0x478>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fd f8ca 	bl	8001670 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fd f8c6 	bl	8001670 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e045      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <HAL_RCC_OscConfig+0x470>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x444>
 80044fe:	e03d      	b.n	800457c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e038      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
 800450c:	40023800 	.word	0x40023800
 8004510:	40007000 	.word	0x40007000
 8004514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004518:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_RCC_OscConfig+0x4ec>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d028      	beq.n	8004578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d121      	bne.n	8004578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d11a      	bne.n	8004578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004548:	4013      	ands	r3, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800454e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004550:	4293      	cmp	r3, r2
 8004552:	d111      	bne.n	8004578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	3b01      	subs	r3, #1
 8004562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d107      	bne.n	8004578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800

0800458c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0cc      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a0:	4b68      	ldr	r3, [pc, #416]	; (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d90c      	bls.n	80045c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b65      	ldr	r3, [pc, #404]	; (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b6:	4b63      	ldr	r3, [pc, #396]	; (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0b8      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d020      	beq.n	8004616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e0:	4b59      	ldr	r3, [pc, #356]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a58      	ldr	r2, [pc, #352]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045f8:	4b53      	ldr	r3, [pc, #332]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4a52      	ldr	r2, [pc, #328]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004604:	4b50      	ldr	r3, [pc, #320]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	494d      	ldr	r1, [pc, #308]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	4313      	orrs	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d044      	beq.n	80046ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d107      	bne.n	800463a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	4b47      	ldr	r3, [pc, #284]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d119      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e07f      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d003      	beq.n	800464a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004646:	2b03      	cmp	r3, #3
 8004648:	d107      	bne.n	800465a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464a:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e06f      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465a:	4b3b      	ldr	r3, [pc, #236]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e067      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800466a:	4b37      	ldr	r3, [pc, #220]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f023 0203 	bic.w	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	4934      	ldr	r1, [pc, #208]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	4313      	orrs	r3, r2
 800467a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800467c:	f7fc fff8 	bl	8001670 <HAL_GetTick>
 8004680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004682:	e00a      	b.n	800469a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004684:	f7fc fff4 	bl	8001670 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e04f      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469a:	4b2b      	ldr	r3, [pc, #172]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 020c 	and.w	r2, r3, #12
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d1eb      	bne.n	8004684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ac:	4b25      	ldr	r3, [pc, #148]	; (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d20c      	bcs.n	80046d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b22      	ldr	r3, [pc, #136]	; (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b20      	ldr	r3, [pc, #128]	; (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e032      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e0:	4b19      	ldr	r3, [pc, #100]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	4916      	ldr	r1, [pc, #88]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	490e      	ldr	r1, [pc, #56]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004712:	f000 f821 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 8004716:	4602      	mov	r2, r0
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	490a      	ldr	r1, [pc, #40]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 8004724:	5ccb      	ldrb	r3, [r1, r3]
 8004726:	fa22 f303 	lsr.w	r3, r2, r3
 800472a:	4a09      	ldr	r2, [pc, #36]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800472c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <HAL_RCC_ClockConfig+0x1c8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fc ff58 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40023c00 	.word	0x40023c00
 8004748:	40023800 	.word	0x40023800
 800474c:	080090dc 	.word	0x080090dc
 8004750:	20000174 	.word	0x20000174
 8004754:	20000178 	.word	0x20000178

08004758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800475c:	b094      	sub	sp, #80	; 0x50
 800475e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	647b      	str	r3, [r7, #68]	; 0x44
 8004764:	2300      	movs	r3, #0
 8004766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004768:	2300      	movs	r3, #0
 800476a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004770:	4b79      	ldr	r3, [pc, #484]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b08      	cmp	r3, #8
 800477a:	d00d      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x40>
 800477c:	2b08      	cmp	r3, #8
 800477e:	f200 80e1 	bhi.w	8004944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x34>
 8004786:	2b04      	cmp	r3, #4
 8004788:	d003      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x3a>
 800478a:	e0db      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800478c:	4b73      	ldr	r3, [pc, #460]	; (800495c <HAL_RCC_GetSysClockFreq+0x204>)
 800478e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004790:	e0db      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004792:	4b73      	ldr	r3, [pc, #460]	; (8004960 <HAL_RCC_GetSysClockFreq+0x208>)
 8004794:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004796:	e0d8      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004798:	4b6f      	ldr	r3, [pc, #444]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a2:	4b6d      	ldr	r3, [pc, #436]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d063      	beq.n	8004876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ae:	4b6a      	ldr	r3, [pc, #424]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	099b      	lsrs	r3, r3, #6
 80047b4:	2200      	movs	r2, #0
 80047b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80047b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c0:	633b      	str	r3, [r7, #48]	; 0x30
 80047c2:	2300      	movs	r3, #0
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
 80047c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047ca:	4622      	mov	r2, r4
 80047cc:	462b      	mov	r3, r5
 80047ce:	f04f 0000 	mov.w	r0, #0
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	0159      	lsls	r1, r3, #5
 80047d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047dc:	0150      	lsls	r0, r2, #5
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4621      	mov	r1, r4
 80047e4:	1a51      	subs	r1, r2, r1
 80047e6:	6139      	str	r1, [r7, #16]
 80047e8:	4629      	mov	r1, r5
 80047ea:	eb63 0301 	sbc.w	r3, r3, r1
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047fc:	4659      	mov	r1, fp
 80047fe:	018b      	lsls	r3, r1, #6
 8004800:	4651      	mov	r1, sl
 8004802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004806:	4651      	mov	r1, sl
 8004808:	018a      	lsls	r2, r1, #6
 800480a:	4651      	mov	r1, sl
 800480c:	ebb2 0801 	subs.w	r8, r2, r1
 8004810:	4659      	mov	r1, fp
 8004812:	eb63 0901 	sbc.w	r9, r3, r1
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800482a:	4690      	mov	r8, r2
 800482c:	4699      	mov	r9, r3
 800482e:	4623      	mov	r3, r4
 8004830:	eb18 0303 	adds.w	r3, r8, r3
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	462b      	mov	r3, r5
 8004838:	eb49 0303 	adc.w	r3, r9, r3
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800484a:	4629      	mov	r1, r5
 800484c:	024b      	lsls	r3, r1, #9
 800484e:	4621      	mov	r1, r4
 8004850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004854:	4621      	mov	r1, r4
 8004856:	024a      	lsls	r2, r1, #9
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800485e:	2200      	movs	r2, #0
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
 8004862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004868:	f7fb fcae 	bl	80001c8 <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4613      	mov	r3, r2
 8004872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004874:	e058      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004876:	4b38      	ldr	r3, [pc, #224]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	2200      	movs	r2, #0
 800487e:	4618      	mov	r0, r3
 8004880:	4611      	mov	r1, r2
 8004882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	2300      	movs	r3, #0
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
 800488c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	f04f 0000 	mov.w	r0, #0
 8004898:	f04f 0100 	mov.w	r1, #0
 800489c:	0159      	lsls	r1, r3, #5
 800489e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a2:	0150      	lsls	r0, r2, #5
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4641      	mov	r1, r8
 80048aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80048ae:	4649      	mov	r1, r9
 80048b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048c8:	ebb2 040a 	subs.w	r4, r2, sl
 80048cc:	eb63 050b 	sbc.w	r5, r3, fp
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	00eb      	lsls	r3, r5, #3
 80048da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048de:	00e2      	lsls	r2, r4, #3
 80048e0:	4614      	mov	r4, r2
 80048e2:	461d      	mov	r5, r3
 80048e4:	4643      	mov	r3, r8
 80048e6:	18e3      	adds	r3, r4, r3
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	464b      	mov	r3, r9
 80048ec:	eb45 0303 	adc.w	r3, r5, r3
 80048f0:	607b      	str	r3, [r7, #4]
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048fe:	4629      	mov	r1, r5
 8004900:	028b      	lsls	r3, r1, #10
 8004902:	4621      	mov	r1, r4
 8004904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004908:	4621      	mov	r1, r4
 800490a:	028a      	lsls	r2, r1, #10
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004912:	2200      	movs	r2, #0
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	61fa      	str	r2, [r7, #28]
 8004918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800491c:	f7fb fc54 	bl	80001c8 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4613      	mov	r3, r2
 8004926:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	3301      	adds	r3, #1
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800493a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004942:	e002      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCC_GetSysClockFreq+0x204>)
 8004946:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800494a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800494c:	4618      	mov	r0, r3
 800494e:	3750      	adds	r7, #80	; 0x50
 8004950:	46bd      	mov	sp, r7
 8004952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	00f42400 	.word	0x00f42400
 8004960:	007a1200 	.word	0x007a1200

08004964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <HAL_RCC_GetHCLKFreq+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000174 	.word	0x20000174

0800497c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004980:	f7ff fff0 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0a9b      	lsrs	r3, r3, #10
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4903      	ldr	r1, [pc, #12]	; (80049a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	080090ec 	.word	0x080090ec

080049a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d105      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d035      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049cc:	4b62      	ldr	r3, [pc, #392]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049d2:	f7fc fe4d 	bl	8001670 <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d8:	e008      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049da:	f7fc fe49 	bl	8001670 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e0b0      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049ec:	4b5b      	ldr	r3, [pc, #364]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f0      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	019a      	lsls	r2, r3, #6
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	071b      	lsls	r3, r3, #28
 8004a04:	4955      	ldr	r1, [pc, #340]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a0c:	4b52      	ldr	r3, [pc, #328]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a12:	f7fc fe2d 	bl	8001670 <HAL_GetTick>
 8004a16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a1a:	f7fc fe29 	bl	8001670 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e090      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a2c:	4b4b      	ldr	r3, [pc, #300]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8083 	beq.w	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	4b44      	ldr	r3, [pc, #272]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	4a43      	ldr	r2, [pc, #268]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a54:	6413      	str	r3, [r2, #64]	; 0x40
 8004a56:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a62:	4b3f      	ldr	r3, [pc, #252]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a3e      	ldr	r2, [pc, #248]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a6e:	f7fc fdff 	bl	8001670 <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a74:	e008      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a76:	f7fc fdfb 	bl	8001670 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e062      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a88:	4b35      	ldr	r3, [pc, #212]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0f0      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a94:	4b31      	ldr	r3, [pc, #196]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d02f      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d028      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004abc:	4b29      	ldr	r3, [pc, #164]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ac2:	4b28      	ldr	r3, [pc, #160]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ac8:	4a24      	ldr	r2, [pc, #144]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ace:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d114      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fc fdc9 	bl	8001670 <HAL_GetTick>
 8004ade:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae0:	e00a      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae2:	f7fc fdc5 	bl	8001670 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e02a      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af8:	4b18      	ldr	r3, [pc, #96]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0ee      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b10:	d10d      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b12:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b26:	490d      	ldr	r1, [pc, #52]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]
 8004b2c:	e005      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b38:	6093      	str	r3, [r2, #8]
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b46:	4905      	ldr	r1, [pc, #20]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	42470068 	.word	0x42470068
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40007000 	.word	0x40007000
 8004b64:	42470e40 	.word	0x42470e40

08004b68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d13e      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b86:	4b23      	ldr	r3, [pc, #140]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d12f      	bne.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b9c:	4b1e      	ldr	r3, [pc, #120]	; (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b9e:	617b      	str	r3, [r7, #20]
          break;
 8004ba0:	e02f      	b.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ba2:	4b1c      	ldr	r3, [pc, #112]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bae:	d108      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bb0:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb8:	4a18      	ldr	r2, [pc, #96]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	e007      	b.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bc2:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bca:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd8:	099b      	lsrs	r3, r3, #6
 8004bda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bec:	0f1b      	lsrs	r3, r3, #28
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	617b      	str	r3, [r7, #20]
          break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
          break;
 8004c00:	bf00      	nop
        }
      }
      break;
 8004c02:	bf00      	nop
    }
  }
  return frequency;
 8004c04:	697b      	ldr	r3, [r7, #20]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800
 8004c18:	00bb8000 	.word	0x00bb8000
 8004c1c:	007a1200 	.word	0x007a1200
 8004c20:	00f42400 	.word	0x00f42400

08004c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e07b      	b.n	8004d2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d108      	bne.n	8004c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c46:	d009      	beq.n	8004c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	61da      	str	r2, [r3, #28]
 8004c4e:	e005      	b.n	8004c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fc fa28 	bl	80010cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce0:	ea42 0103 	orr.w	r1, r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	0c1b      	lsrs	r3, r3, #16
 8004cfa:	f003 0104 	and.w	r1, r3, #4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0210 	and.w	r2, r3, #16
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e041      	b.n	8004dcc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7fc fbb1 	bl	80014c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2202      	movs	r2, #2
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3304      	adds	r3, #4
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f000 faa7 	bl	80052c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d001      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e04e      	b.n	8004e8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a23      	ldr	r2, [pc, #140]	; (8004e98 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d022      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e16:	d01d      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1f      	ldr	r2, [pc, #124]	; (8004e9c <HAL_TIM_Base_Start_IT+0xc8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d018      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d013      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1c      	ldr	r2, [pc, #112]	; (8004ea4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00e      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ea8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d009      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a19      	ldr	r2, [pc, #100]	; (8004eac <HAL_TIM_Base_Start_IT+0xd8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a18      	ldr	r2, [pc, #96]	; (8004eb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d111      	bne.n	8004e78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b06      	cmp	r3, #6
 8004e64:	d010      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e76:	e007      	b.n	8004e88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800
 8004ea4:	40000c00 	.word	0x40000c00
 8004ea8:	40010400 	.word	0x40010400
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40001800 	.word	0x40001800

08004eb4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6a1a      	ldr	r2, [r3, #32]
 8004ed2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10f      	bne.n	8004efc <HAL_TIM_Base_Stop_IT+0x48>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6a1a      	ldr	r2, [r3, #32]
 8004ee2:	f240 4344 	movw	r3, #1092	; 0x444
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d107      	bne.n	8004efc <HAL_TIM_Base_Stop_IT+0x48>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0201 	bic.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e041      	b.n	8004fa8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7fc fa9d 	bl	8001478 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f000 f9b9 	bl	80052c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d122      	bne.n	800500c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d11b      	bne.n	800500c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0202 	mvn.w	r2, #2
 8004fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f94a 	bl	800528c <HAL_TIM_IC_CaptureCallback>
 8004ff8:	e005      	b.n	8005006 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f93c 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f94d 	bl	80052a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b04      	cmp	r3, #4
 8005018:	d122      	bne.n	8005060 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b04      	cmp	r3, #4
 8005026:	d11b      	bne.n	8005060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f06f 0204 	mvn.w	r2, #4
 8005030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2202      	movs	r2, #2
 8005036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f920 	bl	800528c <HAL_TIM_IC_CaptureCallback>
 800504c:	e005      	b.n	800505a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f912 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f923 	bl	80052a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b08      	cmp	r3, #8
 800506c:	d122      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b08      	cmp	r3, #8
 800507a:	d11b      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0208 	mvn.w	r2, #8
 8005084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2204      	movs	r2, #4
 800508a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f8f6 	bl	800528c <HAL_TIM_IC_CaptureCallback>
 80050a0:	e005      	b.n	80050ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f8e8 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f8f9 	bl	80052a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d122      	bne.n	8005108 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d11b      	bne.n	8005108 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0210 	mvn.w	r2, #16
 80050d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2208      	movs	r2, #8
 80050de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f8cc 	bl	800528c <HAL_TIM_IC_CaptureCallback>
 80050f4:	e005      	b.n	8005102 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8be 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f8cf 	bl	80052a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d10e      	bne.n	8005134 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b01      	cmp	r3, #1
 8005122:	d107      	bne.n	8005134 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0201 	mvn.w	r2, #1
 800512c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fb ff56 	bl	8000fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d10e      	bne.n	8005160 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514c:	2b80      	cmp	r3, #128	; 0x80
 800514e:	d107      	bne.n	8005160 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fb8a 	bl	8005874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d10e      	bne.n	800518c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d107      	bne.n	800518c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f894 	bl	80052b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b20      	cmp	r3, #32
 8005198:	d10e      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d107      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0220 	mvn.w	r2, #32
 80051b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fb54 	bl	8005860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_TIM_OC_ConfigChannel+0x1e>
 80051da:	2302      	movs	r3, #2
 80051dc:	e048      	b.n	8005270 <HAL_TIM_OC_ConfigChannel+0xb0>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b0c      	cmp	r3, #12
 80051ea:	d839      	bhi.n	8005260 <HAL_TIM_OC_ConfigChannel+0xa0>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005229 	.word	0x08005229
 80051f8:	08005261 	.word	0x08005261
 80051fc:	08005261 	.word	0x08005261
 8005200:	08005261 	.word	0x08005261
 8005204:	08005237 	.word	0x08005237
 8005208:	08005261 	.word	0x08005261
 800520c:	08005261 	.word	0x08005261
 8005210:	08005261 	.word	0x08005261
 8005214:	08005245 	.word	0x08005245
 8005218:	08005261 	.word	0x08005261
 800521c:	08005261 	.word	0x08005261
 8005220:	08005261 	.word	0x08005261
 8005224:	08005253 	.word	0x08005253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f8ea 	bl	8005408 <TIM_OC1_SetConfig>
      break;
 8005234:	e017      	b.n	8005266 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f953 	bl	80054e8 <TIM_OC2_SetConfig>
      break;
 8005242:	e010      	b.n	8005266 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f9c2 	bl	80055d4 <TIM_OC3_SetConfig>
      break;
 8005250:	e009      	b.n	8005266 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fa2f 	bl	80056bc <TIM_OC4_SetConfig>
      break;
 800525e:	e002      	b.n	8005266 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	75fb      	strb	r3, [r7, #23]
      break;
 8005264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800526e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a40      	ldr	r2, [pc, #256]	; (80053dc <TIM_Base_SetConfig+0x114>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e6:	d00f      	beq.n	8005308 <TIM_Base_SetConfig+0x40>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a3d      	ldr	r2, [pc, #244]	; (80053e0 <TIM_Base_SetConfig+0x118>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00b      	beq.n	8005308 <TIM_Base_SetConfig+0x40>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a3c      	ldr	r2, [pc, #240]	; (80053e4 <TIM_Base_SetConfig+0x11c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d007      	beq.n	8005308 <TIM_Base_SetConfig+0x40>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a3b      	ldr	r2, [pc, #236]	; (80053e8 <TIM_Base_SetConfig+0x120>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_Base_SetConfig+0x40>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a3a      	ldr	r2, [pc, #232]	; (80053ec <TIM_Base_SetConfig+0x124>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d108      	bne.n	800531a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2f      	ldr	r2, [pc, #188]	; (80053dc <TIM_Base_SetConfig+0x114>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d02b      	beq.n	800537a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005328:	d027      	beq.n	800537a <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <TIM_Base_SetConfig+0x118>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d023      	beq.n	800537a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a2b      	ldr	r2, [pc, #172]	; (80053e4 <TIM_Base_SetConfig+0x11c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01f      	beq.n	800537a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a2a      	ldr	r2, [pc, #168]	; (80053e8 <TIM_Base_SetConfig+0x120>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01b      	beq.n	800537a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a29      	ldr	r2, [pc, #164]	; (80053ec <TIM_Base_SetConfig+0x124>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d017      	beq.n	800537a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a28      	ldr	r2, [pc, #160]	; (80053f0 <TIM_Base_SetConfig+0x128>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d013      	beq.n	800537a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a27      	ldr	r2, [pc, #156]	; (80053f4 <TIM_Base_SetConfig+0x12c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00f      	beq.n	800537a <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a26      	ldr	r2, [pc, #152]	; (80053f8 <TIM_Base_SetConfig+0x130>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00b      	beq.n	800537a <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a25      	ldr	r2, [pc, #148]	; (80053fc <TIM_Base_SetConfig+0x134>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d007      	beq.n	800537a <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a24      	ldr	r2, [pc, #144]	; (8005400 <TIM_Base_SetConfig+0x138>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a23      	ldr	r2, [pc, #140]	; (8005404 <TIM_Base_SetConfig+0x13c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d108      	bne.n	800538c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <TIM_Base_SetConfig+0x114>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_Base_SetConfig+0xf8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a0c      	ldr	r2, [pc, #48]	; (80053ec <TIM_Base_SetConfig+0x124>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d103      	bne.n	80053c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	615a      	str	r2, [r3, #20]
}
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800
 80053e8:	40000c00 	.word	0x40000c00
 80053ec:	40010400 	.word	0x40010400
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800
 80053fc:	40001800 	.word	0x40001800
 8005400:	40001c00 	.word	0x40001c00
 8005404:	40002000 	.word	0x40002000

08005408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f023 0201 	bic.w	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f023 0302 	bic.w	r3, r3, #2
 8005450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a20      	ldr	r2, [pc, #128]	; (80054e0 <TIM_OC1_SetConfig+0xd8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_OC1_SetConfig+0x64>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a1f      	ldr	r2, [pc, #124]	; (80054e4 <TIM_OC1_SetConfig+0xdc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d10c      	bne.n	8005486 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 0308 	bic.w	r3, r3, #8
 8005472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f023 0304 	bic.w	r3, r3, #4
 8005484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a15      	ldr	r2, [pc, #84]	; (80054e0 <TIM_OC1_SetConfig+0xd8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_OC1_SetConfig+0x8e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a14      	ldr	r2, [pc, #80]	; (80054e4 <TIM_OC1_SetConfig+0xdc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d111      	bne.n	80054ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800549c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40010400 	.word	0x40010400

080054e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f023 0210 	bic.w	r2, r3, #16
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f023 0320 	bic.w	r3, r3, #32
 8005532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a22      	ldr	r2, [pc, #136]	; (80055cc <TIM_OC2_SetConfig+0xe4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_OC2_SetConfig+0x68>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a21      	ldr	r2, [pc, #132]	; (80055d0 <TIM_OC2_SetConfig+0xe8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d10d      	bne.n	800556c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800556a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a17      	ldr	r2, [pc, #92]	; (80055cc <TIM_OC2_SetConfig+0xe4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_OC2_SetConfig+0x94>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a16      	ldr	r2, [pc, #88]	; (80055d0 <TIM_OC2_SetConfig+0xe8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d113      	bne.n	80055a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800558a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40010400 	.word	0x40010400

080055d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800561c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a21      	ldr	r2, [pc, #132]	; (80056b4 <TIM_OC3_SetConfig+0xe0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_OC3_SetConfig+0x66>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a20      	ldr	r2, [pc, #128]	; (80056b8 <TIM_OC3_SetConfig+0xe4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d10d      	bne.n	8005656 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <TIM_OC3_SetConfig+0xe0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_OC3_SetConfig+0x92>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <TIM_OC3_SetConfig+0xe4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d113      	bne.n	800568e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800566c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	621a      	str	r2, [r3, #32]
}
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40010400 	.word	0x40010400

080056bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	031b      	lsls	r3, r3, #12
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a12      	ldr	r2, [pc, #72]	; (8005760 <TIM_OC4_SetConfig+0xa4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC4_SetConfig+0x68>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a11      	ldr	r2, [pc, #68]	; (8005764 <TIM_OC4_SetConfig+0xa8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d109      	bne.n	8005738 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800572a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	019b      	lsls	r3, r3, #6
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40010000 	.word	0x40010000
 8005764:	40010400 	.word	0x40010400

08005768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800577c:	2302      	movs	r3, #2
 800577e:	e05a      	b.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a21      	ldr	r2, [pc, #132]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d022      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057cc:	d01d      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1d      	ldr	r2, [pc, #116]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d018      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1b      	ldr	r2, [pc, #108]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1a      	ldr	r2, [pc, #104]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a18      	ldr	r2, [pc, #96]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a15      	ldr	r2, [pc, #84]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10c      	bne.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	4313      	orrs	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40010000 	.word	0x40010000
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40010400 	.word	0x40010400
 8005858:	40014000 	.word	0x40014000
 800585c:	40001800 	.word	0x40001800

08005860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005888:	b084      	sub	sp, #16
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	f107 001c 	add.w	r0, r7, #28
 8005896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	2b01      	cmp	r3, #1
 800589e:	d122      	bne.n	80058e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d105      	bne.n	80058da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9c0 	bl	8005c60 <USB_CoreReset>
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]
 80058e4:	e01a      	b.n	800591c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f9b4 	bl	8005c60 <USB_CoreReset>
 80058f8:	4603      	mov	r3, r0
 80058fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	639a      	str	r2, [r3, #56]	; 0x38
 800590e:	e005      	b.n	800591c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	2b01      	cmp	r3, #1
 8005920:	d10b      	bne.n	800593a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f043 0206 	orr.w	r2, r3, #6
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f043 0220 	orr.w	r2, r3, #32
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800593a:	7bfb      	ldrb	r3, [r7, #15]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005946:	b004      	add	sp, #16
 8005948:	4770      	bx	lr

0800594a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f043 0201 	orr.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f023 0201 	bic.w	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d115      	bne.n	80059dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059bc:	2001      	movs	r0, #1
 80059be:	f7fb fe63 	bl	8001688 <HAL_Delay>
      ms++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3301      	adds	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f93a 	bl	8005c42 <USB_GetMode>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d01e      	beq.n	8005a12 <USB_SetCurrentMode+0x84>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b31      	cmp	r3, #49	; 0x31
 80059d8:	d9f0      	bls.n	80059bc <USB_SetCurrentMode+0x2e>
 80059da:	e01a      	b.n	8005a12 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d115      	bne.n	8005a0e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059ee:	2001      	movs	r0, #1
 80059f0:	f7fb fe4a 	bl	8001688 <HAL_Delay>
      ms++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3301      	adds	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f921 	bl	8005c42 <USB_GetMode>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <USB_SetCurrentMode+0x84>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b31      	cmp	r3, #49	; 0x31
 8005a0a:	d9f0      	bls.n	80059ee <USB_SetCurrentMode+0x60>
 8005a0c:	e001      	b.n	8005a12 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e005      	b.n	8005a1e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b32      	cmp	r3, #50	; 0x32
 8005a16:	d101      	bne.n	8005a1c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <USB_FlushTxFifo+0x64>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d901      	bls.n	8005a48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e01b      	b.n	8005a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	daf2      	bge.n	8005a36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	019b      	lsls	r3, r3, #6
 8005a58:	f043 0220 	orr.w	r2, r3, #32
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3301      	adds	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <USB_FlushTxFifo+0x64>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e006      	b.n	8005a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	d0f0      	beq.n	8005a60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	00030d40 	.word	0x00030d40

08005a90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4a11      	ldr	r2, [pc, #68]	; (8005aec <USB_FlushRxFifo+0x5c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e018      	b.n	8005ae0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	daf2      	bge.n	8005a9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2210      	movs	r2, #16
 8005abe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a08      	ldr	r2, [pc, #32]	; (8005aec <USB_FlushRxFifo+0x5c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e006      	b.n	8005ae0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0310 	and.w	r3, r3, #16
 8005ada:	2b10      	cmp	r3, #16
 8005adc:	d0f0      	beq.n	8005ac0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	00030d40 	.word	0x00030d40

08005af0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b089      	sub	sp, #36	; 0x24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	4611      	mov	r1, r2
 8005afc:	461a      	mov	r2, r3
 8005afe:	460b      	mov	r3, r1
 8005b00:	71fb      	strb	r3, [r7, #7]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d123      	bne.n	8005b5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b16:	88bb      	ldrh	r3, [r7, #4]
 8005b18:	3303      	adds	r3, #3
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e018      	b.n	8005b56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	031a      	lsls	r2, r3, #12
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b30:	461a      	mov	r2, r3
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3301      	adds	r3, #1
 8005b42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	3301      	adds	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	3301      	adds	r3, #1
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d3e2      	bcc.n	8005b24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3724      	adds	r7, #36	; 0x24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b08b      	sub	sp, #44	; 0x2c
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	4613      	mov	r3, r2
 8005b78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	089b      	lsrs	r3, r3, #2
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b92:	2300      	movs	r3, #0
 8005b94:	623b      	str	r3, [r7, #32]
 8005b96:	e014      	b.n	8005bc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	3301      	adds	r3, #1
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	3301      	adds	r3, #1
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	6a3a      	ldr	r2, [r7, #32]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d3e6      	bcc.n	8005b98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bca:	8bfb      	ldrh	r3, [r7, #30]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01e      	beq.n	8005c0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f107 0310 	add.w	r3, r7, #16
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	701a      	strb	r2, [r3, #0]
      i++;
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	3301      	adds	r3, #1
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c02:	8bfb      	ldrh	r3, [r7, #30]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c08:	8bfb      	ldrh	r3, [r7, #30]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1ea      	bne.n	8005be4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	372c      	adds	r7, #44	; 0x2c
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4013      	ands	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
	...

08005c60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <USB_CoreReset+0x64>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e01b      	b.n	8005cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	daf2      	bge.n	8005c6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f043 0201 	orr.w	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <USB_CoreReset+0x64>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d901      	bls.n	8005ca8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e006      	b.n	8005cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d0f0      	beq.n	8005c96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	00030d40 	.word	0x00030d40

08005cc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cc8:	b084      	sub	sp, #16
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b086      	sub	sp, #24
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2300      	movs	r3, #0
 8005cec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d10a      	bne.n	8005d3a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d32:	f043 0304 	orr.w	r3, r3, #4
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e014      	b.n	8005d64 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d48:	f023 0304 	bic.w	r3, r3, #4
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	e009      	b.n	8005d64 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d5e:	f023 0304 	bic.w	r3, r3, #4
 8005d62:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d64:	2110      	movs	r1, #16
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fe5e 	bl	8005a28 <USB_FlushTxFifo>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff fe8a 	bl	8005a90 <USB_FlushRxFifo>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d86:	2300      	movs	r3, #0
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e015      	b.n	8005db8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dac:	461a      	mov	r2, r3
 8005dae:	2300      	movs	r3, #0
 8005db0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	3301      	adds	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d3e5      	bcc.n	8005d8c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dcc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a13      	ldr	r2, [pc, #76]	; (8005e34 <USB_HostInit+0x16c>)
 8005de6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <USB_HostInit+0x170>)
 8005dec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005df0:	e009      	b.n	8005e06 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2280      	movs	r2, #128	; 0x80
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a10      	ldr	r2, [pc, #64]	; (8005e3c <USB_HostInit+0x174>)
 8005dfc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a0f      	ldr	r2, [pc, #60]	; (8005e40 <USB_HostInit+0x178>)
 8005e02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f043 0210 	orr.w	r2, r3, #16
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <USB_HostInit+0x17c>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e30:	b004      	add	sp, #16
 8005e32:	4770      	bx	lr
 8005e34:	01000200 	.word	0x01000200
 8005e38:	00e00300 	.word	0x00e00300
 8005e3c:	00600080 	.word	0x00600080
 8005e40:	004000e0 	.word	0x004000e0
 8005e44:	a3200008 	.word	0xa3200008

08005e48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	68f9      	ldr	r1, [r7, #12]
 8005e7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e80:	4313      	orrs	r3, r2
 8005e82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d107      	bne.n	8005e9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e90:	461a      	mov	r2, r3
 8005e92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e96:	6053      	str	r3, [r2, #4]
 8005e98:	e009      	b.n	8005eae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d106      	bne.n	8005eae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005eac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005edc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005eec:	2064      	movs	r0, #100	; 0x64
 8005eee:	f7fb fbcb 	bl	8001688 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005efe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f00:	200a      	movs	r0, #10
 8005f02:	f7fb fbc1 	bl	8001688 <HAL_Delay>

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d109      	bne.n	8005f54 <USB_DriveVbus+0x44>
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d106      	bne.n	8005f54 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f52:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f5e:	d109      	bne.n	8005f74 <USB_DriveVbus+0x64>
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f72:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	0c5b      	lsrs	r3, r3, #17
 8005fa0:	f003 0303 	and.w	r3, r3, #3
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	b29b      	uxth	r3, r3
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	70fb      	strb	r3, [r7, #3]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70bb      	strb	r3, [r7, #2]
 8005fea:	4613      	mov	r3, r2
 8005fec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006002:	461a      	mov	r2, r3
 8006004:	f04f 33ff 	mov.w	r3, #4294967295
 8006008:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800600a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800600e:	2b03      	cmp	r3, #3
 8006010:	d87e      	bhi.n	8006110 <USB_HC_Init+0x13c>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <USB_HC_Init+0x44>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	08006029 	.word	0x08006029
 800601c:	080060d3 	.word	0x080060d3
 8006020:	08006029 	.word	0x08006029
 8006024:	08006095 	.word	0x08006095
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	4413      	add	r3, r2
 8006030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006034:	461a      	mov	r2, r3
 8006036:	f240 439d 	movw	r3, #1181	; 0x49d
 800603a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800603c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006040:	2b00      	cmp	r3, #0
 8006042:	da10      	bge.n	8006066 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4413      	add	r3, r2
 800604c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	78fa      	ldrb	r2, [r7, #3]
 8006054:	0151      	lsls	r1, r2, #5
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	440a      	add	r2, r1
 800605a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800605e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006062:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006064:	e057      	b.n	8006116 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d051      	beq.n	8006116 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	440a      	add	r2, r1
 8006088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006090:	60d3      	str	r3, [r2, #12]
      break;
 8006092:	e040      	b.n	8006116 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a0:	461a      	mov	r2, r3
 80060a2:	f240 639d 	movw	r3, #1693	; 0x69d
 80060a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	da34      	bge.n	800611a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ce:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060d0:	e023      	b.n	800611a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060de:	461a      	mov	r2, r3
 80060e0:	f240 2325 	movw	r3, #549	; 0x225
 80060e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da17      	bge.n	800611e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	78fa      	ldrb	r2, [r7, #3]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	440a      	add	r2, r1
 8006104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006108:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800610c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800610e:	e006      	b.n	800611e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	77fb      	strb	r3, [r7, #31]
      break;
 8006114:	e004      	b.n	8006120 <USB_HC_Init+0x14c>
      break;
 8006116:	bf00      	nop
 8006118:	e002      	b.n	8006120 <USB_HC_Init+0x14c>
      break;
 800611a:	bf00      	nop
 800611c:	e000      	b.n	8006120 <USB_HC_Init+0x14c>
      break;
 800611e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4413      	add	r3, r2
 8006128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	78fa      	ldrb	r2, [r7, #3]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	440a      	add	r2, r1
 8006136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800613a:	f043 0302 	orr.w	r3, r3, #2
 800613e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006146:	699a      	ldr	r2, [r3, #24]
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	2101      	movs	r1, #1
 8006150:	fa01 f303 	lsl.w	r3, r1, r3
 8006154:	6939      	ldr	r1, [r7, #16]
 8006156:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800615a:	4313      	orrs	r3, r2
 800615c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800616a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800616e:	2b00      	cmp	r3, #0
 8006170:	da03      	bge.n	800617a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006176:	61bb      	str	r3, [r7, #24]
 8006178:	e001      	b.n	800617e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff feff 	bl	8005f82 <USB_GetHostSpeed>
 8006184:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006186:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800618a:	2b02      	cmp	r3, #2
 800618c:	d106      	bne.n	800619c <USB_HC_Init+0x1c8>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d003      	beq.n	800619c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	e001      	b.n	80061a0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061a0:	787b      	ldrb	r3, [r7, #1]
 80061a2:	059b      	lsls	r3, r3, #22
 80061a4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061a8:	78bb      	ldrb	r3, [r7, #2]
 80061aa:	02db      	lsls	r3, r3, #11
 80061ac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061b0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061b6:	049b      	lsls	r3, r3, #18
 80061b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80061c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	0159      	lsls	r1, r3, #5
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	440b      	add	r3, r1
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061dc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80061de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d003      	beq.n	80061ee <USB_HC_Init+0x21a>
 80061e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d10f      	bne.n	800620e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	440a      	add	r2, r1
 8006204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006208:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800620c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800620e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3720      	adds	r7, #32
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08c      	sub	sp, #48	; 0x30
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	785b      	ldrb	r3, [r3, #1]
 800622e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006234:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623e:	2b00      	cmp	r3, #0
 8006240:	d02d      	beq.n	800629e <USB_HC_StartXfer+0x86>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	791b      	ldrb	r3, [r3, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d129      	bne.n	800629e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d117      	bne.n	8006280 <USB_HC_StartXfer+0x68>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	79db      	ldrb	r3, [r3, #7]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <USB_HC_StartXfer+0x48>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	79db      	ldrb	r3, [r3, #7]
 800625c:	2b02      	cmp	r3, #2
 800625e:	d10f      	bne.n	8006280 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	4413      	add	r3, r2
 8006268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	6a3a      	ldr	r2, [r7, #32]
 8006274:	440a      	add	r2, r1
 8006276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800627a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <USB_HC_StartXfer+0x86>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	795b      	ldrb	r3, [r3, #5]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d107      	bne.n	800629e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	4619      	mov	r1, r3
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 fa0f 	bl	80066b8 <USB_DoPing>
      return HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	e0f8      	b.n	8006490 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d018      	beq.n	80062d8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	8912      	ldrh	r2, [r2, #8]
 80062ae:	4413      	add	r3, r2
 80062b0:	3b01      	subs	r3, #1
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	8912      	ldrh	r2, [r2, #8]
 80062b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80062bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062be:	8b7b      	ldrh	r3, [r7, #26]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d90b      	bls.n	80062dc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80062c4:	8b7b      	ldrh	r3, [r7, #26]
 80062c6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	8912      	ldrh	r2, [r2, #8]
 80062ce:	fb03 f202 	mul.w	r2, r3, r2
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	611a      	str	r2, [r3, #16]
 80062d6:	e001      	b.n	80062dc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80062d8:	2301      	movs	r3, #1
 80062da:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	78db      	ldrb	r3, [r3, #3]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	8912      	ldrh	r2, [r2, #8]
 80062ea:	fb03 f202 	mul.w	r2, r3, r2
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	611a      	str	r2, [r3, #16]
 80062f2:	e003      	b.n	80062fc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006304:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006306:	04d9      	lsls	r1, r3, #19
 8006308:	4b63      	ldr	r3, [pc, #396]	; (8006498 <USB_HC_StartXfer+0x280>)
 800630a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800630c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	7a9b      	ldrb	r3, [r3, #10]
 8006312:	075b      	lsls	r3, r3, #29
 8006314:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006318:	69f9      	ldr	r1, [r7, #28]
 800631a:	0148      	lsls	r0, r1, #5
 800631c:	6a39      	ldr	r1, [r7, #32]
 800631e:	4401      	add	r1, r0
 8006320:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006324:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006326:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	68d9      	ldr	r1, [r3, #12]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633e:	460a      	mov	r2, r1
 8006340:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	bf0c      	ite	eq
 8006352:	2301      	moveq	r3, #1
 8006354:	2300      	movne	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	4413      	add	r3, r2
 8006362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	6a3a      	ldr	r2, [r7, #32]
 800636e:	440a      	add	r2, r1
 8006370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006374:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006378:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	7e7b      	ldrb	r3, [r7, #25]
 800638a:	075b      	lsls	r3, r3, #29
 800638c:	69f9      	ldr	r1, [r7, #28]
 800638e:	0148      	lsls	r0, r1, #5
 8006390:	6a39      	ldr	r1, [r7, #32]
 8006392:	4401      	add	r1, r0
 8006394:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006398:	4313      	orrs	r3, r2
 800639a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063b2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	78db      	ldrb	r3, [r3, #3]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c2:	613b      	str	r3, [r7, #16]
 80063c4:	e003      	b.n	80063ce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063cc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063d4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e2:	461a      	mov	r2, r3
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	e04e      	b.n	8006490 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	78db      	ldrb	r3, [r3, #3]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d149      	bne.n	800648e <USB_HC_StartXfer+0x276>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d045      	beq.n	800648e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	79db      	ldrb	r3, [r3, #7]
 8006406:	2b03      	cmp	r3, #3
 8006408:	d830      	bhi.n	800646c <USB_HC_StartXfer+0x254>
 800640a:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <USB_HC_StartXfer+0x1f8>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006421 	.word	0x08006421
 8006414:	08006445 	.word	0x08006445
 8006418:	08006421 	.word	0x08006421
 800641c:	08006445 	.word	0x08006445
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	3303      	adds	r3, #3
 8006426:	089b      	lsrs	r3, r3, #2
 8006428:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800642a:	8afa      	ldrh	r2, [r7, #22]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	b29b      	uxth	r3, r3
 8006432:	429a      	cmp	r2, r3
 8006434:	d91c      	bls.n	8006470 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f043 0220 	orr.w	r2, r3, #32
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	619a      	str	r2, [r3, #24]
        }
        break;
 8006442:	e015      	b.n	8006470 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	3303      	adds	r3, #3
 800644a:	089b      	lsrs	r3, r3, #2
 800644c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800644e:	8afa      	ldrh	r2, [r7, #22]
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	b29b      	uxth	r3, r3
 800645a:	429a      	cmp	r2, r3
 800645c:	d90a      	bls.n	8006474 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	619a      	str	r2, [r3, #24]
        }
        break;
 800646a:	e003      	b.n	8006474 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800646c:	bf00      	nop
 800646e:	e002      	b.n	8006476 <USB_HC_StartXfer+0x25e>
        break;
 8006470:	bf00      	nop
 8006472:	e000      	b.n	8006476 <USB_HC_StartXfer+0x25e>
        break;
 8006474:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	68d9      	ldr	r1, [r3, #12]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	785a      	ldrb	r2, [r3, #1]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	b29b      	uxth	r3, r3
 8006484:	2000      	movs	r0, #0
 8006486:	9000      	str	r0, [sp, #0]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f7ff fb31 	bl	8005af0 <USB_WritePacket>
  }

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3728      	adds	r7, #40	; 0x28
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	1ff80000 	.word	0x1ff80000

0800649c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	b29b      	uxth	r3, r3
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064be:	b480      	push	{r7}
 80064c0:	b089      	sub	sp, #36	; 0x24
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	0c9b      	lsrs	r3, r3, #18
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	0fdb      	lsrs	r3, r3, #31
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b20      	cmp	r3, #32
 800650c:	d104      	bne.n	8006518 <USB_HC_Halt+0x5a>
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	e0c8      	b.n	80066aa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <USB_HC_Halt+0x66>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d163      	bne.n	80065ec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	440a      	add	r2, r1
 800653a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800653e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006542:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	f040 80ab 	bne.w	80066a8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d133      	bne.n	80065c6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	440a      	add	r2, r1
 8006574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800657c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	440a      	add	r2, r1
 8006594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800659c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3301      	adds	r3, #1
 80065a2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065aa:	d81d      	bhi.n	80065e8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c2:	d0ec      	beq.n	800659e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065c4:	e070      	b.n	80066a8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065e6:	e05f      	b.n	80066a8 <USB_HC_Halt+0x1ea>
            break;
 80065e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065ea:	e05d      	b.n	80066a8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	440a      	add	r2, r1
 8006602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800660a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d133      	bne.n	8006684 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	440a      	add	r2, r1
 8006632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006636:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800663a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	440a      	add	r2, r1
 8006652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006656:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800665a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006668:	d81d      	bhi.n	80066a6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	4413      	add	r3, r2
 8006672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800667c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006680:	d0ec      	beq.n	800665c <USB_HC_Halt+0x19e>
 8006682:	e011      	b.n	80066a8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	440a      	add	r2, r1
 800669a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800669e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	e000      	b.n	80066a8 <USB_HC_Halt+0x1ea>
          break;
 80066a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3724      	adds	r7, #36	; 0x24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066cc:	2301      	movs	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	04da      	lsls	r2, r3, #19
 80066d4:	4b15      	ldr	r3, [pc, #84]	; (800672c <USB_DoPing+0x74>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006700:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006708:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006716:	461a      	mov	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	1ff80000 	.word	0x1ff80000

08006730 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff f911 	bl	800596c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800674a:	2110      	movs	r1, #16
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff f96b 	bl	8005a28 <USB_FlushTxFifo>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff f997 	bl	8005a90 <USB_FlushRxFifo>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
 8006770:	e01f      	b.n	80067b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	4413      	add	r3, r2
 800677a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006788:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006790:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006798:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a6:	461a      	mov	r2, r3
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	3301      	adds	r3, #1
 80067b0:	61bb      	str	r3, [r7, #24]
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b0f      	cmp	r3, #15
 80067b6:	d9dc      	bls.n	8006772 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067b8:	2300      	movs	r3, #0
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	e034      	b.n	8006828 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f2:	461a      	mov	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006804:	d80c      	bhi.n	8006820 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800681c:	d0ec      	beq.n	80067f8 <USB_StopHost+0xc8>
 800681e:	e000      	b.n	8006822 <USB_StopHost+0xf2>
        break;
 8006820:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	3301      	adds	r3, #1
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b0f      	cmp	r3, #15
 800682c:	d9c7      	bls.n	80067be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006834:	461a      	mov	r2, r3
 8006836:	f04f 33ff 	mov.w	r3, #4294967295
 800683a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f04f 32ff 	mov.w	r2, #4294967295
 8006842:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff f880 	bl	800594a <USB_EnableGlobalInt>

  return ret;
 800684a:	7ffb      	ldrb	r3, [r7, #31]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3720      	adds	r7, #32
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b089      	sub	sp, #36	; 0x24
 8006858:	af04      	add	r7, sp, #16
 800685a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800685c:	2301      	movs	r3, #1
 800685e:	2202      	movs	r2, #2
 8006860:	2102      	movs	r1, #2
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fc66 	bl	8007134 <USBH_FindInterface>
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2bff      	cmp	r3, #255	; 0xff
 8006870:	d002      	beq.n	8006878 <USBH_CDC_InterfaceInit+0x24>
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d901      	bls.n	800687c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006878:	2302      	movs	r3, #2
 800687a:	e13d      	b.n	8006af8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fc3b 	bl	80070fc <USBH_SelectInterface>
 8006886:	4603      	mov	r3, r0
 8006888:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006890:	2302      	movs	r3, #2
 8006892:	e131      	b.n	8006af8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800689a:	2050      	movs	r0, #80	; 0x50
 800689c:	f002 fafa 	bl	8008e94 <malloc>
 80068a0:	4603      	mov	r3, r0
 80068a2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80068b4:	2302      	movs	r3, #2
 80068b6:	e11f      	b.n	8006af8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068b8:	2250      	movs	r2, #80	; 0x50
 80068ba:	2100      	movs	r1, #0
 80068bc:	68b8      	ldr	r0, [r7, #8]
 80068be:	f002 faf9 	bl	8008eb4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	211a      	movs	r1, #26
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	4413      	add	r3, r2
 80068ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	b25b      	sxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da15      	bge.n	8006906 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	211a      	movs	r1, #26
 80068e0:	fb01 f303 	mul.w	r3, r1, r3
 80068e4:	4413      	add	r3, r2
 80068e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068ea:	781a      	ldrb	r2, [r3, #0]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	211a      	movs	r1, #26
 80068f6:	fb01 f303 	mul.w	r3, r1, r3
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006900:	881a      	ldrh	r2, [r3, #0]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 ff2c 	bl	800876a <USBH_AllocPipe>
 8006912:	4603      	mov	r3, r0
 8006914:	461a      	mov	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	7819      	ldrb	r1, [r3, #0]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	7858      	ldrb	r0, [r3, #1]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	8952      	ldrh	r2, [r2, #10]
 8006932:	9202      	str	r2, [sp, #8]
 8006934:	2203      	movs	r2, #3
 8006936:	9201      	str	r2, [sp, #4]
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4623      	mov	r3, r4
 800693c:	4602      	mov	r2, r0
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 fee4 	bl	800870c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2200      	movs	r2, #0
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f002 f9f3 	bl	8008d38 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006952:	2300      	movs	r3, #0
 8006954:	2200      	movs	r2, #0
 8006956:	210a      	movs	r1, #10
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fbeb 	bl	8007134 <USBH_FindInterface>
 800695e:	4603      	mov	r3, r0
 8006960:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	2bff      	cmp	r3, #255	; 0xff
 8006966:	d002      	beq.n	800696e <USBH_CDC_InterfaceInit+0x11a>
 8006968:	7bfb      	ldrb	r3, [r7, #15]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d901      	bls.n	8006972 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800696e:	2302      	movs	r3, #2
 8006970:	e0c2      	b.n	8006af8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	211a      	movs	r1, #26
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	4413      	add	r3, r2
 800697e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	b25b      	sxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	da16      	bge.n	80069b8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	211a      	movs	r1, #26
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	4413      	add	r3, r2
 8006996:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800699a:	781a      	ldrb	r2, [r3, #0]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	211a      	movs	r1, #26
 80069a6:	fb01 f303 	mul.w	r3, r1, r3
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069b0:	881a      	ldrh	r2, [r3, #0]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	835a      	strh	r2, [r3, #26]
 80069b6:	e015      	b.n	80069e4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	211a      	movs	r1, #26
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	4413      	add	r3, r2
 80069c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069c8:	781a      	ldrb	r2, [r3, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	211a      	movs	r1, #26
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	4413      	add	r3, r2
 80069da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069de:	881a      	ldrh	r2, [r3, #0]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	211a      	movs	r1, #26
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	4413      	add	r3, r2
 80069f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b25b      	sxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	da16      	bge.n	8006a2a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	211a      	movs	r1, #26
 8006a02:	fb01 f303 	mul.w	r3, r1, r3
 8006a06:	4413      	add	r3, r2
 8006a08:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a0c:	781a      	ldrb	r2, [r3, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	211a      	movs	r1, #26
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a22:	881a      	ldrh	r2, [r3, #0]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	835a      	strh	r2, [r3, #26]
 8006a28:	e015      	b.n	8006a56 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	211a      	movs	r1, #26
 8006a30:	fb01 f303 	mul.w	r3, r1, r3
 8006a34:	4413      	add	r3, r2
 8006a36:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a3a:	781a      	ldrb	r2, [r3, #0]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	211a      	movs	r1, #26
 8006a46:	fb01 f303 	mul.w	r3, r1, r3
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a50:	881a      	ldrh	r2, [r3, #0]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	7b9b      	ldrb	r3, [r3, #14]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 fe84 	bl	800876a <USBH_AllocPipe>
 8006a62:	4603      	mov	r3, r0
 8006a64:	461a      	mov	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	7bdb      	ldrb	r3, [r3, #15]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fe7a 	bl	800876a <USBH_AllocPipe>
 8006a76:	4603      	mov	r3, r0
 8006a78:	461a      	mov	r2, r3
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	7b59      	ldrb	r1, [r3, #13]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	7b98      	ldrb	r0, [r3, #14]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	8b12      	ldrh	r2, [r2, #24]
 8006a96:	9202      	str	r2, [sp, #8]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	9201      	str	r2, [sp, #4]
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	4623      	mov	r3, r4
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 fe32 	bl	800870c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	7b19      	ldrb	r1, [r3, #12]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	7bd8      	ldrb	r0, [r3, #15]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	8b52      	ldrh	r2, [r2, #26]
 8006ac0:	9202      	str	r2, [sp, #8]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	9201      	str	r2, [sp, #4]
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	4623      	mov	r3, r4
 8006aca:	4602      	mov	r2, r0
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 fe1d 	bl	800870c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	7b5b      	ldrb	r3, [r3, #13]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f002 f928 	bl	8008d38 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	7b1b      	ldrb	r3, [r3, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f002 f921 	bl	8008d38 <USBH_LL_SetToggle>

  return USBH_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd90      	pop	{r4, r7, pc}

08006b00 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00e      	beq.n	8006b38 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 fe12 	bl	800874a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 fe3d 	bl	80087ac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	7b1b      	ldrb	r3, [r3, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00e      	beq.n	8006b5e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	7b1b      	ldrb	r3, [r3, #12]
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 fdff 	bl	800874a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	7b1b      	ldrb	r3, [r3, #12]
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fe2a 	bl	80087ac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	7b5b      	ldrb	r3, [r3, #13]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00e      	beq.n	8006b84 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	7b5b      	ldrb	r3, [r3, #13]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 fdec 	bl	800874a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	7b5b      	ldrb	r3, [r3, #13]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 fe17 	bl	80087ac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f002 f983 	bl	8008ea4 <free>
    phost->pActiveClass->pData = 0U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3340      	adds	r3, #64	; 0x40
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f8b1 	bl	8006d32 <GetLineCoding>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006bd4:	7afb      	ldrb	r3, [r7, #11]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d105      	bne.n	8006be6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006be0:	2102      	movs	r1, #2
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006be6:	7afb      	ldrb	r3, [r7, #11]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d877      	bhi.n	8006d04 <USBH_CDC_Process+0x114>
 8006c14:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <USBH_CDC_Process+0x2c>)
 8006c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1a:	bf00      	nop
 8006c1c:	08006c31 	.word	0x08006c31
 8006c20:	08006c37 	.word	0x08006c37
 8006c24:	08006c67 	.word	0x08006c67
 8006c28:	08006cdb 	.word	0x08006cdb
 8006c2c:	08006ce9 	.word	0x08006ce9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	73fb      	strb	r3, [r7, #15]
      break;
 8006c34:	e06d      	b.n	8006d12 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f897 	bl	8006d70 <SetLineCoding>
 8006c42:	4603      	mov	r3, r0
 8006c44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c54:	e058      	b.n	8006d08 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c56:	7bbb      	ldrb	r3, [r7, #14]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d055      	beq.n	8006d08 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2204      	movs	r2, #4
 8006c60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c64:	e050      	b.n	8006d08 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	3340      	adds	r3, #64	; 0x40
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f860 	bl	8006d32 <GetLineCoding>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d126      	bne.n	8006cca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8e:	791b      	ldrb	r3, [r3, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d13b      	bne.n	8006d0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d133      	bne.n	8006d0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d12b      	bne.n	8006d0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cbc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d124      	bne.n	8006d0c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f958 	bl	8006f78 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cc8:	e020      	b.n	8006d0c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d01d      	beq.n	8006d0c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006cd8:	e018      	b.n	8006d0c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f867 	bl	8006dae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f8da 	bl	8006e9a <CDC_ProcessReception>
      break;
 8006ce6:	e014      	b.n	8006d12 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006ce8:	2100      	movs	r1, #0
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 ffef 	bl	8007cce <USBH_ClrFeature>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006d02:	e005      	b.n	8006d10 <USBH_CDC_Process+0x120>

    default:
      break;
 8006d04:	bf00      	nop
 8006d06:	e004      	b.n	8006d12 <USBH_CDC_Process+0x122>
      break;
 8006d08:	bf00      	nop
 8006d0a:	e002      	b.n	8006d12 <USBH_CDC_Process+0x122>
      break;
 8006d0c:	bf00      	nop
 8006d0e:	e000      	b.n	8006d12 <USBH_CDC_Process+0x122>
      break;
 8006d10:	bf00      	nop

  }

  return status;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	22a1      	movs	r2, #161	; 0xa1
 8006d40:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2221      	movs	r2, #33	; 0x21
 8006d46:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2207      	movs	r2, #7
 8006d58:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2207      	movs	r2, #7
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fa81 	bl	8008268 <USBH_CtlReq>
 8006d66:	4603      	mov	r3, r0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2221      	movs	r2, #33	; 0x21
 8006d7e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2207      	movs	r2, #7
 8006d96:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2207      	movs	r2, #7
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fa62 	bl	8008268 <USBH_CtlReq>
 8006da4:	4603      	mov	r3, r0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b086      	sub	sp, #24
 8006db2:	af02      	add	r7, sp, #8
 8006db4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d002      	beq.n	8006dd4 <CDC_ProcessTransmission+0x26>
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d023      	beq.n	8006e1a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006dd2:	e05e      	b.n	8006e92 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	8b12      	ldrh	r2, [r2, #24]
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d90b      	bls.n	8006df8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	69d9      	ldr	r1, [r3, #28]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8b1a      	ldrh	r2, [r3, #24]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	7b5b      	ldrb	r3, [r3, #13]
 8006dec:	2001      	movs	r0, #1
 8006dee:	9000      	str	r0, [sp, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 fc48 	bl	8008686 <USBH_BulkSendData>
 8006df6:	e00b      	b.n	8006e10 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	7b5b      	ldrb	r3, [r3, #13]
 8006e06:	2001      	movs	r0, #1
 8006e08:	9000      	str	r0, [sp, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fc3b 	bl	8008686 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e18:	e03b      	b.n	8006e92 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	7b5b      	ldrb	r3, [r3, #13]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 ff5f 	bl	8008ce4 <USBH_LL_GetURBState>
 8006e26:	4603      	mov	r3, r0
 8006e28:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e2a:	7afb      	ldrb	r3, [r7, #11]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d128      	bne.n	8006e82 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	8b12      	ldrh	r2, [r2, #24]
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d90e      	bls.n	8006e5a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	8b12      	ldrh	r2, [r2, #24]
 8006e44:	1a9a      	subs	r2, r3, r2
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	8b12      	ldrh	r2, [r2, #24]
 8006e52:	441a      	add	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	61da      	str	r2, [r3, #28]
 8006e58:	e002      	b.n	8006e60 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e70:	e00e      	b.n	8006e90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f868 	bl	8006f50 <USBH_CDC_TransmitCallback>
      break;
 8006e80:	e006      	b.n	8006e90 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e82:	7afb      	ldrb	r3, [r7, #11]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d103      	bne.n	8006e90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e90:	bf00      	nop
  }
}
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b086      	sub	sp, #24
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006eac:	2300      	movs	r3, #0
 8006eae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d002      	beq.n	8006ec0 <CDC_ProcessReception+0x26>
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d00e      	beq.n	8006edc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006ebe:	e043      	b.n	8006f48 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	6a19      	ldr	r1, [r3, #32]
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	8b5a      	ldrh	r2, [r3, #26]
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	7b1b      	ldrb	r3, [r3, #12]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 fbff 	bl	80086d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2204      	movs	r2, #4
 8006ed6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006eda:	e035      	b.n	8006f48 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	7b1b      	ldrb	r3, [r3, #12]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 fefe 	bl	8008ce4 <USBH_LL_GetURBState>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006eec:	7cfb      	ldrb	r3, [r7, #19]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d129      	bne.n	8006f46 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	7b1b      	ldrb	r3, [r3, #12]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fe61 	bl	8008bc0 <USBH_LL_GetLastXferSize>
 8006efe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d016      	beq.n	8006f38 <CDC_ProcessReception+0x9e>
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	8b5b      	ldrh	r3, [r3, #26]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d910      	bls.n	8006f38 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	1ad2      	subs	r2, r2, r3
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	6a1a      	ldr	r2, [r3, #32]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	441a      	add	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2203      	movs	r2, #3
 8006f32:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f36:	e006      	b.n	8006f46 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f80f 	bl	8006f64 <USBH_CDC_ReceiveCallback>
      break;
 8006f46:	bf00      	nop
  }
}
 8006f48:	bf00      	nop
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e029      	b.n	8006ff8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	79fa      	ldrb	r2, [r7, #7]
 8006fa8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 f81f 	bl	8007000 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f001 fd31 	bl	8008a58 <USBH_LL_Init>

  return USBH_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	e009      	b.n	8007026 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	33e0      	adds	r3, #224	; 0xe0
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	2200      	movs	r2, #0
 800701e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b0f      	cmp	r3, #15
 800702a:	d9f2      	bls.n	8007012 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e009      	b.n	8007046 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800703c:	2200      	movs	r2, #0
 800703e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3301      	adds	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800704c:	d3f1      	bcc.n	8007032 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2240      	movs	r2, #64	; 0x40
 8007072:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d016      	beq.n	80070ea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10e      	bne.n	80070e4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070cc:	1c59      	adds	r1, r3, #1
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	33de      	adds	r3, #222	; 0xde
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
 80070e2:	e004      	b.n	80070ee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070e4:	2302      	movs	r3, #2
 80070e6:	73fb      	strb	r3, [r7, #15]
 80070e8:	e001      	b.n	80070ee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070ea:	2302      	movs	r3, #2
 80070ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	429a      	cmp	r2, r3
 8007116:	d204      	bcs.n	8007122 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	78fa      	ldrb	r2, [r7, #3]
 800711c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007120:	e001      	b.n	8007126 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007122:	2302      	movs	r3, #2
 8007124:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007126:	7bfb      	ldrb	r3, [r7, #15]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	4608      	mov	r0, r1
 800713e:	4611      	mov	r1, r2
 8007140:	461a      	mov	r2, r3
 8007142:	4603      	mov	r3, r0
 8007144:	70fb      	strb	r3, [r7, #3]
 8007146:	460b      	mov	r3, r1
 8007148:	70bb      	strb	r3, [r7, #2]
 800714a:	4613      	mov	r3, r2
 800714c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800715c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800715e:	e025      	b.n	80071ac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	221a      	movs	r2, #26
 8007164:	fb02 f303 	mul.w	r3, r2, r3
 8007168:	3308      	adds	r3, #8
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4413      	add	r3, r2
 800716e:	3302      	adds	r3, #2
 8007170:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	795b      	ldrb	r3, [r3, #5]
 8007176:	78fa      	ldrb	r2, [r7, #3]
 8007178:	429a      	cmp	r2, r3
 800717a:	d002      	beq.n	8007182 <USBH_FindInterface+0x4e>
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	2bff      	cmp	r3, #255	; 0xff
 8007180:	d111      	bne.n	80071a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007186:	78ba      	ldrb	r2, [r7, #2]
 8007188:	429a      	cmp	r2, r3
 800718a:	d002      	beq.n	8007192 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800718c:	78bb      	ldrb	r3, [r7, #2]
 800718e:	2bff      	cmp	r3, #255	; 0xff
 8007190:	d109      	bne.n	80071a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007196:	787a      	ldrb	r2, [r7, #1]
 8007198:	429a      	cmp	r2, r3
 800719a:	d002      	beq.n	80071a2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800719c:	787b      	ldrb	r3, [r7, #1]
 800719e:	2bff      	cmp	r3, #255	; 0xff
 80071a0:	d101      	bne.n	80071a6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	e006      	b.n	80071b4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	3301      	adds	r3, #1
 80071aa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d9d6      	bls.n	8007160 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80071b2:	23ff      	movs	r3, #255	; 0xff
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 fc81 	bl	8008ad0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80071ce:	2101      	movs	r1, #1
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 fd9a 	bl	8008d0a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af04      	add	r7, sp, #16
 80071e6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071e8:	2302      	movs	r3, #2
 80071ea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d102      	bne.n	8007202 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2203      	movs	r2, #3
 8007200:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b0b      	cmp	r3, #11
 800720a:	f200 81be 	bhi.w	800758a <USBH_Process+0x3aa>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <USBH_Process+0x34>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	08007245 	.word	0x08007245
 8007218:	08007277 	.word	0x08007277
 800721c:	080072df 	.word	0x080072df
 8007220:	08007525 	.word	0x08007525
 8007224:	0800758b 	.word	0x0800758b
 8007228:	08007383 	.word	0x08007383
 800722c:	080074cb 	.word	0x080074cb
 8007230:	080073b9 	.word	0x080073b9
 8007234:	080073d9 	.word	0x080073d9
 8007238:	080073f9 	.word	0x080073f9
 800723c:	0800743d 	.word	0x0800743d
 8007240:	0800750d 	.word	0x0800750d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 819e 	beq.w	800758e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007258:	20c8      	movs	r0, #200	; 0xc8
 800725a:	f001 fd9d 	bl	8008d98 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 fc93 	bl	8008b8a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007274:	e18b      	b.n	800758e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800727c:	2b01      	cmp	r3, #1
 800727e:	d107      	bne.n	8007290 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800728e:	e18d      	b.n	80075ac <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800729a:	d914      	bls.n	80072c6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072a2:	3301      	adds	r3, #1
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d903      	bls.n	80072be <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	220d      	movs	r2, #13
 80072ba:	701a      	strb	r2, [r3, #0]
      break;
 80072bc:	e176      	b.n	80075ac <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	701a      	strb	r2, [r3, #0]
      break;
 80072c4:	e172      	b.n	80075ac <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072cc:	f103 020a 	add.w	r2, r3, #10
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80072d6:	200a      	movs	r0, #10
 80072d8:	f001 fd5e 	bl	8008d98 <USBH_Delay>
      break;
 80072dc:	e166      	b.n	80075ac <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072ee:	2104      	movs	r1, #4
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072f4:	2064      	movs	r0, #100	; 0x64
 80072f6:	f001 fd4f 	bl	8008d98 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fc1e 	bl	8008b3c <USBH_LL_GetSpeed>
 8007300:	4603      	mov	r3, r0
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2205      	movs	r2, #5
 800730e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007310:	2100      	movs	r1, #0
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 fa29 	bl	800876a <USBH_AllocPipe>
 8007318:	4603      	mov	r3, r0
 800731a:	461a      	mov	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007320:	2180      	movs	r1, #128	; 0x80
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 fa21 	bl	800876a <USBH_AllocPipe>
 8007328:	4603      	mov	r3, r0
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	7919      	ldrb	r1, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007344:	b292      	uxth	r2, r2
 8007346:	9202      	str	r2, [sp, #8]
 8007348:	2200      	movs	r2, #0
 800734a:	9201      	str	r2, [sp, #4]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	4603      	mov	r3, r0
 8007350:	2280      	movs	r2, #128	; 0x80
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 f9da 	bl	800870c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	7959      	ldrb	r1, [r3, #5]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800736c:	b292      	uxth	r2, r2
 800736e:	9202      	str	r2, [sp, #8]
 8007370:	2200      	movs	r2, #0
 8007372:	9201      	str	r2, [sp, #4]
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	4603      	mov	r3, r0
 8007378:	2200      	movs	r2, #0
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 f9c6 	bl	800870c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007380:	e114      	b.n	80075ac <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f918 	bl	80075b8 <USBH_HandleEnum>
 8007388:	4603      	mov	r3, r0
 800738a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	f040 80fe 	bne.w	8007592 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d103      	bne.n	80073b0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2208      	movs	r2, #8
 80073ac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073ae:	e0f0      	b.n	8007592 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2207      	movs	r2, #7
 80073b4:	701a      	strb	r2, [r3, #0]
      break;
 80073b6:	e0ec      	b.n	8007592 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80e9 	beq.w	8007596 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ca:	2101      	movs	r1, #1
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2208      	movs	r2, #8
 80073d4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80073d6:	e0de      	b.n	8007596 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80073de:	b29b      	uxth	r3, r3
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fc2c 	bl	8007c40 <USBH_SetCfg>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f040 80d5 	bne.w	800759a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2209      	movs	r2, #9
 80073f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073f6:	e0d0      	b.n	800759a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007406:	2101      	movs	r1, #1
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fc3c 	bl	8007c86 <USBH_SetFeature>
 800740e:	4603      	mov	r3, r0
 8007410:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	220a      	movs	r2, #10
 800741e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007420:	e0bd      	b.n	800759e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b03      	cmp	r3, #3
 8007428:	f040 80b9 	bne.w	800759e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	220a      	movs	r2, #10
 8007430:	701a      	strb	r2, [r3, #0]
      break;
 8007432:	e0b4      	b.n	800759e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	220a      	movs	r2, #10
 8007438:	701a      	strb	r2, [r3, #0]
      break;
 800743a:	e0b0      	b.n	800759e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 80ad 	beq.w	80075a2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
 8007454:	e016      	b.n	8007484 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007456:	7bfa      	ldrb	r2, [r7, #15]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	32de      	adds	r2, #222	; 0xde
 800745c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007460:	791a      	ldrb	r2, [r3, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007468:	429a      	cmp	r2, r3
 800746a:	d108      	bne.n	800747e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800746c:	7bfa      	ldrb	r2, [r7, #15]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	32de      	adds	r2, #222	; 0xde
 8007472:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800747c:	e005      	b.n	800748a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	3301      	adds	r3, #1
 8007482:	73fb      	strb	r3, [r7, #15]
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0e5      	beq.n	8007456 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007490:	2b00      	cmp	r3, #0
 8007492:	d016      	beq.n	80074c2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2206      	movs	r2, #6
 80074aa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074b2:	2103      	movs	r1, #3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074b8:	e073      	b.n	80075a2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	220d      	movs	r2, #13
 80074be:	701a      	strb	r2, [r3, #0]
      break;
 80074c0:	e06f      	b.n	80075a2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	220d      	movs	r2, #13
 80074c6:	701a      	strb	r2, [r3, #0]
      break;
 80074c8:	e06b      	b.n	80075a2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d017      	beq.n	8007504 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	4798      	blx	r3
 80074e0:	4603      	mov	r3, r0
 80074e2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d103      	bne.n	80074f4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	220b      	movs	r2, #11
 80074f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074f2:	e058      	b.n	80075a6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d154      	bne.n	80075a6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	220d      	movs	r2, #13
 8007500:	701a      	strb	r2, [r3, #0]
      break;
 8007502:	e050      	b.n	80075a6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	220d      	movs	r2, #13
 8007508:	701a      	strb	r2, [r3, #0]
      break;
 800750a:	e04c      	b.n	80075a6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007512:	2b00      	cmp	r3, #0
 8007514:	d049      	beq.n	80075aa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
      }
      break;
 8007522:	e042      	b.n	80075aa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff fd67 	bl	8007000 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d009      	beq.n	8007550 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007560:	2105      	movs	r1, #5
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b01      	cmp	r3, #1
 8007570:	d107      	bne.n	8007582 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff fe20 	bl	80071c0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007580:	e014      	b.n	80075ac <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 faa4 	bl	8008ad0 <USBH_LL_Start>
      break;
 8007588:	e010      	b.n	80075ac <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800758a:	bf00      	nop
 800758c:	e00e      	b.n	80075ac <USBH_Process+0x3cc>
      break;
 800758e:	bf00      	nop
 8007590:	e00c      	b.n	80075ac <USBH_Process+0x3cc>
      break;
 8007592:	bf00      	nop
 8007594:	e00a      	b.n	80075ac <USBH_Process+0x3cc>
    break;
 8007596:	bf00      	nop
 8007598:	e008      	b.n	80075ac <USBH_Process+0x3cc>
      break;
 800759a:	bf00      	nop
 800759c:	e006      	b.n	80075ac <USBH_Process+0x3cc>
      break;
 800759e:	bf00      	nop
 80075a0:	e004      	b.n	80075ac <USBH_Process+0x3cc>
      break;
 80075a2:	bf00      	nop
 80075a4:	e002      	b.n	80075ac <USBH_Process+0x3cc>
      break;
 80075a6:	bf00      	nop
 80075a8:	e000      	b.n	80075ac <USBH_Process+0x3cc>
      break;
 80075aa:	bf00      	nop
  }
  return USBH_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop

080075b8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af04      	add	r7, sp, #16
 80075be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075c0:	2301      	movs	r3, #1
 80075c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075c4:	2301      	movs	r3, #1
 80075c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	785b      	ldrb	r3, [r3, #1]
 80075cc:	2b07      	cmp	r3, #7
 80075ce:	f200 81c1 	bhi.w	8007954 <USBH_HandleEnum+0x39c>
 80075d2:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <USBH_HandleEnum+0x20>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	080075f9 	.word	0x080075f9
 80075dc:	080076b7 	.word	0x080076b7
 80075e0:	08007721 	.word	0x08007721
 80075e4:	080077af 	.word	0x080077af
 80075e8:	08007819 	.word	0x08007819
 80075ec:	08007889 	.word	0x08007889
 80075f0:	080078cf 	.word	0x080078cf
 80075f4:	08007915 	.word	0x08007915
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075f8:	2108      	movs	r1, #8
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fa50 	bl	8007aa0 <USBH_Get_DevDesc>
 8007600:	4603      	mov	r3, r0
 8007602:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007604:	7bbb      	ldrb	r3, [r7, #14]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d130      	bne.n	800766c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	7919      	ldrb	r1, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800762e:	b292      	uxth	r2, r2
 8007630:	9202      	str	r2, [sp, #8]
 8007632:	2200      	movs	r2, #0
 8007634:	9201      	str	r2, [sp, #4]
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	4603      	mov	r3, r0
 800763a:	2280      	movs	r2, #128	; 0x80
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 f865 	bl	800870c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7959      	ldrb	r1, [r3, #5]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007656:	b292      	uxth	r2, r2
 8007658:	9202      	str	r2, [sp, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	9201      	str	r2, [sp, #4]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	4603      	mov	r3, r0
 8007662:	2200      	movs	r2, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f851 	bl	800870c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800766a:	e175      	b.n	8007958 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b03      	cmp	r3, #3
 8007670:	f040 8172 	bne.w	8007958 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800767a:	3301      	adds	r3, #1
 800767c:	b2da      	uxtb	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800768a:	2b03      	cmp	r3, #3
 800768c:	d903      	bls.n	8007696 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	220d      	movs	r2, #13
 8007692:	701a      	strb	r2, [r3, #0]
      break;
 8007694:	e160      	b.n	8007958 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	795b      	ldrb	r3, [r3, #5]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 f885 	bl	80087ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	791b      	ldrb	r3, [r3, #4]
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 f87f 	bl	80087ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]
      break;
 80076b4:	e150      	b.n	8007958 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076b6:	2112      	movs	r1, #18
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f9f1 	bl	8007aa0 <USBH_Get_DevDesc>
 80076be:	4603      	mov	r3, r0
 80076c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d103      	bne.n	80076d0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ce:	e145      	b.n	800795c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	f040 8142 	bne.w	800795c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076de:	3301      	adds	r3, #1
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d903      	bls.n	80076fa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	220d      	movs	r2, #13
 80076f6:	701a      	strb	r2, [r3, #0]
      break;
 80076f8:	e130      	b.n	800795c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	795b      	ldrb	r3, [r3, #5]
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 f853 	bl	80087ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	791b      	ldrb	r3, [r3, #4]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 f84d 	bl	80087ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
      break;
 800771e:	e11d      	b.n	800795c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007720:	2101      	movs	r1, #1
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa68 	bl	8007bf8 <USBH_SetAddress>
 8007728:	4603      	mov	r3, r0
 800772a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d132      	bne.n	8007798 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007732:	2002      	movs	r0, #2
 8007734:	f001 fb30 	bl	8008d98 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2203      	movs	r2, #3
 8007744:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	7919      	ldrb	r1, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800775a:	b292      	uxth	r2, r2
 800775c:	9202      	str	r2, [sp, #8]
 800775e:	2200      	movs	r2, #0
 8007760:	9201      	str	r2, [sp, #4]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	4603      	mov	r3, r0
 8007766:	2280      	movs	r2, #128	; 0x80
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 ffcf 	bl	800870c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	7959      	ldrb	r1, [r3, #5]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007782:	b292      	uxth	r2, r2
 8007784:	9202      	str	r2, [sp, #8]
 8007786:	2200      	movs	r2, #0
 8007788:	9201      	str	r2, [sp, #4]
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	4603      	mov	r3, r0
 800778e:	2200      	movs	r2, #0
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 ffbb 	bl	800870c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007796:	e0e3      	b.n	8007960 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b03      	cmp	r3, #3
 800779c:	f040 80e0 	bne.w	8007960 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	220d      	movs	r2, #13
 80077a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	705a      	strb	r2, [r3, #1]
      break;
 80077ac:	e0d8      	b.n	8007960 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80077ae:	2109      	movs	r1, #9
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f99d 	bl	8007af0 <USBH_Get_CfgDesc>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2204      	movs	r2, #4
 80077c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077c6:	e0cd      	b.n	8007964 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	f040 80ca 	bne.w	8007964 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077d6:	3301      	adds	r3, #1
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d903      	bls.n	80077f2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	220d      	movs	r2, #13
 80077ee:	701a      	strb	r2, [r3, #0]
      break;
 80077f0:	e0b8      	b.n	8007964 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	795b      	ldrb	r3, [r3, #5]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 ffd7 	bl	80087ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	791b      	ldrb	r3, [r3, #4]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 ffd1 	bl	80087ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	701a      	strb	r2, [r3, #0]
      break;
 8007816:	e0a5      	b.n	8007964 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f965 	bl	8007af0 <USBH_Get_CfgDesc>
 8007826:	4603      	mov	r3, r0
 8007828:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2205      	movs	r2, #5
 8007834:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007836:	e097      	b.n	8007968 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	2b03      	cmp	r3, #3
 800783c:	f040 8094 	bne.w	8007968 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007846:	3301      	adds	r3, #1
 8007848:	b2da      	uxtb	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007856:	2b03      	cmp	r3, #3
 8007858:	d903      	bls.n	8007862 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	220d      	movs	r2, #13
 800785e:	701a      	strb	r2, [r3, #0]
      break;
 8007860:	e082      	b.n	8007968 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	795b      	ldrb	r3, [r3, #5]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 ff9f 	bl	80087ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	791b      	ldrb	r3, [r3, #4]
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 ff99 	bl	80087ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
      break;
 8007886:	e06f      	b.n	8007968 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800788e:	2b00      	cmp	r3, #0
 8007890:	d019      	beq.n	80078c6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800789e:	23ff      	movs	r3, #255	; 0xff
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f949 	bl	8007b38 <USBH_Get_StringDesc>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d103      	bne.n	80078b8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2206      	movs	r2, #6
 80078b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078b6:	e059      	b.n	800796c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d156      	bne.n	800796c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2206      	movs	r2, #6
 80078c2:	705a      	strb	r2, [r3, #1]
      break;
 80078c4:	e052      	b.n	800796c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2206      	movs	r2, #6
 80078ca:	705a      	strb	r2, [r3, #1]
      break;
 80078cc:	e04e      	b.n	800796c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d019      	beq.n	800790c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078e4:	23ff      	movs	r3, #255	; 0xff
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f926 	bl	8007b38 <USBH_Get_StringDesc>
 80078ec:	4603      	mov	r3, r0
 80078ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d103      	bne.n	80078fe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2207      	movs	r2, #7
 80078fa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078fc:	e038      	b.n	8007970 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d135      	bne.n	8007970 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2207      	movs	r2, #7
 8007908:	705a      	strb	r2, [r3, #1]
      break;
 800790a:	e031      	b.n	8007970 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2207      	movs	r2, #7
 8007910:	705a      	strb	r2, [r3, #1]
      break;
 8007912:	e02d      	b.n	8007970 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800791a:	2b00      	cmp	r3, #0
 800791c:	d017      	beq.n	800794e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800792a:	23ff      	movs	r3, #255	; 0xff
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f903 	bl	8007b38 <USBH_Get_StringDesc>
 8007932:	4603      	mov	r3, r0
 8007934:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d102      	bne.n	8007942 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007940:	e018      	b.n	8007974 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b03      	cmp	r3, #3
 8007946:	d115      	bne.n	8007974 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]
      break;
 800794c:	e012      	b.n	8007974 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
      break;
 8007952:	e00f      	b.n	8007974 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007954:	bf00      	nop
 8007956:	e00e      	b.n	8007976 <USBH_HandleEnum+0x3be>
      break;
 8007958:	bf00      	nop
 800795a:	e00c      	b.n	8007976 <USBH_HandleEnum+0x3be>
      break;
 800795c:	bf00      	nop
 800795e:	e00a      	b.n	8007976 <USBH_HandleEnum+0x3be>
      break;
 8007960:	bf00      	nop
 8007962:	e008      	b.n	8007976 <USBH_HandleEnum+0x3be>
      break;
 8007964:	bf00      	nop
 8007966:	e006      	b.n	8007976 <USBH_HandleEnum+0x3be>
      break;
 8007968:	bf00      	nop
 800796a:	e004      	b.n	8007976 <USBH_HandleEnum+0x3be>
      break;
 800796c:	bf00      	nop
 800796e:	e002      	b.n	8007976 <USBH_HandleEnum+0x3be>
      break;
 8007970:	bf00      	nop
 8007972:	e000      	b.n	8007976 <USBH_HandleEnum+0x3be>
      break;
 8007974:	bf00      	nop
  }
  return Status;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f804 	bl	80079c2 <USBH_HandleSof>
}
 80079ba:	bf00      	nop
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b0b      	cmp	r3, #11
 80079d2:	d10a      	bne.n	80079ea <USBH_HandleSof+0x28>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d005      	beq.n	80079ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
  }
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007a02:	bf00      	nop
}
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a1e:	bf00      	nop
}
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f844 	bl	8008b06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	791b      	ldrb	r3, [r3, #4]
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fe91 	bl	80087ac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	795b      	ldrb	r3, [r3, #5]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fe8b 	bl	80087ac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007abe:	2100      	movs	r1, #0
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f864 	bl	8007b8e <USBH_GetDescriptor>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10a      	bne.n	8007ae6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	b292      	uxth	r2, r2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	f000 f918 	bl	8007d16 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	331c      	adds	r3, #28
 8007b00:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b02:	887b      	ldrh	r3, [r7, #2]
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f83d 	bl	8007b8e <USBH_GetDescriptor>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d107      	bne.n	8007b2e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b1e:	887b      	ldrh	r3, [r7, #2]
 8007b20:	461a      	mov	r2, r3
 8007b22:	68b9      	ldr	r1, [r7, #8]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f987 	bl	8007e38 <USBH_ParseCfgDesc>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	461a      	mov	r2, r3
 8007b44:	460b      	mov	r3, r1
 8007b46:	72fb      	strb	r3, [r7, #11]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007b4c:	7afb      	ldrb	r3, [r7, #11]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b54:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b5c:	893b      	ldrh	r3, [r7, #8]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	460b      	mov	r3, r1
 8007b62:	2100      	movs	r1, #0
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 f812 	bl	8007b8e <USBH_GetDescriptor>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d107      	bne.n	8007b84 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b7a:	893a      	ldrh	r2, [r7, #8]
 8007b7c:	6879      	ldr	r1, [r7, #4]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fb24 	bl	80081cc <USBH_ParseStringDesc>
  }

  return status;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	607b      	str	r3, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	72fb      	strb	r3, [r7, #11]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	789b      	ldrb	r3, [r3, #2]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d11c      	bne.n	8007be2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ba8:	7afb      	ldrb	r3, [r7, #11]
 8007baa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2206      	movs	r2, #6
 8007bb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	893a      	ldrh	r2, [r7, #8]
 8007bbe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007bc0:	893b      	ldrh	r3, [r7, #8]
 8007bc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bca:	d104      	bne.n	8007bd6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f240 4209 	movw	r2, #1033	; 0x409
 8007bd2:	829a      	strh	r2, [r3, #20]
 8007bd4:	e002      	b.n	8007bdc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8b3a      	ldrh	r2, [r7, #24]
 8007be0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007be2:	8b3b      	ldrh	r3, [r7, #24]
 8007be4:	461a      	mov	r2, r3
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 fb3d 	bl	8008268 <USBH_CtlReq>
 8007bee:	4603      	mov	r3, r0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	789b      	ldrb	r3, [r3, #2]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d10f      	bne.n	8007c2c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2205      	movs	r2, #5
 8007c16:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2100      	movs	r1, #0
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fb19 	bl	8008268 <USBH_CtlReq>
 8007c36:	4603      	mov	r3, r0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	789b      	ldrb	r3, [r3, #2]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d10e      	bne.n	8007c72 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2209      	movs	r2, #9
 8007c5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	887a      	ldrh	r2, [r7, #2]
 8007c64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c72:	2200      	movs	r2, #0
 8007c74:	2100      	movs	r1, #0
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 faf6 	bl	8008268 <USBH_CtlReq>
 8007c7c:	4603      	mov	r3, r0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	789b      	ldrb	r3, [r3, #2]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d10f      	bne.n	8007cba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2203      	movs	r2, #3
 8007ca4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fad2 	bl	8008268 <USBH_CtlReq>
 8007cc4:	4603      	mov	r3, r0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	789b      	ldrb	r3, [r3, #2]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d10f      	bne.n	8007d02 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007d02:	2200      	movs	r2, #0
 8007d04:	2100      	movs	r1, #0
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 faae 	bl	8008268 <USBH_CtlReq>
 8007d0c:	4603      	mov	r3, r0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b085      	sub	sp, #20
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	4613      	mov	r3, r2
 8007d22:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	781a      	ldrb	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	785a      	ldrb	r2, [r3, #1]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3302      	adds	r3, #2
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	3303      	adds	r3, #3
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	791a      	ldrb	r2, [r3, #4]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	795a      	ldrb	r2, [r3, #5]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	799a      	ldrb	r2, [r3, #6]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	79da      	ldrb	r2, [r3, #7]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	79db      	ldrb	r3, [r3, #7]
 8007d74:	2b20      	cmp	r3, #32
 8007d76:	dc11      	bgt.n	8007d9c <USBH_ParseDevDesc+0x86>
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	db16      	blt.n	8007daa <USBH_ParseDevDesc+0x94>
 8007d7c:	3b08      	subs	r3, #8
 8007d7e:	2201      	movs	r2, #1
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	bf14      	ite	ne
 8007d90:	2301      	movne	r3, #1
 8007d92:	2300      	moveq	r3, #0
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d102      	bne.n	8007da0 <USBH_ParseDevDesc+0x8a>
 8007d9a:	e006      	b.n	8007daa <USBH_ParseDevDesc+0x94>
 8007d9c:	2b40      	cmp	r3, #64	; 0x40
 8007d9e:	d104      	bne.n	8007daa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	79da      	ldrb	r2, [r3, #7]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	71da      	strb	r2, [r3, #7]
      break;
 8007da8:	e003      	b.n	8007db2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2240      	movs	r2, #64	; 0x40
 8007dae:	71da      	strb	r2, [r3, #7]
      break;
 8007db0:	bf00      	nop
  }

  if (length > 8U)
 8007db2:	88fb      	ldrh	r3, [r7, #6]
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d939      	bls.n	8007e2c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	3309      	adds	r3, #9
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	330a      	adds	r3, #10
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	330b      	adds	r3, #11
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	4313      	orrs	r3, r2
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	330c      	adds	r3, #12
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	330d      	adds	r3, #13
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	021b      	lsls	r3, r3, #8
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4313      	orrs	r3, r2
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	7b9a      	ldrb	r2, [r3, #14]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	7bda      	ldrb	r2, [r3, #15]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	7c1a      	ldrb	r2, [r3, #16]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	7c5a      	ldrb	r2, [r3, #17]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	745a      	strb	r2, [r3, #17]
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08c      	sub	sp, #48	; 0x30
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	4613      	mov	r3, r2
 8007e44:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e4c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	781a      	ldrb	r2, [r3, #0]
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	785a      	ldrb	r2, [r3, #1]
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	3302      	adds	r3, #2
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	3303      	adds	r3, #3
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e94:	bf28      	it	cs
 8007e96:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	791a      	ldrb	r2, [r3, #4]
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	795a      	ldrb	r2, [r3, #5]
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	799a      	ldrb	r2, [r3, #6]
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	79da      	ldrb	r2, [r3, #7]
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	7a1a      	ldrb	r2, [r3, #8]
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b09      	cmp	r3, #9
 8007ece:	d002      	beq.n	8007ed6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	2209      	movs	r2, #9
 8007ed4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007ed6:	88fb      	ldrh	r3, [r7, #6]
 8007ed8:	2b09      	cmp	r3, #9
 8007eda:	f240 809d 	bls.w	8008018 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007ede:	2309      	movs	r3, #9
 8007ee0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ee6:	e081      	b.n	8007fec <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ee8:	f107 0316 	add.w	r3, r7, #22
 8007eec:	4619      	mov	r1, r3
 8007eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef0:	f000 f99f 	bl	8008232 <USBH_GetNextDesc>
 8007ef4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d176      	bne.n	8007fec <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b09      	cmp	r3, #9
 8007f04:	d002      	beq.n	8007f0c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	2209      	movs	r2, #9
 8007f0a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f10:	221a      	movs	r2, #26
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
 8007f16:	3308      	adds	r3, #8
 8007f18:	6a3a      	ldr	r2, [r7, #32]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	3302      	adds	r3, #2
 8007f1e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f22:	69f8      	ldr	r0, [r7, #28]
 8007f24:	f000 f87e 	bl	8008024 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f32:	e043      	b.n	8007fbc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f34:	f107 0316 	add.w	r3, r7, #22
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3c:	f000 f979 	bl	8008232 <USBH_GetNextDesc>
 8007f40:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	d138      	bne.n	8007fbc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	795b      	ldrb	r3, [r3, #5]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d10f      	bne.n	8007f72 <USBH_ParseCfgDesc+0x13a>
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	799b      	ldrb	r3, [r3, #6]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d10b      	bne.n	8007f72 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	79db      	ldrb	r3, [r3, #7]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10f      	bne.n	8007f82 <USBH_ParseCfgDesc+0x14a>
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b09      	cmp	r3, #9
 8007f68:	d00b      	beq.n	8007f82 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	2209      	movs	r2, #9
 8007f6e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f70:	e007      	b.n	8007f82 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b07      	cmp	r3, #7
 8007f78:	d004      	beq.n	8007f84 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7c:	2207      	movs	r2, #7
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	e000      	b.n	8007f84 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f82:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f8c:	3201      	adds	r2, #1
 8007f8e:	00d2      	lsls	r2, r2, #3
 8007f90:	211a      	movs	r1, #26
 8007f92:	fb01 f303 	mul.w	r3, r1, r3
 8007f96:	4413      	add	r3, r2
 8007f98:	3308      	adds	r3, #8
 8007f9a:	6a3a      	ldr	r2, [r7, #32]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fa4:	69b9      	ldr	r1, [r7, #24]
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 f86b 	bl	8008082 <USBH_ParseEPDesc>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007fb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	791b      	ldrb	r3, [r3, #4]
 8007fc0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d204      	bcs.n	8007fd2 <USBH_ParseCfgDesc+0x19a>
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	885a      	ldrh	r2, [r3, #2]
 8007fcc:	8afb      	ldrh	r3, [r7, #22]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d8b0      	bhi.n	8007f34 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	791b      	ldrb	r3, [r3, #4]
 8007fd6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d201      	bcs.n	8007fe2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e01c      	b.n	800801c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d805      	bhi.n	8008000 <USBH_ParseCfgDesc+0x1c8>
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	885a      	ldrh	r2, [r3, #2]
 8007ff8:	8afb      	ldrh	r3, [r7, #22]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	f63f af74 	bhi.w	8007ee8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	791b      	ldrb	r3, [r3, #4]
 8008004:	2b02      	cmp	r3, #2
 8008006:	bf28      	it	cs
 8008008:	2302      	movcs	r3, #2
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008010:	429a      	cmp	r2, r3
 8008012:	d201      	bcs.n	8008018 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008014:	2303      	movs	r3, #3
 8008016:	e001      	b.n	800801c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800801c:	4618      	mov	r0, r3
 800801e:	3730      	adds	r7, #48	; 0x30
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	785a      	ldrb	r2, [r3, #1]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	789a      	ldrb	r2, [r3, #2]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	78da      	ldrb	r2, [r3, #3]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	791a      	ldrb	r2, [r3, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	795a      	ldrb	r2, [r3, #5]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	799a      	ldrb	r2, [r3, #6]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	79da      	ldrb	r2, [r3, #7]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	7a1a      	ldrb	r2, [r3, #8]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	721a      	strb	r2, [r3, #8]
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008082:	b480      	push	{r7}
 8008084:	b087      	sub	sp, #28
 8008086:	af00      	add	r7, sp, #0
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	781a      	ldrb	r2, [r3, #0]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	785a      	ldrb	r2, [r3, #1]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	789a      	ldrb	r2, [r3, #2]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	78da      	ldrb	r2, [r3, #3]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3304      	adds	r3, #4
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3305      	adds	r3, #5
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	4313      	orrs	r3, r2
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	799a      	ldrb	r2, [r3, #6]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	889b      	ldrh	r3, [r3, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d102      	bne.n	80080e4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80080de:	2303      	movs	r3, #3
 80080e0:	75fb      	strb	r3, [r7, #23]
 80080e2:	e033      	b.n	800814c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	889b      	ldrh	r3, [r3, #4]
 80080e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080ec:	f023 0307 	bic.w	r3, r3, #7
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	889b      	ldrh	r3, [r3, #4]
 80080fa:	b21a      	sxth	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3304      	adds	r3, #4
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	b299      	uxth	r1, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3305      	adds	r3, #5
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	b29b      	uxth	r3, r3
 8008110:	430b      	orrs	r3, r1
 8008112:	b29b      	uxth	r3, r3
 8008114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008118:	2b00      	cmp	r3, #0
 800811a:	d110      	bne.n	800813e <USBH_ParseEPDesc+0xbc>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3304      	adds	r3, #4
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	b299      	uxth	r1, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3305      	adds	r3, #5
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	021b      	lsls	r3, r3, #8
 800812e:	b29b      	uxth	r3, r3
 8008130:	430b      	orrs	r3, r1
 8008132:	b29b      	uxth	r3, r3
 8008134:	b21b      	sxth	r3, r3
 8008136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800813a:	b21b      	sxth	r3, r3
 800813c:	e001      	b.n	8008142 <USBH_ParseEPDesc+0xc0>
 800813e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008142:	4313      	orrs	r3, r2
 8008144:	b21b      	sxth	r3, r3
 8008146:	b29a      	uxth	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008152:	2b00      	cmp	r3, #0
 8008154:	d116      	bne.n	8008184 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	78db      	ldrb	r3, [r3, #3]
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b01      	cmp	r3, #1
 8008160:	d005      	beq.n	800816e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	78db      	ldrb	r3, [r3, #3]
 8008166:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800816a:	2b03      	cmp	r3, #3
 800816c:	d127      	bne.n	80081be <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	799b      	ldrb	r3, [r3, #6]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <USBH_ParseEPDesc+0xfc>
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	799b      	ldrb	r3, [r3, #6]
 800817a:	2b10      	cmp	r3, #16
 800817c:	d91f      	bls.n	80081be <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800817e:	2303      	movs	r3, #3
 8008180:	75fb      	strb	r3, [r7, #23]
 8008182:	e01c      	b.n	80081be <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	78db      	ldrb	r3, [r3, #3]
 8008188:	f003 0303 	and.w	r3, r3, #3
 800818c:	2b01      	cmp	r3, #1
 800818e:	d10a      	bne.n	80081a6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	799b      	ldrb	r3, [r3, #6]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <USBH_ParseEPDesc+0x11e>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	799b      	ldrb	r3, [r3, #6]
 800819c:	2b10      	cmp	r3, #16
 800819e:	d90e      	bls.n	80081be <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80081a0:	2303      	movs	r3, #3
 80081a2:	75fb      	strb	r3, [r7, #23]
 80081a4:	e00b      	b.n	80081be <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	78db      	ldrb	r3, [r3, #3]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d105      	bne.n	80081be <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	799b      	ldrb	r3, [r3, #6]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80081ba:	2303      	movs	r3, #3
 80081bc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80081be:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	371c      	adds	r7, #28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3301      	adds	r3, #1
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d120      	bne.n	8008226 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	1e9a      	subs	r2, r3, #2
 80081ea:	88fb      	ldrh	r3, [r7, #6]
 80081ec:	4293      	cmp	r3, r2
 80081ee:	bf28      	it	cs
 80081f0:	4613      	movcs	r3, r2
 80081f2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3302      	adds	r3, #2
 80081f8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80081fa:	2300      	movs	r3, #0
 80081fc:	82fb      	strh	r3, [r7, #22]
 80081fe:	e00b      	b.n	8008218 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008200:	8afb      	ldrh	r3, [r7, #22]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4413      	add	r3, r2
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	3301      	adds	r3, #1
 8008210:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008212:	8afb      	ldrh	r3, [r7, #22]
 8008214:	3302      	adds	r3, #2
 8008216:	82fb      	strh	r3, [r7, #22]
 8008218:	8afa      	ldrh	r2, [r7, #22]
 800821a:	8abb      	ldrh	r3, [r7, #20]
 800821c:	429a      	cmp	r2, r3
 800821e:	d3ef      	bcc.n	8008200 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]
  }
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008232:	b480      	push	{r7}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	881a      	ldrh	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	b29b      	uxth	r3, r3
 8008246:	4413      	add	r3, r2
 8008248:	b29a      	uxth	r2, r3
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4413      	add	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800825a:	68fb      	ldr	r3, [r7, #12]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008276:	2301      	movs	r3, #1
 8008278:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	789b      	ldrb	r3, [r3, #2]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d002      	beq.n	8008288 <USBH_CtlReq+0x20>
 8008282:	2b02      	cmp	r3, #2
 8008284:	d00f      	beq.n	80082a6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008286:	e027      	b.n	80082d8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2202      	movs	r2, #2
 800829e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80082a0:	2301      	movs	r3, #1
 80082a2:	75fb      	strb	r3, [r7, #23]
      break;
 80082a4:	e018      	b.n	80082d8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f81c 	bl	80082e4 <USBH_HandleControl>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <USBH_CtlReq+0x54>
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d106      	bne.n	80082ca <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2201      	movs	r2, #1
 80082c0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	761a      	strb	r2, [r3, #24]
      break;
 80082c8:	e005      	b.n	80082d6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d102      	bne.n	80082d6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2201      	movs	r2, #1
 80082d4:	709a      	strb	r2, [r3, #2]
      break;
 80082d6:	bf00      	nop
  }
  return status;
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80082ec:	2301      	movs	r3, #1
 80082ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	7e1b      	ldrb	r3, [r3, #24]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	2b0a      	cmp	r3, #10
 80082fc:	f200 8156 	bhi.w	80085ac <USBH_HandleControl+0x2c8>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <USBH_HandleControl+0x24>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008335 	.word	0x08008335
 800830c:	0800834f 	.word	0x0800834f
 8008310:	080083b9 	.word	0x080083b9
 8008314:	080083df 	.word	0x080083df
 8008318:	08008417 	.word	0x08008417
 800831c:	08008441 	.word	0x08008441
 8008320:	08008493 	.word	0x08008493
 8008324:	080084b5 	.word	0x080084b5
 8008328:	080084f1 	.word	0x080084f1
 800832c:	08008517 	.word	0x08008517
 8008330:	08008555 	.word	0x08008555
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f103 0110 	add.w	r1, r3, #16
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	795b      	ldrb	r3, [r3, #5]
 800833e:	461a      	mov	r2, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f943 	bl	80085cc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2202      	movs	r2, #2
 800834a:	761a      	strb	r2, [r3, #24]
      break;
 800834c:	e139      	b.n	80085c2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	795b      	ldrb	r3, [r3, #5]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fcc5 	bl	8008ce4 <USBH_LL_GetURBState>
 800835a:	4603      	mov	r3, r0
 800835c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d11e      	bne.n	80083a2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	7c1b      	ldrb	r3, [r3, #16]
 8008368:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800836c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	8adb      	ldrh	r3, [r3, #22]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008376:	7b7b      	ldrb	r3, [r7, #13]
 8008378:	2b80      	cmp	r3, #128	; 0x80
 800837a:	d103      	bne.n	8008384 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2203      	movs	r2, #3
 8008380:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008382:	e115      	b.n	80085b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2205      	movs	r2, #5
 8008388:	761a      	strb	r2, [r3, #24]
      break;
 800838a:	e111      	b.n	80085b0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800838c:	7b7b      	ldrb	r3, [r7, #13]
 800838e:	2b80      	cmp	r3, #128	; 0x80
 8008390:	d103      	bne.n	800839a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2209      	movs	r2, #9
 8008396:	761a      	strb	r2, [r3, #24]
      break;
 8008398:	e10a      	b.n	80085b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2207      	movs	r2, #7
 800839e:	761a      	strb	r2, [r3, #24]
      break;
 80083a0:	e106      	b.n	80085b0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d003      	beq.n	80083b0 <USBH_HandleControl+0xcc>
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	f040 8100 	bne.w	80085b0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	220b      	movs	r2, #11
 80083b4:	761a      	strb	r2, [r3, #24]
      break;
 80083b6:	e0fb      	b.n	80085b0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083be:	b29a      	uxth	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6899      	ldr	r1, [r3, #8]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	899a      	ldrh	r2, [r3, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	791b      	ldrb	r3, [r3, #4]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f93a 	bl	800864a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2204      	movs	r2, #4
 80083da:	761a      	strb	r2, [r3, #24]
      break;
 80083dc:	e0f1      	b.n	80085c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	791b      	ldrb	r3, [r3, #4]
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fc7d 	bl	8008ce4 <USBH_LL_GetURBState>
 80083ea:	4603      	mov	r3, r0
 80083ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d102      	bne.n	80083fa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2209      	movs	r2, #9
 80083f8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b05      	cmp	r3, #5
 80083fe:	d102      	bne.n	8008406 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008400:	2303      	movs	r3, #3
 8008402:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008404:	e0d6      	b.n	80085b4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b04      	cmp	r3, #4
 800840a:	f040 80d3 	bne.w	80085b4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	220b      	movs	r2, #11
 8008412:	761a      	strb	r2, [r3, #24]
      break;
 8008414:	e0ce      	b.n	80085b4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6899      	ldr	r1, [r3, #8]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	899a      	ldrh	r2, [r3, #12]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	795b      	ldrb	r3, [r3, #5]
 8008422:	2001      	movs	r0, #1
 8008424:	9000      	str	r0, [sp, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f8ea 	bl	8008600 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008432:	b29a      	uxth	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2206      	movs	r2, #6
 800843c:	761a      	strb	r2, [r3, #24]
      break;
 800843e:	e0c0      	b.n	80085c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	795b      	ldrb	r3, [r3, #5]
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fc4c 	bl	8008ce4 <USBH_LL_GetURBState>
 800844c:	4603      	mov	r3, r0
 800844e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d103      	bne.n	800845e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2207      	movs	r2, #7
 800845a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800845c:	e0ac      	b.n	80085b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	2b05      	cmp	r3, #5
 8008462:	d105      	bne.n	8008470 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	220c      	movs	r2, #12
 8008468:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800846a:	2303      	movs	r3, #3
 800846c:	73fb      	strb	r3, [r7, #15]
      break;
 800846e:	e0a3      	b.n	80085b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	2b02      	cmp	r3, #2
 8008474:	d103      	bne.n	800847e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2205      	movs	r2, #5
 800847a:	761a      	strb	r2, [r3, #24]
      break;
 800847c:	e09c      	b.n	80085b8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	2b04      	cmp	r3, #4
 8008482:	f040 8099 	bne.w	80085b8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	220b      	movs	r2, #11
 800848a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800848c:	2302      	movs	r3, #2
 800848e:	73fb      	strb	r3, [r7, #15]
      break;
 8008490:	e092      	b.n	80085b8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	791b      	ldrb	r3, [r3, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	2100      	movs	r1, #0
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f8d5 	bl	800864a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2208      	movs	r2, #8
 80084b0:	761a      	strb	r2, [r3, #24]

      break;
 80084b2:	e086      	b.n	80085c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	791b      	ldrb	r3, [r3, #4]
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fc12 	bl	8008ce4 <USBH_LL_GetURBState>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d105      	bne.n	80084d6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	220d      	movs	r2, #13
 80084ce:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084d4:	e072      	b.n	80085bc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d103      	bne.n	80084e4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	220b      	movs	r2, #11
 80084e0:	761a      	strb	r2, [r3, #24]
      break;
 80084e2:	e06b      	b.n	80085bc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d168      	bne.n	80085bc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80084ea:	2303      	movs	r3, #3
 80084ec:	73fb      	strb	r3, [r7, #15]
      break;
 80084ee:	e065      	b.n	80085bc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	795b      	ldrb	r3, [r3, #5]
 80084f4:	2201      	movs	r2, #1
 80084f6:	9200      	str	r2, [sp, #0]
 80084f8:	2200      	movs	r2, #0
 80084fa:	2100      	movs	r1, #0
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f87f 	bl	8008600 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008508:	b29a      	uxth	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	220a      	movs	r2, #10
 8008512:	761a      	strb	r2, [r3, #24]
      break;
 8008514:	e055      	b.n	80085c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	795b      	ldrb	r3, [r3, #5]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fbe1 	bl	8008ce4 <USBH_LL_GetURBState>
 8008522:	4603      	mov	r3, r0
 8008524:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d105      	bne.n	8008538 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	220d      	movs	r2, #13
 8008534:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008536:	e043      	b.n	80085c0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d103      	bne.n	8008546 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2209      	movs	r2, #9
 8008542:	761a      	strb	r2, [r3, #24]
      break;
 8008544:	e03c      	b.n	80085c0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b04      	cmp	r3, #4
 800854a:	d139      	bne.n	80085c0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	220b      	movs	r2, #11
 8008550:	761a      	strb	r2, [r3, #24]
      break;
 8008552:	e035      	b.n	80085c0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7e5b      	ldrb	r3, [r3, #25]
 8008558:	3301      	adds	r3, #1
 800855a:	b2da      	uxtb	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	765a      	strb	r2, [r3, #25]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	7e5b      	ldrb	r3, [r3, #25]
 8008564:	2b02      	cmp	r3, #2
 8008566:	d806      	bhi.n	8008576 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008574:	e025      	b.n	80085c2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800857c:	2106      	movs	r1, #6
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	795b      	ldrb	r3, [r3, #5]
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f90c 	bl	80087ac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	791b      	ldrb	r3, [r3, #4]
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f906 	bl	80087ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80085a6:	2302      	movs	r3, #2
 80085a8:	73fb      	strb	r3, [r7, #15]
      break;
 80085aa:	e00a      	b.n	80085c2 <USBH_HandleControl+0x2de>

    default:
      break;
 80085ac:	bf00      	nop
 80085ae:	e008      	b.n	80085c2 <USBH_HandleControl+0x2de>
      break;
 80085b0:	bf00      	nop
 80085b2:	e006      	b.n	80085c2 <USBH_HandleControl+0x2de>
      break;
 80085b4:	bf00      	nop
 80085b6:	e004      	b.n	80085c2 <USBH_HandleControl+0x2de>
      break;
 80085b8:	bf00      	nop
 80085ba:	e002      	b.n	80085c2 <USBH_HandleControl+0x2de>
      break;
 80085bc:	bf00      	nop
 80085be:	e000      	b.n	80085c2 <USBH_HandleControl+0x2de>
      break;
 80085c0:	bf00      	nop
  }

  return status;
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af04      	add	r7, sp, #16
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085da:	79f9      	ldrb	r1, [r7, #7]
 80085dc:	2300      	movs	r3, #0
 80085de:	9303      	str	r3, [sp, #12]
 80085e0:	2308      	movs	r3, #8
 80085e2:	9302      	str	r3, [sp, #8]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	2300      	movs	r3, #0
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2300      	movs	r3, #0
 80085ee:	2200      	movs	r2, #0
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fb46 	bl	8008c82 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af04      	add	r7, sp, #16
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4611      	mov	r1, r2
 800860c:	461a      	mov	r2, r3
 800860e:	460b      	mov	r3, r1
 8008610:	80fb      	strh	r3, [r7, #6]
 8008612:	4613      	mov	r3, r2
 8008614:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008624:	7979      	ldrb	r1, [r7, #5]
 8008626:	7e3b      	ldrb	r3, [r7, #24]
 8008628:	9303      	str	r3, [sp, #12]
 800862a:	88fb      	ldrh	r3, [r7, #6]
 800862c:	9302      	str	r3, [sp, #8]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	2301      	movs	r3, #1
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	2300      	movs	r3, #0
 8008638:	2200      	movs	r2, #0
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 fb21 	bl	8008c82 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b088      	sub	sp, #32
 800864e:	af04      	add	r7, sp, #16
 8008650:	60f8      	str	r0, [r7, #12]
 8008652:	60b9      	str	r1, [r7, #8]
 8008654:	4611      	mov	r1, r2
 8008656:	461a      	mov	r2, r3
 8008658:	460b      	mov	r3, r1
 800865a:	80fb      	strh	r3, [r7, #6]
 800865c:	4613      	mov	r3, r2
 800865e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008660:	7979      	ldrb	r1, [r7, #5]
 8008662:	2300      	movs	r3, #0
 8008664:	9303      	str	r3, [sp, #12]
 8008666:	88fb      	ldrh	r3, [r7, #6]
 8008668:	9302      	str	r3, [sp, #8]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	9301      	str	r3, [sp, #4]
 800866e:	2301      	movs	r3, #1
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	2300      	movs	r3, #0
 8008674:	2201      	movs	r2, #1
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 fb03 	bl	8008c82 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800867c:	2300      	movs	r3, #0

}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b088      	sub	sp, #32
 800868a:	af04      	add	r7, sp, #16
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	4611      	mov	r1, r2
 8008692:	461a      	mov	r2, r3
 8008694:	460b      	mov	r3, r1
 8008696:	80fb      	strh	r3, [r7, #6]
 8008698:	4613      	mov	r3, r2
 800869a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086aa:	7979      	ldrb	r1, [r7, #5]
 80086ac:	7e3b      	ldrb	r3, [r7, #24]
 80086ae:	9303      	str	r3, [sp, #12]
 80086b0:	88fb      	ldrh	r3, [r7, #6]
 80086b2:	9302      	str	r3, [sp, #8]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	9301      	str	r3, [sp, #4]
 80086b8:	2301      	movs	r3, #1
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	2302      	movs	r3, #2
 80086be:	2200      	movs	r2, #0
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 fade 	bl	8008c82 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af04      	add	r7, sp, #16
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	4611      	mov	r1, r2
 80086dc:	461a      	mov	r2, r3
 80086de:	460b      	mov	r3, r1
 80086e0:	80fb      	strh	r3, [r7, #6]
 80086e2:	4613      	mov	r3, r2
 80086e4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086e6:	7979      	ldrb	r1, [r7, #5]
 80086e8:	2300      	movs	r3, #0
 80086ea:	9303      	str	r3, [sp, #12]
 80086ec:	88fb      	ldrh	r3, [r7, #6]
 80086ee:	9302      	str	r3, [sp, #8]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	2301      	movs	r3, #1
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	2302      	movs	r3, #2
 80086fa:	2201      	movs	r2, #1
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fac0 	bl	8008c82 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af04      	add	r7, sp, #16
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	4608      	mov	r0, r1
 8008716:	4611      	mov	r1, r2
 8008718:	461a      	mov	r2, r3
 800871a:	4603      	mov	r3, r0
 800871c:	70fb      	strb	r3, [r7, #3]
 800871e:	460b      	mov	r3, r1
 8008720:	70bb      	strb	r3, [r7, #2]
 8008722:	4613      	mov	r3, r2
 8008724:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008726:	7878      	ldrb	r0, [r7, #1]
 8008728:	78ba      	ldrb	r2, [r7, #2]
 800872a:	78f9      	ldrb	r1, [r7, #3]
 800872c:	8b3b      	ldrh	r3, [r7, #24]
 800872e:	9302      	str	r3, [sp, #8]
 8008730:	7d3b      	ldrb	r3, [r7, #20]
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	7c3b      	ldrb	r3, [r7, #16]
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	4603      	mov	r3, r0
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fa53 	bl	8008be6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fa72 	bl	8008c44 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	460b      	mov	r3, r1
 8008774:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f836 	bl	80087e8 <USBH_GetFreePipe>
 800877c:	4603      	mov	r3, r0
 800877e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008780:	89fb      	ldrh	r3, [r7, #14]
 8008782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008786:	4293      	cmp	r3, r2
 8008788:	d00a      	beq.n	80087a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800878a:	78fa      	ldrb	r2, [r7, #3]
 800878c:	89fb      	ldrh	r3, [r7, #14]
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	33e0      	adds	r3, #224	; 0xe0
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	440b      	add	r3, r1
 800879e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80087a0:	89fb      	ldrh	r3, [r7, #14]
 80087a2:	b2db      	uxtb	r3, r3
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	2b0f      	cmp	r3, #15
 80087bc:	d80d      	bhi.n	80087da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	33e0      	adds	r3, #224	; 0xe0
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087d0:	6879      	ldr	r1, [r7, #4]
 80087d2:	33e0      	adds	r3, #224	; 0xe0
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087f4:	2300      	movs	r3, #0
 80087f6:	73fb      	strb	r3, [r7, #15]
 80087f8:	e00f      	b.n	800881a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	33e0      	adds	r3, #224	; 0xe0
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d102      	bne.n	8008814 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	b29b      	uxth	r3, r3
 8008812:	e007      	b.n	8008824 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	3301      	adds	r3, #1
 8008818:	73fb      	strb	r3, [r7, #15]
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	2b0f      	cmp	r3, #15
 800881e:	d9ec      	bls.n	80087fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008820:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008834:	2201      	movs	r2, #1
 8008836:	490e      	ldr	r1, [pc, #56]	; (8008870 <MX_USB_HOST_Init+0x40>)
 8008838:	480e      	ldr	r0, [pc, #56]	; (8008874 <MX_USB_HOST_Init+0x44>)
 800883a:	f7fe fba7 	bl	8006f8c <USBH_Init>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008844:	f7f8 fc06 	bl	8001054 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008848:	490b      	ldr	r1, [pc, #44]	; (8008878 <MX_USB_HOST_Init+0x48>)
 800884a:	480a      	ldr	r0, [pc, #40]	; (8008874 <MX_USB_HOST_Init+0x44>)
 800884c:	f7fe fc2c 	bl	80070a8 <USBH_RegisterClass>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008856:	f7f8 fbfd 	bl	8001054 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800885a:	4806      	ldr	r0, [pc, #24]	; (8008874 <MX_USB_HOST_Init+0x44>)
 800885c:	f7fe fcb0 	bl	80071c0 <USBH_Start>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008866:	f7f8 fbf5 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800886a:	bf00      	nop
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	08008891 	.word	0x08008891
 8008874:	20000400 	.word	0x20000400
 8008878:	20000180 	.word	0x20000180

0800887c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008880:	4802      	ldr	r0, [pc, #8]	; (800888c <MX_USB_HOST_Process+0x10>)
 8008882:	f7fe fcad 	bl	80071e0 <USBH_Process>
}
 8008886:	bf00      	nop
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20000400 	.word	0x20000400

08008890 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	3b01      	subs	r3, #1
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d819      	bhi.n	80088d8 <USBH_UserProcess+0x48>
 80088a4:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <USBH_UserProcess+0x1c>)
 80088a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088aa:	bf00      	nop
 80088ac:	080088d9 	.word	0x080088d9
 80088b0:	080088c9 	.word	0x080088c9
 80088b4:	080088d9 	.word	0x080088d9
 80088b8:	080088d1 	.word	0x080088d1
 80088bc:	080088c1 	.word	0x080088c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80088c0:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <USBH_UserProcess+0x58>)
 80088c2:	2203      	movs	r2, #3
 80088c4:	701a      	strb	r2, [r3, #0]
  break;
 80088c6:	e008      	b.n	80088da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80088c8:	4b07      	ldr	r3, [pc, #28]	; (80088e8 <USBH_UserProcess+0x58>)
 80088ca:	2202      	movs	r2, #2
 80088cc:	701a      	strb	r2, [r3, #0]
  break;
 80088ce:	e004      	b.n	80088da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80088d0:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <USBH_UserProcess+0x58>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	701a      	strb	r2, [r3, #0]
  break;
 80088d6:	e000      	b.n	80088da <USBH_UserProcess+0x4a>

  default:
  break;
 80088d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	200007d8 	.word	0x200007d8

080088ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08a      	sub	sp, #40	; 0x28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088f4:	f107 0314 	add.w	r3, r7, #20
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	605a      	str	r2, [r3, #4]
 80088fe:	609a      	str	r2, [r3, #8]
 8008900:	60da      	str	r2, [r3, #12]
 8008902:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800890c:	d147      	bne.n	800899e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800890e:	2300      	movs	r3, #0
 8008910:	613b      	str	r3, [r7, #16]
 8008912:	4b25      	ldr	r3, [pc, #148]	; (80089a8 <HAL_HCD_MspInit+0xbc>)
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	4a24      	ldr	r2, [pc, #144]	; (80089a8 <HAL_HCD_MspInit+0xbc>)
 8008918:	f043 0301 	orr.w	r3, r3, #1
 800891c:	6313      	str	r3, [r2, #48]	; 0x30
 800891e:	4b22      	ldr	r3, [pc, #136]	; (80089a8 <HAL_HCD_MspInit+0xbc>)
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	613b      	str	r3, [r7, #16]
 8008928:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800892a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800892e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008930:	2300      	movs	r3, #0
 8008932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008934:	2300      	movs	r3, #0
 8008936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008938:	f107 0314 	add.w	r3, r7, #20
 800893c:	4619      	mov	r1, r3
 800893e:	481b      	ldr	r0, [pc, #108]	; (80089ac <HAL_HCD_MspInit+0xc0>)
 8008940:	f7f8 ffd8 	bl	80018f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008944:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800894a:	2302      	movs	r3, #2
 800894c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800894e:	2300      	movs	r3, #0
 8008950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008952:	2300      	movs	r3, #0
 8008954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008956:	230a      	movs	r3, #10
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800895a:	f107 0314 	add.w	r3, r7, #20
 800895e:	4619      	mov	r1, r3
 8008960:	4812      	ldr	r0, [pc, #72]	; (80089ac <HAL_HCD_MspInit+0xc0>)
 8008962:	f7f8 ffc7 	bl	80018f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008966:	4b10      	ldr	r3, [pc, #64]	; (80089a8 <HAL_HCD_MspInit+0xbc>)
 8008968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896a:	4a0f      	ldr	r2, [pc, #60]	; (80089a8 <HAL_HCD_MspInit+0xbc>)
 800896c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008970:	6353      	str	r3, [r2, #52]	; 0x34
 8008972:	2300      	movs	r3, #0
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	4b0c      	ldr	r3, [pc, #48]	; (80089a8 <HAL_HCD_MspInit+0xbc>)
 8008978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897a:	4a0b      	ldr	r2, [pc, #44]	; (80089a8 <HAL_HCD_MspInit+0xbc>)
 800897c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008980:	6453      	str	r3, [r2, #68]	; 0x44
 8008982:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <HAL_HCD_MspInit+0xbc>)
 8008984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800898e:	2200      	movs	r2, #0
 8008990:	2100      	movs	r1, #0
 8008992:	2043      	movs	r0, #67	; 0x43
 8008994:	f7f8 ff77 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008998:	2043      	movs	r0, #67	; 0x43
 800899a:	f7f8 ff90 	bl	80018be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800899e:	bf00      	nop
 80089a0:	3728      	adds	r7, #40	; 0x28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	40023800 	.word	0x40023800
 80089ac:	40020000 	.word	0x40020000

080089b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe ffed 	bl	800799e <USBH_LL_IncTimer>
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff f825 	bl	8007a2a <USBH_LL_Connect>
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7ff f82e 	bl	8007a58 <USBH_LL_Disconnect>
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
 8008a10:	4613      	mov	r3, r2
 8008a12:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe ffdf 	bl	80079f2 <USBH_LL_PortEnabled>
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe ffdf 	bl	8007a0e <USBH_LL_PortDisabled>
}
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d12a      	bne.n	8008ac0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a6a:	4a18      	ldr	r2, [pc, #96]	; (8008acc <USBH_LL_Init+0x74>)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a15      	ldr	r2, [pc, #84]	; (8008acc <USBH_LL_Init+0x74>)
 8008a76:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a7a:	4b14      	ldr	r3, [pc, #80]	; (8008acc <USBH_LL_Init+0x74>)
 8008a7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a80:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a82:	4b12      	ldr	r3, [pc, #72]	; (8008acc <USBH_LL_Init+0x74>)
 8008a84:	2208      	movs	r2, #8
 8008a86:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a88:	4b10      	ldr	r3, [pc, #64]	; (8008acc <USBH_LL_Init+0x74>)
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <USBH_LL_Init+0x74>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a94:	4b0d      	ldr	r3, [pc, #52]	; (8008acc <USBH_LL_Init+0x74>)
 8008a96:	2202      	movs	r2, #2
 8008a98:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a9a:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <USBH_LL_Init+0x74>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008aa0:	480a      	ldr	r0, [pc, #40]	; (8008acc <USBH_LL_Init+0x74>)
 8008aa2:	f7f9 f90d 	bl	8001cc0 <HAL_HCD_Init>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008aac:	f7f8 fad2 	bl	8001054 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ab0:	4806      	ldr	r0, [pc, #24]	; (8008acc <USBH_LL_Init+0x74>)
 8008ab2:	f7f9 fcf0 	bl	8002496 <HAL_HCD_GetCurrentFrame>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7fe ff60 	bl	8007980 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	200007dc 	.word	0x200007dc

08008ad0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7f9 fc5f 	bl	80023aa <HAL_HCD_Start>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f95c 	bl	8008db0 <USBH_Get_USB_Status>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7f9 fc67 	bl	80023f0 <HAL_HCD_Stop>
 8008b22:	4603      	mov	r3, r0
 8008b24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 f941 	bl	8008db0 <USBH_Get_USB_Status>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b44:	2301      	movs	r3, #1
 8008b46:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7f9 fcaf 	bl	80024b2 <HAL_HCD_GetCurrentSpeed>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d00c      	beq.n	8008b74 <USBH_LL_GetSpeed+0x38>
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d80d      	bhi.n	8008b7a <USBH_LL_GetSpeed+0x3e>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <USBH_LL_GetSpeed+0x2c>
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d003      	beq.n	8008b6e <USBH_LL_GetSpeed+0x32>
 8008b66:	e008      	b.n	8008b7a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6c:	e008      	b.n	8008b80 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	73fb      	strb	r3, [r7, #15]
    break;
 8008b72:	e005      	b.n	8008b80 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b74:	2302      	movs	r3, #2
 8008b76:	73fb      	strb	r3, [r7, #15]
    break;
 8008b78:	e002      	b.n	8008b80 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7e:	bf00      	nop
  }
  return  speed;
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7f9 fc42 	bl	800242a <HAL_HCD_ResetPort>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 f8ff 	bl	8008db0 <USBH_Get_USB_Status>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bd2:	78fa      	ldrb	r2, [r7, #3]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7f9 fc49 	bl	800246e <HAL_HCD_HC_GetXferCount>
 8008bdc:	4603      	mov	r3, r0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008be6:	b590      	push	{r4, r7, lr}
 8008be8:	b089      	sub	sp, #36	; 0x24
 8008bea:	af04      	add	r7, sp, #16
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	4608      	mov	r0, r1
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	70fb      	strb	r3, [r7, #3]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70bb      	strb	r3, [r7, #2]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c0e:	787c      	ldrb	r4, [r7, #1]
 8008c10:	78ba      	ldrb	r2, [r7, #2]
 8008c12:	78f9      	ldrb	r1, [r7, #3]
 8008c14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c16:	9302      	str	r3, [sp, #8]
 8008c18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	4623      	mov	r3, r4
 8008c26:	f7f9 f8ad 	bl	8001d84 <HAL_HCD_HC_Init>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 f8bd 	bl	8008db0 <USBH_Get_USB_Status>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd90      	pop	{r4, r7, pc}

08008c44 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	4611      	mov	r1, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7f9 f91d 	bl	8001ea2 <HAL_HCD_HC_Halt>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f89e 	bl	8008db0 <USBH_Get_USB_Status>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c82:	b590      	push	{r4, r7, lr}
 8008c84:	b089      	sub	sp, #36	; 0x24
 8008c86:	af04      	add	r7, sp, #16
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	4608      	mov	r0, r1
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	461a      	mov	r2, r3
 8008c90:	4603      	mov	r3, r0
 8008c92:	70fb      	strb	r3, [r7, #3]
 8008c94:	460b      	mov	r3, r1
 8008c96:	70bb      	strb	r3, [r7, #2]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008caa:	787c      	ldrb	r4, [r7, #1]
 8008cac:	78ba      	ldrb	r2, [r7, #2]
 8008cae:	78f9      	ldrb	r1, [r7, #3]
 8008cb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008cb4:	9303      	str	r3, [sp, #12]
 8008cb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cb8:	9302      	str	r3, [sp, #8]
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4623      	mov	r3, r4
 8008cc6:	f7f9 f90f 	bl	8001ee8 <HAL_HCD_HC_SubmitRequest>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 f86d 	bl	8008db0 <USBH_Get_USB_Status>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd90      	pop	{r4, r7, pc}

08008ce4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cf6:	78fa      	ldrb	r2, [r7, #3]
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7f9 fba3 	bl	8002446 <HAL_HCD_HC_GetURBState>
 8008d00:	4603      	mov	r3, r0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b082      	sub	sp, #8
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	460b      	mov	r3, r1
 8008d14:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d103      	bne.n	8008d28 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f870 	bl	8008e08 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008d28:	20c8      	movs	r0, #200	; 0xc8
 8008d2a:	f7f8 fcad 	bl	8001688 <HAL_Delay>
  return USBH_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	70fb      	strb	r3, [r7, #3]
 8008d44:	4613      	mov	r3, r2
 8008d46:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d4e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	212c      	movs	r1, #44	; 0x2c
 8008d56:	fb01 f303 	mul.w	r3, r1, r3
 8008d5a:	4413      	add	r3, r2
 8008d5c:	333b      	adds	r3, #59	; 0x3b
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d009      	beq.n	8008d78 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	212c      	movs	r1, #44	; 0x2c
 8008d6a:	fb01 f303 	mul.w	r3, r1, r3
 8008d6e:	4413      	add	r3, r2
 8008d70:	3354      	adds	r3, #84	; 0x54
 8008d72:	78ba      	ldrb	r2, [r7, #2]
 8008d74:	701a      	strb	r2, [r3, #0]
 8008d76:	e008      	b.n	8008d8a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d78:	78fb      	ldrb	r3, [r7, #3]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	212c      	movs	r1, #44	; 0x2c
 8008d7e:	fb01 f303 	mul.w	r3, r1, r3
 8008d82:	4413      	add	r3, r2
 8008d84:	3355      	adds	r3, #85	; 0x55
 8008d86:	78ba      	ldrb	r2, [r7, #2]
 8008d88:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7f8 fc71 	bl	8001688 <HAL_Delay>
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d817      	bhi.n	8008df4 <USBH_Get_USB_Status+0x44>
 8008dc4:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <USBH_Get_USB_Status+0x1c>)
 8008dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dca:	bf00      	nop
 8008dcc:	08008ddd 	.word	0x08008ddd
 8008dd0:	08008de3 	.word	0x08008de3
 8008dd4:	08008de9 	.word	0x08008de9
 8008dd8:	08008def 	.word	0x08008def
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]
    break;
 8008de0:	e00b      	b.n	8008dfa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008de2:	2302      	movs	r3, #2
 8008de4:	73fb      	strb	r3, [r7, #15]
    break;
 8008de6:	e008      	b.n	8008dfa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008de8:	2301      	movs	r3, #1
 8008dea:	73fb      	strb	r3, [r7, #15]
    break;
 8008dec:	e005      	b.n	8008dfa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008dee:	2302      	movs	r3, #2
 8008df0:	73fb      	strb	r3, [r7, #15]
    break;
 8008df2:	e002      	b.n	8008dfa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008df4:	2302      	movs	r3, #2
 8008df6:	73fb      	strb	r3, [r7, #15]
    break;
 8008df8:	bf00      	nop
  }
  return usb_status;
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	73fb      	strb	r3, [r7, #15]
 8008e20:	e001      	b.n	8008e26 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008e22:	2301      	movs	r3, #1
 8008e24:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	4803      	ldr	r0, [pc, #12]	; (8008e3c <MX_DriverVbusFS+0x34>)
 8008e2e:	f7f8 ff15 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8008e32:	bf00      	nop
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	40020800 	.word	0x40020800

08008e40 <__errno>:
 8008e40:	4b01      	ldr	r3, [pc, #4]	; (8008e48 <__errno+0x8>)
 8008e42:	6818      	ldr	r0, [r3, #0]
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	200001a0 	.word	0x200001a0

08008e4c <__libc_init_array>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	4d0d      	ldr	r5, [pc, #52]	; (8008e84 <__libc_init_array+0x38>)
 8008e50:	4c0d      	ldr	r4, [pc, #52]	; (8008e88 <__libc_init_array+0x3c>)
 8008e52:	1b64      	subs	r4, r4, r5
 8008e54:	10a4      	asrs	r4, r4, #2
 8008e56:	2600      	movs	r6, #0
 8008e58:	42a6      	cmp	r6, r4
 8008e5a:	d109      	bne.n	8008e70 <__libc_init_array+0x24>
 8008e5c:	4d0b      	ldr	r5, [pc, #44]	; (8008e8c <__libc_init_array+0x40>)
 8008e5e:	4c0c      	ldr	r4, [pc, #48]	; (8008e90 <__libc_init_array+0x44>)
 8008e60:	f000 f92e 	bl	80090c0 <_init>
 8008e64:	1b64      	subs	r4, r4, r5
 8008e66:	10a4      	asrs	r4, r4, #2
 8008e68:	2600      	movs	r6, #0
 8008e6a:	42a6      	cmp	r6, r4
 8008e6c:	d105      	bne.n	8008e7a <__libc_init_array+0x2e>
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e74:	4798      	blx	r3
 8008e76:	3601      	adds	r6, #1
 8008e78:	e7ee      	b.n	8008e58 <__libc_init_array+0xc>
 8008e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e7e:	4798      	blx	r3
 8008e80:	3601      	adds	r6, #1
 8008e82:	e7f2      	b.n	8008e6a <__libc_init_array+0x1e>
 8008e84:	080090fc 	.word	0x080090fc
 8008e88:	080090fc 	.word	0x080090fc
 8008e8c:	080090fc 	.word	0x080090fc
 8008e90:	08009100 	.word	0x08009100

08008e94 <malloc>:
 8008e94:	4b02      	ldr	r3, [pc, #8]	; (8008ea0 <malloc+0xc>)
 8008e96:	4601      	mov	r1, r0
 8008e98:	6818      	ldr	r0, [r3, #0]
 8008e9a:	f000 b87f 	b.w	8008f9c <_malloc_r>
 8008e9e:	bf00      	nop
 8008ea0:	200001a0 	.word	0x200001a0

08008ea4 <free>:
 8008ea4:	4b02      	ldr	r3, [pc, #8]	; (8008eb0 <free+0xc>)
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	f000 b80b 	b.w	8008ec4 <_free_r>
 8008eae:	bf00      	nop
 8008eb0:	200001a0 	.word	0x200001a0

08008eb4 <memset>:
 8008eb4:	4402      	add	r2, r0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d100      	bne.n	8008ebe <memset+0xa>
 8008ebc:	4770      	bx	lr
 8008ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec2:	e7f9      	b.n	8008eb8 <memset+0x4>

08008ec4 <_free_r>:
 8008ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ec6:	2900      	cmp	r1, #0
 8008ec8:	d044      	beq.n	8008f54 <_free_r+0x90>
 8008eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ece:	9001      	str	r0, [sp, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ed6:	bfb8      	it	lt
 8008ed8:	18e4      	addlt	r4, r4, r3
 8008eda:	f000 f8e3 	bl	80090a4 <__malloc_lock>
 8008ede:	4a1e      	ldr	r2, [pc, #120]	; (8008f58 <_free_r+0x94>)
 8008ee0:	9801      	ldr	r0, [sp, #4]
 8008ee2:	6813      	ldr	r3, [r2, #0]
 8008ee4:	b933      	cbnz	r3, 8008ef4 <_free_r+0x30>
 8008ee6:	6063      	str	r3, [r4, #4]
 8008ee8:	6014      	str	r4, [r2, #0]
 8008eea:	b003      	add	sp, #12
 8008eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef0:	f000 b8de 	b.w	80090b0 <__malloc_unlock>
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	d908      	bls.n	8008f0a <_free_r+0x46>
 8008ef8:	6825      	ldr	r5, [r4, #0]
 8008efa:	1961      	adds	r1, r4, r5
 8008efc:	428b      	cmp	r3, r1
 8008efe:	bf01      	itttt	eq
 8008f00:	6819      	ldreq	r1, [r3, #0]
 8008f02:	685b      	ldreq	r3, [r3, #4]
 8008f04:	1949      	addeq	r1, r1, r5
 8008f06:	6021      	streq	r1, [r4, #0]
 8008f08:	e7ed      	b.n	8008ee6 <_free_r+0x22>
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	b10b      	cbz	r3, 8008f14 <_free_r+0x50>
 8008f10:	42a3      	cmp	r3, r4
 8008f12:	d9fa      	bls.n	8008f0a <_free_r+0x46>
 8008f14:	6811      	ldr	r1, [r2, #0]
 8008f16:	1855      	adds	r5, r2, r1
 8008f18:	42a5      	cmp	r5, r4
 8008f1a:	d10b      	bne.n	8008f34 <_free_r+0x70>
 8008f1c:	6824      	ldr	r4, [r4, #0]
 8008f1e:	4421      	add	r1, r4
 8008f20:	1854      	adds	r4, r2, r1
 8008f22:	42a3      	cmp	r3, r4
 8008f24:	6011      	str	r1, [r2, #0]
 8008f26:	d1e0      	bne.n	8008eea <_free_r+0x26>
 8008f28:	681c      	ldr	r4, [r3, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	6053      	str	r3, [r2, #4]
 8008f2e:	4421      	add	r1, r4
 8008f30:	6011      	str	r1, [r2, #0]
 8008f32:	e7da      	b.n	8008eea <_free_r+0x26>
 8008f34:	d902      	bls.n	8008f3c <_free_r+0x78>
 8008f36:	230c      	movs	r3, #12
 8008f38:	6003      	str	r3, [r0, #0]
 8008f3a:	e7d6      	b.n	8008eea <_free_r+0x26>
 8008f3c:	6825      	ldr	r5, [r4, #0]
 8008f3e:	1961      	adds	r1, r4, r5
 8008f40:	428b      	cmp	r3, r1
 8008f42:	bf04      	itt	eq
 8008f44:	6819      	ldreq	r1, [r3, #0]
 8008f46:	685b      	ldreq	r3, [r3, #4]
 8008f48:	6063      	str	r3, [r4, #4]
 8008f4a:	bf04      	itt	eq
 8008f4c:	1949      	addeq	r1, r1, r5
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	6054      	str	r4, [r2, #4]
 8008f52:	e7ca      	b.n	8008eea <_free_r+0x26>
 8008f54:	b003      	add	sp, #12
 8008f56:	bd30      	pop	{r4, r5, pc}
 8008f58:	20000ae0 	.word	0x20000ae0

08008f5c <sbrk_aligned>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	4e0e      	ldr	r6, [pc, #56]	; (8008f98 <sbrk_aligned+0x3c>)
 8008f60:	460c      	mov	r4, r1
 8008f62:	6831      	ldr	r1, [r6, #0]
 8008f64:	4605      	mov	r5, r0
 8008f66:	b911      	cbnz	r1, 8008f6e <sbrk_aligned+0x12>
 8008f68:	f000 f88c 	bl	8009084 <_sbrk_r>
 8008f6c:	6030      	str	r0, [r6, #0]
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 f887 	bl	8009084 <_sbrk_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	d00a      	beq.n	8008f90 <sbrk_aligned+0x34>
 8008f7a:	1cc4      	adds	r4, r0, #3
 8008f7c:	f024 0403 	bic.w	r4, r4, #3
 8008f80:	42a0      	cmp	r0, r4
 8008f82:	d007      	beq.n	8008f94 <sbrk_aligned+0x38>
 8008f84:	1a21      	subs	r1, r4, r0
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 f87c 	bl	8009084 <_sbrk_r>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d101      	bne.n	8008f94 <sbrk_aligned+0x38>
 8008f90:	f04f 34ff 	mov.w	r4, #4294967295
 8008f94:	4620      	mov	r0, r4
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	20000ae4 	.word	0x20000ae4

08008f9c <_malloc_r>:
 8008f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa0:	1ccd      	adds	r5, r1, #3
 8008fa2:	f025 0503 	bic.w	r5, r5, #3
 8008fa6:	3508      	adds	r5, #8
 8008fa8:	2d0c      	cmp	r5, #12
 8008faa:	bf38      	it	cc
 8008fac:	250c      	movcc	r5, #12
 8008fae:	2d00      	cmp	r5, #0
 8008fb0:	4607      	mov	r7, r0
 8008fb2:	db01      	blt.n	8008fb8 <_malloc_r+0x1c>
 8008fb4:	42a9      	cmp	r1, r5
 8008fb6:	d905      	bls.n	8008fc4 <_malloc_r+0x28>
 8008fb8:	230c      	movs	r3, #12
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	2600      	movs	r6, #0
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc4:	4e2e      	ldr	r6, [pc, #184]	; (8009080 <_malloc_r+0xe4>)
 8008fc6:	f000 f86d 	bl	80090a4 <__malloc_lock>
 8008fca:	6833      	ldr	r3, [r6, #0]
 8008fcc:	461c      	mov	r4, r3
 8008fce:	bb34      	cbnz	r4, 800901e <_malloc_r+0x82>
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	f7ff ffc2 	bl	8008f5c <sbrk_aligned>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	4604      	mov	r4, r0
 8008fdc:	d14d      	bne.n	800907a <_malloc_r+0xde>
 8008fde:	6834      	ldr	r4, [r6, #0]
 8008fe0:	4626      	mov	r6, r4
 8008fe2:	2e00      	cmp	r6, #0
 8008fe4:	d140      	bne.n	8009068 <_malloc_r+0xcc>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	4631      	mov	r1, r6
 8008fea:	4638      	mov	r0, r7
 8008fec:	eb04 0803 	add.w	r8, r4, r3
 8008ff0:	f000 f848 	bl	8009084 <_sbrk_r>
 8008ff4:	4580      	cmp	r8, r0
 8008ff6:	d13a      	bne.n	800906e <_malloc_r+0xd2>
 8008ff8:	6821      	ldr	r1, [r4, #0]
 8008ffa:	3503      	adds	r5, #3
 8008ffc:	1a6d      	subs	r5, r5, r1
 8008ffe:	f025 0503 	bic.w	r5, r5, #3
 8009002:	3508      	adds	r5, #8
 8009004:	2d0c      	cmp	r5, #12
 8009006:	bf38      	it	cc
 8009008:	250c      	movcc	r5, #12
 800900a:	4629      	mov	r1, r5
 800900c:	4638      	mov	r0, r7
 800900e:	f7ff ffa5 	bl	8008f5c <sbrk_aligned>
 8009012:	3001      	adds	r0, #1
 8009014:	d02b      	beq.n	800906e <_malloc_r+0xd2>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	442b      	add	r3, r5
 800901a:	6023      	str	r3, [r4, #0]
 800901c:	e00e      	b.n	800903c <_malloc_r+0xa0>
 800901e:	6822      	ldr	r2, [r4, #0]
 8009020:	1b52      	subs	r2, r2, r5
 8009022:	d41e      	bmi.n	8009062 <_malloc_r+0xc6>
 8009024:	2a0b      	cmp	r2, #11
 8009026:	d916      	bls.n	8009056 <_malloc_r+0xba>
 8009028:	1961      	adds	r1, r4, r5
 800902a:	42a3      	cmp	r3, r4
 800902c:	6025      	str	r5, [r4, #0]
 800902e:	bf18      	it	ne
 8009030:	6059      	strne	r1, [r3, #4]
 8009032:	6863      	ldr	r3, [r4, #4]
 8009034:	bf08      	it	eq
 8009036:	6031      	streq	r1, [r6, #0]
 8009038:	5162      	str	r2, [r4, r5]
 800903a:	604b      	str	r3, [r1, #4]
 800903c:	4638      	mov	r0, r7
 800903e:	f104 060b 	add.w	r6, r4, #11
 8009042:	f000 f835 	bl	80090b0 <__malloc_unlock>
 8009046:	f026 0607 	bic.w	r6, r6, #7
 800904a:	1d23      	adds	r3, r4, #4
 800904c:	1af2      	subs	r2, r6, r3
 800904e:	d0b6      	beq.n	8008fbe <_malloc_r+0x22>
 8009050:	1b9b      	subs	r3, r3, r6
 8009052:	50a3      	str	r3, [r4, r2]
 8009054:	e7b3      	b.n	8008fbe <_malloc_r+0x22>
 8009056:	6862      	ldr	r2, [r4, #4]
 8009058:	42a3      	cmp	r3, r4
 800905a:	bf0c      	ite	eq
 800905c:	6032      	streq	r2, [r6, #0]
 800905e:	605a      	strne	r2, [r3, #4]
 8009060:	e7ec      	b.n	800903c <_malloc_r+0xa0>
 8009062:	4623      	mov	r3, r4
 8009064:	6864      	ldr	r4, [r4, #4]
 8009066:	e7b2      	b.n	8008fce <_malloc_r+0x32>
 8009068:	4634      	mov	r4, r6
 800906a:	6876      	ldr	r6, [r6, #4]
 800906c:	e7b9      	b.n	8008fe2 <_malloc_r+0x46>
 800906e:	230c      	movs	r3, #12
 8009070:	603b      	str	r3, [r7, #0]
 8009072:	4638      	mov	r0, r7
 8009074:	f000 f81c 	bl	80090b0 <__malloc_unlock>
 8009078:	e7a1      	b.n	8008fbe <_malloc_r+0x22>
 800907a:	6025      	str	r5, [r4, #0]
 800907c:	e7de      	b.n	800903c <_malloc_r+0xa0>
 800907e:	bf00      	nop
 8009080:	20000ae0 	.word	0x20000ae0

08009084 <_sbrk_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d06      	ldr	r5, [pc, #24]	; (80090a0 <_sbrk_r+0x1c>)
 8009088:	2300      	movs	r3, #0
 800908a:	4604      	mov	r4, r0
 800908c:	4608      	mov	r0, r1
 800908e:	602b      	str	r3, [r5, #0]
 8009090:	f7f8 f8e6 	bl	8001260 <_sbrk>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_sbrk_r+0x1a>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_sbrk_r+0x1a>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	20000ae8 	.word	0x20000ae8

080090a4 <__malloc_lock>:
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <__malloc_lock+0x8>)
 80090a6:	f000 b809 	b.w	80090bc <__retarget_lock_acquire_recursive>
 80090aa:	bf00      	nop
 80090ac:	20000aec 	.word	0x20000aec

080090b0 <__malloc_unlock>:
 80090b0:	4801      	ldr	r0, [pc, #4]	; (80090b8 <__malloc_unlock+0x8>)
 80090b2:	f000 b804 	b.w	80090be <__retarget_lock_release_recursive>
 80090b6:	bf00      	nop
 80090b8:	20000aec 	.word	0x20000aec

080090bc <__retarget_lock_acquire_recursive>:
 80090bc:	4770      	bx	lr

080090be <__retarget_lock_release_recursive>:
 80090be:	4770      	bx	lr

080090c0 <_init>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	bf00      	nop
 80090c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c6:	bc08      	pop	{r3}
 80090c8:	469e      	mov	lr, r3
 80090ca:	4770      	bx	lr

080090cc <_fini>:
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	bf00      	nop
 80090d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d2:	bc08      	pop	{r3}
 80090d4:	469e      	mov	lr, r3
 80090d6:	4770      	bx	lr
