
P1_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ffc  08008ffc  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009004  08009004  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009004  08009004  00019004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009008  08009008  00019008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800900c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a0  2**0
                  CONTENTS
 10 .bss          000008ec  200001a0  200001a0  000201a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a8c  20000a8c  000201a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2ba  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045c1  00000000  00000000  0003c48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  00040a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001608  00000000  00000000  00042248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ba3  00000000  00000000  00043850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f53f  00000000  00000000  000693f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3ea8  00000000  00000000  00088932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015c7da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000667c  00000000  00000000  0015c82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001a0 	.word	0x200001a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008fc8 	.word	0x08008fc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a4 	.word	0x200001a4
 80001c4:	08008fc8 	.word	0x08008fc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <fsm_new>:
#include <stdlib.h>
#include "fsm.h"

fsm_t*
fsm_new (fsm_trans_t* tt)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 80004d4:	2008      	movs	r0, #8
 80004d6:	f008 fc61 	bl	8008d9c <malloc>
 80004da:	4603      	mov	r3, r0
 80004dc:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f000 f805 	bl	80004f0 <fsm_init>
  return this;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <fsm_init>:

void
fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  this->current_state=0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
  this->tt = tt;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	605a      	str	r2, [r3, #4]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <fsm_fire>:

void
fsm_fire (fsm_t* this)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b084      	sub	sp, #16
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e01c      	b.n	800055c <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	429a      	cmp	r2, r3
 800052c:	d113      	bne.n	8000556 <fsm_fire+0x44>
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	4798      	blx	r3
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d00c      	beq.n	8000556 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00c      	beq.n	8000566 <fsm_fire+0x54>
        t->out(this);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	4798      	blx	r3
      break;
 8000554:	e007      	b.n	8000566 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3310      	adds	r3, #16
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	dade      	bge.n	8000522 <fsm_fire+0x10>
    }
  }
}
 8000564:	e000      	b.n	8000568 <fsm_fire+0x56>
      break;
 8000566:	bf00      	nop
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	4b7c      	ldr	r3, [pc, #496]	; (800077c <MX_GPIO_Init+0x20c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a7b      	ldr	r2, [pc, #492]	; (800077c <MX_GPIO_Init+0x20c>)
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b79      	ldr	r3, [pc, #484]	; (800077c <MX_GPIO_Init+0x20c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0310 	and.w	r3, r3, #16
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	4b75      	ldr	r3, [pc, #468]	; (800077c <MX_GPIO_Init+0x20c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a74      	ldr	r2, [pc, #464]	; (800077c <MX_GPIO_Init+0x20c>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b72      	ldr	r3, [pc, #456]	; (800077c <MX_GPIO_Init+0x20c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b6e      	ldr	r3, [pc, #440]	; (800077c <MX_GPIO_Init+0x20c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a6d      	ldr	r2, [pc, #436]	; (800077c <MX_GPIO_Init+0x20c>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b6b      	ldr	r3, [pc, #428]	; (800077c <MX_GPIO_Init+0x20c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b67      	ldr	r3, [pc, #412]	; (800077c <MX_GPIO_Init+0x20c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a66      	ldr	r2, [pc, #408]	; (800077c <MX_GPIO_Init+0x20c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b64      	ldr	r3, [pc, #400]	; (800077c <MX_GPIO_Init+0x20c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b60      	ldr	r3, [pc, #384]	; (800077c <MX_GPIO_Init+0x20c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a5f      	ldr	r2, [pc, #380]	; (800077c <MX_GPIO_Init+0x20c>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b5d      	ldr	r3, [pc, #372]	; (800077c <MX_GPIO_Init+0x20c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b59      	ldr	r3, [pc, #356]	; (800077c <MX_GPIO_Init+0x20c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a58      	ldr	r2, [pc, #352]	; (800077c <MX_GPIO_Init+0x20c>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b56      	ldr	r3, [pc, #344]	; (800077c <MX_GPIO_Init+0x20c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	4853      	ldr	r0, [pc, #332]	; (8000780 <MX_GPIO_Init+0x210>)
 8000634:	f001 fb88 	bl	8001d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	4851      	ldr	r0, [pc, #324]	; (8000784 <MX_GPIO_Init+0x214>)
 800063e:	f001 fb83 	bl	8001d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	2200      	movs	r2, #0
 8000644:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000648:	484f      	ldr	r0, [pc, #316]	; (8000788 <MX_GPIO_Init+0x218>)
 800064a:	f001 fb7d 	bl	8001d48 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800064e:	2308      	movs	r3, #8
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4846      	ldr	r0, [pc, #280]	; (8000780 <MX_GPIO_Init+0x210>)
 8000666:	f001 f9bb 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800066a:	2301      	movs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4840      	ldr	r0, [pc, #256]	; (8000784 <MX_GPIO_Init+0x214>)
 8000682:	f001 f9ad 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000686:	2308      	movs	r3, #8
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000696:	2305      	movs	r3, #5
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4838      	ldr	r0, [pc, #224]	; (8000784 <MX_GPIO_Init+0x214>)
 80006a2:	f001 f99d 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4834      	ldr	r0, [pc, #208]	; (800078c <MX_GPIO_Init+0x21c>)
 80006bc:	f001 f990 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006c0:	230e      	movs	r3, #14
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	482e      	ldr	r0, [pc, #184]	; (800078c <MX_GPIO_Init+0x21c>)
 80006d4:	f001 f984 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006d8:	2304      	movs	r3, #4
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4829      	ldr	r0, [pc, #164]	; (8000790 <MX_GPIO_Init+0x220>)
 80006ec:	f001 f978 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000702:	2305      	movs	r3, #5
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4820      	ldr	r0, [pc, #128]	; (8000790 <MX_GPIO_Init+0x220>)
 800070e:	f001 f967 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000712:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000716:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4817      	ldr	r0, [pc, #92]	; (8000788 <MX_GPIO_Init+0x218>)
 800072c:	f001 f958 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000730:	2320      	movs	r3, #32
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_GPIO_Init+0x218>)
 8000744:	f001 f94c 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800074c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <MX_GPIO_Init+0x210>)
 800075e:	f001 f93f 	bl	80019e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2006      	movs	r0, #6
 8000768:	f001 f903 	bl	8001972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800076c:	2006      	movs	r0, #6
 800076e:	f001 f91c 	bl	80019aa <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	; 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40021000 	.word	0x40021000
 8000784:	40020800 	.word	0x40020800
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40020000 	.word	0x40020000
 8000790:	40020400 	.word	0x40020400

08000794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x50>)
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <MX_I2C1_Init+0x54>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_I2C1_Init+0x58>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007d2:	f002 fef5 	bl	80035c0 <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 fbec 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200001bc 	.word	0x200001bc
 80007e8:	40005400 	.word	0x40005400
 80007ec:	000186a0 	.word	0x000186a0

080007f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <HAL_I2C_MspInit+0x84>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d12c      	bne.n	800086c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_I2C_MspInit+0x88>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800082e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000834:	2312      	movs	r3, #18
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000840:	2304      	movs	r3, #4
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <HAL_I2C_MspInit+0x8c>)
 800084c:	f001 f8c8 	bl	80019e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_I2C_MspInit+0x88>)
 800085a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40005400 	.word	0x40005400
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400

08000880 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_I2S3_Init+0x54>)
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <MX_I2S3_Init+0x58>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2S3_Init+0x54>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_I2S3_Init+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <MX_I2S3_Init+0x5c>)
 80008aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008c0:	f002 ffc2 	bl	8003848 <HAL_I2S_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ca:	f000 fb75 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000210 	.word	0x20000210
 80008d8:	40003c00 	.word	0x40003c00
 80008dc:	00017700 	.word	0x00017700

080008e0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a31      	ldr	r2, [pc, #196]	; (80009d0 <HAL_I2S_MspInit+0xf0>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d15a      	bne.n	80009c6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000910:	2301      	movs	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000914:	23c0      	movs	r3, #192	; 0xc0
 8000916:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4618      	mov	r0, r3
 8000922:	f004 f8b5 	bl	8004a90 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800092c:	f000 fb44 	bl	8000fb8 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a26      	ldr	r2, [pc, #152]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800093a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800093e:	6413      	str	r3, [r2, #64]	; 0x40
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000984:	2310      	movs	r3, #16
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000994:	2306      	movs	r3, #6
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <HAL_I2S_MspInit+0xf8>)
 80009a0:	f001 f81e 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b6:	2306      	movs	r3, #6
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	4806      	ldr	r0, [pc, #24]	; (80009dc <HAL_I2S_MspInit+0xfc>)
 80009c2:	f001 f80d 	bl	80019e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009c6:	bf00      	nop
 80009c8:	3738      	adds	r7, #56	; 0x38
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40003c00 	.word	0x40003c00
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020800 	.word	0x40020800

080009e0 <boton_presionado>:
//salidas
static uint8_t faultx, faulty, faultz;
static uint8_t led_activacion;

//funciones de transicion
static int boton_presionado (fsm_t* this) { /*if (timer_boton)*/ return boton; /*else return 0;*/ }
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <boton_presionado+0x18>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	20000258 	.word	0x20000258

080009fc <boton_no_presionado>:
static int boton_no_presionado (fsm_t* this) {return !boton; }
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <boton_no_presionado+0x24>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bf0c      	ite	eq
 8000a0c:	2301      	moveq	r3, #1
 8000a0e:	2300      	movne	r3, #0
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000258 	.word	0x20000258

08000a24 <sensorx_on>:

static int sensorx_on (fsm_t* this) { return sensorx; }
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <sensorx_on+0x18>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20000259 	.word	0x20000259

08000a40 <sensory_on>:
static int sensory_on (fsm_t* this) { return sensory; }
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <sensory_on+0x18>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	2000025a 	.word	0x2000025a

08000a5c <sensorz_on>:
static int sensorz_on (fsm_t* this) { return sensorz; }
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <sensorz_on+0x18>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	2000025b 	.word	0x2000025b

08000a78 <sensorx_off>:
static int sensorx_off (fsm_t* this) { return !sensorx; }
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <sensorx_off+0x24>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf0c      	ite	eq
 8000a88:	2301      	moveq	r3, #1
 8000a8a:	2300      	movne	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000259 	.word	0x20000259

08000aa0 <sensory_off>:
static int sensory_off (fsm_t* this) { return !sensory; }
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <sensory_off+0x24>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf0c      	ite	eq
 8000ab0:	2301      	moveq	r3, #1
 8000ab2:	2300      	movne	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	2000025a 	.word	0x2000025a

08000ac8 <sensorz_off>:
static int sensorz_off (fsm_t* this) { return !sensorz; }
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <sensorz_off+0x24>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	2000025b 	.word	0x2000025b

08000af0 <activado_on>:

static int activado_on (fsm_t* this) { if (timer_lectura) return activado; else return 0; }
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <activado_on+0x24>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <activado_on+0x16>
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <activado_on+0x28>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	e000      	b.n	8000b08 <activado_on+0x18>
 8000b06:	2300      	movs	r3, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	2000025d 	.word	0x2000025d
 8000b18:	2000025c 	.word	0x2000025c

08000b1c <activado_off>:
static int activado_off (fsm_t* this) { if (!timer_lectura || !activado) return 1; else return 0; }
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <activado_off+0x2c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <activado_off+0x18>
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <activado_off+0x30>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <activado_off+0x1c>
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <activado_off+0x1e>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	2000025d 	.word	0x2000025d
 8000b4c:	2000025c 	.word	0x2000025c

08000b50 <activado_on_led>:
static int activado_on_led (fsm_t* this) { if (timer_led) return activado; else return 0; }
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <activado_on_led+0x24>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <activado_on_led+0x16>
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <activado_on_led+0x28>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	e000      	b.n	8000b68 <activado_on_led+0x18>
 8000b66:	2300      	movs	r3, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	2000025e 	.word	0x2000025e
 8000b78:	2000025c 	.word	0x2000025c

08000b7c <activado_off_led>:
static int activado_off_led (fsm_t* this) { if (timer_led) return !activado; else return 0; }
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <activado_off_led+0x30>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d007      	beq.n	8000b9c <activado_off_led+0x20>
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <activado_off_led+0x34>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf0c      	ite	eq
 8000b94:	2301      	moveq	r3, #1
 8000b96:	2300      	movne	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	e000      	b.n	8000b9e <activado_off_led+0x22>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2000025e 	.word	0x2000025e
 8000bb0:	2000025c 	.word	0x2000025c

08000bb4 <defecto>:

static int defecto (fsm_t* this)  {return 1;}
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <activacion>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void activacion (fsm_t* this)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  activado = 1;
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <activacion+0x1c>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000025c 	.word	0x2000025c

08000bec <desactivacion>:

static void desactivacion (fsm_t* this)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  activado = 0;
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <desactivacion+0x1c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	2000025c 	.word	0x2000025c

08000c0c <lectura_x>:

static void lectura_x (fsm_t* this)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  faultx = 1;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <lectura_x+0x24>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <lectura_x+0x28>)
 8000c22:	f001 f891 	bl	8001d48 <HAL_GPIO_WritePin>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000025f 	.word	0x2000025f
 8000c34:	40020c00 	.word	0x40020c00

08000c38 <lectura_y>:

static void lectura_y (fsm_t* this)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  faulty = 1;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <lectura_y+0x24>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <lectura_y+0x28>)
 8000c4e:	f001 f87b 	bl	8001d48 <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000260 	.word	0x20000260
 8000c60:	40020c00 	.word	0x40020c00

08000c64 <lectura_z>:

static void lectura_z (fsm_t* this)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  faultz = 1;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <lectura_z+0x24>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <lectura_z+0x28>)
 8000c7a:	f001 f865 	bl	8001d48 <HAL_GPIO_WritePin>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000261 	.word	0x20000261
 8000c8c:	40020c00 	.word	0x40020c00

08000c90 <lectura_x_fin>:

static void lectura_x_fin (fsm_t* this)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  faultx = 0;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <lectura_x_fin+0x24>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <lectura_x_fin+0x28>)
 8000ca6:	f001 f84f 	bl	8001d48 <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000025f 	.word	0x2000025f
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <lectura_y_fin>:

static void lectura_y_fin (fsm_t* this)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  faulty = 0;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <lectura_y_fin+0x24>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <lectura_y_fin+0x28>)
 8000cd2:	f001 f839 	bl	8001d48 <HAL_GPIO_WritePin>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000260 	.word	0x20000260
 8000ce4:	40020c00 	.word	0x40020c00

08000ce8 <lectura_z_fin>:

static void lectura_z_fin (fsm_t* this)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  faultz = 0;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <lectura_z_fin+0x24>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <lectura_z_fin+0x28>)
 8000cfe:	f001 f823 	bl	8001d48 <HAL_GPIO_WritePin>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000261 	.word	0x20000261
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <lectura_fin>:

static void lectura_fin (fsm_t* this)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  faultx = 0;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <lectura_fin+0x48>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
  faulty = 0;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <lectura_fin+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
  faultz = 0;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <lectura_fin+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <lectura_fin+0x54>)
 8000d36:	f001 f807 	bl	8001d48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d40:	4809      	ldr	r0, [pc, #36]	; (8000d68 <lectura_fin+0x54>)
 8000d42:	f001 f801 	bl	8001d48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4c:	4806      	ldr	r0, [pc, #24]	; (8000d68 <lectura_fin+0x54>)
 8000d4e:	f000 fffb 	bl	8001d48 <HAL_GPIO_WritePin>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000025f 	.word	0x2000025f
 8000d60:	20000260 	.word	0x20000260
 8000d64:	20000261 	.word	0x20000261
 8000d68:	40020c00 	.word	0x40020c00

08000d6c <led_activado>:

static void led_activado (fsm_t* this)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  led_activacion = 1;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <led_activado+0x24>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <led_activado+0x28>)
 8000d82:	f000 ffe1 	bl	8001d48 <HAL_GPIO_WritePin>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000262 	.word	0x20000262
 8000d94:	40020c00 	.word	0x40020c00

08000d98 <led_no_activado>:

static void led_no_activado (fsm_t* this)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  led_activacion = 0;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <led_no_activado+0x24>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <led_no_activado+0x28>)
 8000dae:	f000 ffcb 	bl	8001d48 <HAL_GPIO_WritePin>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000262 	.word	0x20000262
 8000dc0:	40020c00 	.word	0x40020c00

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dca:	f000 fc61 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dce:	f000 f873 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd2:	f7ff fbcd 	bl	8000570 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dd6:	f7ff fcdd 	bl	8000794 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dda:	f7ff fd51 	bl	8000880 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000dde:	f000 f8f1 	bl	8000fc4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000de2:	f007 fca9 	bl	8008738 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000de6:	f000 fa17 	bl	8001218 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000dea:	f000 fa9b 	bl	8001324 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dee:	f000 faf3 	bl	80013d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000df2:	2100      	movs	r1, #0
 8000df4:	4826      	ldr	r0, [pc, #152]	; (8000e90 <main+0xcc>)
 8000df6:	f004 f863 	bl	8004ec0 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4825      	ldr	r0, [pc, #148]	; (8000e94 <main+0xd0>)
 8000dfe:	f004 f85f 	bl	8004ec0 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000e02:	2100      	movs	r1, #0
 8000e04:	4824      	ldr	r0, [pc, #144]	; (8000e98 <main+0xd4>)
 8000e06:	f004 f85b 	bl	8004ec0 <HAL_TIM_OC_Start>

  //Cración de las FSM
  fsm_t* fsm_inicio = fsm_new (inicio);
 8000e0a:	4824      	ldr	r0, [pc, #144]	; (8000e9c <main+0xd8>)
 8000e0c:	f7ff fb5e 	bl	80004cc <fsm_new>
 8000e10:	60f8      	str	r0, [r7, #12]
  fsm_t* fsm_lectura = fsm_new (lectura);
 8000e12:	4823      	ldr	r0, [pc, #140]	; (8000ea0 <main+0xdc>)
 8000e14:	f7ff fb5a 	bl	80004cc <fsm_new>
 8000e18:	60b8      	str	r0, [r7, #8]
  fsm_t* fsm_led_activo = fsm_new (led_activo);
 8000e1a:	4822      	ldr	r0, [pc, #136]	; (8000ea4 <main+0xe0>)
 8000e1c:	f7ff fb56 	bl	80004cc <fsm_new>
 8000e20:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e22:	f007 fcaf 	bl	8008784 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    fsm_fire (fsm_inicio);
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff fb73 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura);
 8000e2c:	68b8      	ldr	r0, [r7, #8]
 8000e2e:	f7ff fb70 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_led_activo);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fb6d 	bl	8000512 <fsm_fire>

    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000e38:	2102      	movs	r1, #2
 8000e3a:	481b      	ldr	r0, [pc, #108]	; (8000ea8 <main+0xe4>)
 8000e3c:	f000 ff6c 	bl	8001d18 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <main+0x8a>
    	sensorx = 1;
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <main+0xe8>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e002      	b.n	8000e54 <main+0x90>
    else
    	sensorx = 0;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <main+0xe8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000e54:	2104      	movs	r1, #4
 8000e56:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <main+0xe4>)
 8000e58:	f000 ff5e 	bl	8001d18 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <main+0xa6>
       	sensory = 1;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <main+0xec>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e002      	b.n	8000e70 <main+0xac>
    else
		sensory = 0;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <main+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000e70:	2108      	movs	r1, #8
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <main+0xe4>)
 8000e74:	f000 ff50 	bl	8001d18 <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <main+0xc2>
       	sensorz = 1;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <main+0xf0>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e7cd      	b.n	8000e22 <main+0x5e>
    else
		sensorz = 0;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <main+0xf0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000e8c:	e7c9      	b.n	8000e22 <main+0x5e>
 8000e8e:	bf00      	nop
 8000e90:	200002c0 	.word	0x200002c0
 8000e94:	20000308 	.word	0x20000308
 8000e98:	20000350 	.word	0x20000350
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000040 	.word	0x20000040
 8000ea4:	200000d0 	.word	0x200000d0
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	20000259 	.word	0x20000259
 8000eb0:	2000025a 	.word	0x2000025a
 8000eb4:	2000025b 	.word	0x2000025b

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	; 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	2230      	movs	r2, #48	; 0x30
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f007 ff78 	bl	8008dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <SystemClock_Config+0xcc>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a27      	ldr	r2, [pc, #156]	; (8000f84 <SystemClock_Config+0xcc>)
 8000ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
 8000eec:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <SystemClock_Config+0xcc>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <SystemClock_Config+0xd0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <SystemClock_Config+0xd0>)
 8000f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <SystemClock_Config+0xd0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f14:	2301      	movs	r3, #1
 8000f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f36:	2307      	movs	r3, #7
 8000f38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 f922 	bl	8004188 <HAL_RCC_OscConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f4a:	f000 f835 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4e:	230f      	movs	r3, #15
 8000f50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f52:	2302      	movs	r3, #2
 8000f54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2105      	movs	r1, #5
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 fb83 	bl	8004678 <HAL_RCC_ClockConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f78:	f000 f81e 	bl	8000fb8 <Error_Handler>
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3750      	adds	r7, #80	; 0x50
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40007000 	.word	0x40007000

08000f8c <HAL_GPIO_EXTI_Callback>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_0){
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d105      	bne.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x1c>
		boton=~boton;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	}
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000258 	.word	0x20000258

08000fb8 <Error_Handler>:
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>
	...

08000fc4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <MX_SPI1_Init+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_SPI1_Init+0x64>)
 8000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_SPI1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_SPI1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_SPI1_Init+0x64>)
 8001010:	220a      	movs	r2, #10
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_SPI1_Init+0x64>)
 8001016:	f003 fe7b 	bl	8004d10 <HAL_SPI_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001020:	f7ff ffca 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000264 	.word	0x20000264
 800102c:	40013000 	.word	0x40013000

08001030 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a19      	ldr	r2, [pc, #100]	; (80010b4 <HAL_SPI_MspInit+0x84>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d12b      	bne.n	80010aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_SPI_MspInit+0x88>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <HAL_SPI_MspInit+0x88>)
 800105c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_SPI_MspInit+0x88>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_SPI_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a10      	ldr	r2, [pc, #64]	; (80010b8 <HAL_SPI_MspInit+0x88>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_SPI_MspInit+0x88>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800108a:	23e0      	movs	r3, #224	; 0xe0
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800109a:	2305      	movs	r3, #5
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <HAL_SPI_MspInit+0x8c>)
 80010a6:	f000 fc9b 	bl	80019e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40013000 	.word	0x40013000
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <HAL_MspInit+0x4c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <HAL_MspInit+0x4c>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_MspInit+0x4c>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010fe:	2007      	movs	r0, #7
 8001100:	f000 fc2c 	bl	800195c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 faea 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001168:	2001      	movs	r0, #1
 800116a:	f000 fe07 	bl	8001d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <OTG_FS_IRQHandler+0x10>)
 800117a:	f001 f881 	bl	8002280 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000778 	.word	0x20000778

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f007 fdc6 	bl	8008d48 <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	220c      	movs	r2, #12
 80011c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20020000 	.word	0x20020000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	200002bc 	.word	0x200002bc
 80011f0:	20000a90 	.word	0x20000a90

080011f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b092      	sub	sp, #72	; 0x48
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]
 800123a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2220      	movs	r2, #32
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f007 fdba 	bl	8008dbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <MX_TIM1_Init+0x104>)
 800124a:	4a35      	ldr	r2, [pc, #212]	; (8001320 <MX_TIM1_Init+0x108>)
 800124c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <MX_TIM1_Init+0x104>)
 8001250:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001254:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <MX_TIM1_Init+0x104>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 41999;
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <MX_TIM1_Init+0x104>)
 800125e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001262:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b2d      	ldr	r3, [pc, #180]	; (800131c <MX_TIM1_Init+0x104>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <MX_TIM1_Init+0x104>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <MX_TIM1_Init+0x104>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001276:	4829      	ldr	r0, [pc, #164]	; (800131c <MX_TIM1_Init+0x104>)
 8001278:	f003 fdd3 	bl	8004e22 <HAL_TIM_OC_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001282:	f7ff fe99 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001292:	4619      	mov	r1, r3
 8001294:	4821      	ldr	r0, [pc, #132]	; (800131c <MX_TIM1_Init+0x104>)
 8001296:	f004 f9ad 	bl	80055f4 <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80012a0:	f7ff fe8a 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 41999;
 80012a8:	f24a 430f 	movw	r3, #41999	; 0xa40f
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b2:	2300      	movs	r3, #0
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4814      	ldr	r0, [pc, #80]	; (800131c <MX_TIM1_Init+0x104>)
 80012cc:	f003 fec0 	bl	8005050 <HAL_TIM_OC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80012d6:	f7ff fe6f 	bl	8000fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM1_Init+0x104>)
 80012fe:	f004 f9f5 	bl	80056ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001308:	f7ff fe56 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM1_Init+0x104>)
 800130e:	f000 f90b 	bl	8001528 <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3748      	adds	r7, #72	; 0x48
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200002c0 	.word	0x200002c0
 8001320:	40010000 	.word	0x40010000

08001324 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <MX_TIM2_Init+0xac>)
 8001348:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_TIM2_Init+0xac>)
 8001350:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001354:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_TIM2_Init+0xac>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1749999;
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_TIM2_Init+0xac>)
 800135e:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <MX_TIM2_Init+0xb0>)
 8001360:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_TIM2_Init+0xac>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_TIM2_Init+0xac>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800136e:	4818      	ldr	r0, [pc, #96]	; (80013d0 <MX_TIM2_Init+0xac>)
 8001370:	f003 fd57 	bl	8004e22 <HAL_TIM_OC_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800137a:	f7ff fe1d 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001386:	f107 0320 	add.w	r3, r7, #32
 800138a:	4619      	mov	r1, r3
 800138c:	4810      	ldr	r0, [pc, #64]	; (80013d0 <MX_TIM2_Init+0xac>)
 800138e:	f004 f931 	bl	80055f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001398:	f7ff fe0e 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1749999;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_TIM2_Init+0xb0>)
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	4807      	ldr	r0, [pc, #28]	; (80013d0 <MX_TIM2_Init+0xac>)
 80013b4:	f003 fe4c 	bl	8005050 <HAL_TIM_OC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013be:	f7ff fdfb 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013c2:	4803      	ldr	r0, [pc, #12]	; (80013d0 <MX_TIM2_Init+0xac>)
 80013c4:	f000 f8b0 	bl	8001528 <HAL_TIM_MspPostInit>

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000308 	.word	0x20000308
 80013d4:	001ab3ef 	.word	0x001ab3ef

080013d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
 80013f6:	615a      	str	r2, [r3, #20]
 80013f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <MX_TIM3_Init+0xb0>)
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <MX_TIM3_Init+0xb4>)
 80013fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MX_TIM3_Init+0xb0>)
 8001402:	f242 720f 	movw	r2, #9999	; 0x270f
 8001406:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_TIM3_Init+0xb0>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8399;
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_TIM3_Init+0xb0>)
 8001410:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001414:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_TIM3_Init+0xb0>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_TIM3_Init+0xb0>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001422:	4819      	ldr	r0, [pc, #100]	; (8001488 <MX_TIM3_Init+0xb0>)
 8001424:	f003 fcfd 	bl	8004e22 <HAL_TIM_OC_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800142e:	f7ff fdc3 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	4619      	mov	r1, r3
 8001440:	4811      	ldr	r0, [pc, #68]	; (8001488 <MX_TIM3_Init+0xb0>)
 8001442:	f004 f8d7 	bl	80055f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800144c:	f7ff fdb4 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8399;
 8001454:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8001458:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	4619      	mov	r1, r3
 8001468:	4807      	ldr	r0, [pc, #28]	; (8001488 <MX_TIM3_Init+0xb0>)
 800146a:	f003 fdf1 	bl	8005050 <HAL_TIM_OC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001474:	f7ff fda0 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <MX_TIM3_Init+0xb0>)
 800147a:	f000 f855 	bl	8001528 <HAL_TIM_MspPostInit>

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000350 	.word	0x20000350
 800148c:	40000400 	.word	0x40000400

08001490 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a1f      	ldr	r2, [pc, #124]	; (800151c <HAL_TIM_OC_MspInit+0x8c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d10e      	bne.n	80014c0 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <HAL_TIM_OC_MspInit+0x90>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_TIM_OC_MspInit+0x90>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_TIM_OC_MspInit+0x90>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80014be:	e026      	b.n	800150e <HAL_TIM_OC_MspInit+0x7e>
  else if(tim_ocHandle->Instance==TIM2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c8:	d10e      	bne.n	80014e8 <HAL_TIM_OC_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_TIM_OC_MspInit+0x90>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <HAL_TIM_OC_MspInit+0x90>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_TIM_OC_MspInit+0x90>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
}
 80014e6:	e012      	b.n	800150e <HAL_TIM_OC_MspInit+0x7e>
  else if(tim_ocHandle->Instance==TIM3)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <HAL_TIM_OC_MspInit+0x94>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d10d      	bne.n	800150e <HAL_TIM_OC_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_TIM_OC_MspInit+0x90>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_TIM_OC_MspInit+0x90>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <HAL_TIM_OC_MspInit+0x90>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	bf00      	nop
 8001510:	371c      	adds	r7, #28
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40010000 	.word	0x40010000
 8001520:	40023800 	.word	0x40023800
 8001524:	40000400 	.word	0x40000400

08001528 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a37      	ldr	r2, [pc, #220]	; (8001624 <HAL_TIM_MspPostInit+0xfc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d11f      	bne.n	800158a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b36      	ldr	r3, [pc, #216]	; (8001628 <HAL_TIM_MspPostInit+0x100>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a35      	ldr	r2, [pc, #212]	; (8001628 <HAL_TIM_MspPostInit+0x100>)
 8001554:	f043 0310 	orr.w	r3, r3, #16
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <HAL_TIM_MspPostInit+0x100>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001578:	2301      	movs	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	482a      	ldr	r0, [pc, #168]	; (800162c <HAL_TIM_MspPostInit+0x104>)
 8001584:	f000 fa2c 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001588:	e047      	b.n	800161a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001592:	d11f      	bne.n	80015d4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_TIM_MspPostInit+0x100>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a22      	ldr	r2, [pc, #136]	; (8001628 <HAL_TIM_MspPostInit+0x100>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_TIM_MspPostInit+0x100>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015c2:	2301      	movs	r3, #1
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4818      	ldr	r0, [pc, #96]	; (8001630 <HAL_TIM_MspPostInit+0x108>)
 80015ce:	f000 fa07 	bl	80019e0 <HAL_GPIO_Init>
}
 80015d2:	e022      	b.n	800161a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a16      	ldr	r2, [pc, #88]	; (8001634 <HAL_TIM_MspPostInit+0x10c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d11d      	bne.n	800161a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_TIM_MspPostInit+0x100>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <HAL_TIM_MspPostInit+0x100>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_TIM_MspPostInit+0x100>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015fa:	2340      	movs	r3, #64	; 0x40
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800160a:	2302      	movs	r3, #2
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4808      	ldr	r0, [pc, #32]	; (8001638 <HAL_TIM_MspPostInit+0x110>)
 8001616:	f000 f9e3 	bl	80019e0 <HAL_GPIO_Init>
}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40010000 	.word	0x40010000
 8001628:	40023800 	.word	0x40023800
 800162c:	40021000 	.word	0x40021000
 8001630:	40020000 	.word	0x40020000
 8001634:	40000400 	.word	0x40000400
 8001638:	40020800 	.word	0x40020800

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001642:	490e      	ldr	r1, [pc, #56]	; (800167c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001658:	4c0b      	ldr	r4, [pc, #44]	; (8001688 <LoopFillZerobss+0x26>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001666:	f7ff fdc5 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f007 fb73 	bl	8008d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff fba9 	bl	8000dc4 <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8001680:	0800900c 	.word	0x0800900c
  ldr r2, =_sbss
 8001684:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001688:	20000a8c 	.word	0x20000a8c

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_Init+0x40>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_Init+0x40>)
 80016a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_Init+0x40>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 f94f 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fcfc 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f967 	bl	80019c6 <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 f92f 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000110 	.word	0x20000110
 800172c:	20000118 	.word	0x20000118
 8001730:	20000114 	.word	0x20000114

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000118 	.word	0x20000118
 8001758:	20000398 	.word	0x20000398

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000398 	.word	0x20000398

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_Delay+0x44>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000118 	.word	0x20000118

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <__NVIC_EnableIRQ+0x38>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f7ff ff8e 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff29 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff3e 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff8e 	bl	80018b0 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5d 	bl	800185c <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff31 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffa2 	bl	8001918 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e16b      	b.n	8001cd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 815a 	bne.w	8001cce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d130      	bne.n	8001a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80b4 	beq.w	8001cce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b60      	ldr	r3, [pc, #384]	; (8001cec <HAL_GPIO_Init+0x30c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a5f      	ldr	r2, [pc, #380]	; (8001cec <HAL_GPIO_Init+0x30c>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_GPIO_Init+0x30c>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a5b      	ldr	r2, [pc, #364]	; (8001cf0 <HAL_GPIO_Init+0x310>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a52      	ldr	r2, [pc, #328]	; (8001cf4 <HAL_GPIO_Init+0x314>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d02b      	beq.n	8001c06 <HAL_GPIO_Init+0x226>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a51      	ldr	r2, [pc, #324]	; (8001cf8 <HAL_GPIO_Init+0x318>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d025      	beq.n	8001c02 <HAL_GPIO_Init+0x222>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a50      	ldr	r2, [pc, #320]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01f      	beq.n	8001bfe <HAL_GPIO_Init+0x21e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4f      	ldr	r2, [pc, #316]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x21a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4e      	ldr	r2, [pc, #312]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x216>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4d      	ldr	r2, [pc, #308]	; (8001d08 <HAL_GPIO_Init+0x328>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4c      	ldr	r2, [pc, #304]	; (8001d0c <HAL_GPIO_Init+0x32c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x20e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <HAL_GPIO_Init+0x330>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x20a>
 8001be6:	2307      	movs	r3, #7
 8001be8:	e00e      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bea:	2308      	movs	r3, #8
 8001bec:	e00c      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bee:	2306      	movs	r3, #6
 8001bf0:	e00a      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	e008      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e004      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e002      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001c06:	2300      	movs	r3, #0
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	f002 0203 	and.w	r2, r2, #3
 8001c0e:	0092      	lsls	r2, r2, #2
 8001c10:	4093      	lsls	r3, r2
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c18:	4935      	ldr	r1, [pc, #212]	; (8001cf0 <HAL_GPIO_Init+0x310>)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4a:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c74:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b0f      	cmp	r3, #15
 8001cd8:	f67f ae90 	bls.w	80019fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40013800 	.word	0x40013800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40021400 	.word	0x40021400
 8001d0c:	40021800 	.word	0x40021800
 8001d10:	40021c00 	.word	0x40021c00
 8001d14:	40013c00 	.word	0x40013c00

08001d18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	e001      	b.n	8001d3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
 8001d54:	4613      	mov	r3, r2
 8001d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d58:	787b      	ldrb	r3, [r7, #1]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d64:	e003      	b.n	8001d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	041a      	lsls	r2, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	619a      	str	r2, [r3, #24]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d006      	beq.n	8001da0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f8f6 	bl	8000f8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40013c00 	.word	0x40013c00

08001dac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	b08f      	sub	sp, #60	; 0x3c
 8001db0:	af0a      	add	r7, sp, #40	; 0x28
 8001db2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e054      	b.n	8001e68 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d106      	bne.n	8001dde <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f006 fd0b 	bl	80087f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2203      	movs	r2, #3
 8001de2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fd39 	bl	8005874 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	687e      	ldr	r6, [r7, #4]
 8001e0a:	466d      	mov	r5, sp
 8001e0c:	f106 0410 	add.w	r4, r6, #16
 8001e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e20:	1d33      	adds	r3, r6, #4
 8001e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e24:	6838      	ldr	r0, [r7, #0]
 8001e26:	f003 fcb3 	bl	8005790 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fd30 	bl	8005896 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	687e      	ldr	r6, [r7, #4]
 8001e3e:	466d      	mov	r5, sp
 8001e40:	f106 0410 	add.w	r4, r6, #16
 8001e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e50:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e54:	1d33      	adds	r3, r6, #4
 8001e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e58:	6838      	ldr	r0, [r7, #0]
 8001e5a:	f003 feb9 	bl	8005bd0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e70 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af04      	add	r7, sp, #16
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	70fb      	strb	r3, [r7, #3]
 8001e82:	460b      	mov	r3, r1
 8001e84:	70bb      	strb	r3, [r7, #2]
 8001e86:	4613      	mov	r3, r2
 8001e88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_HCD_HC_Init+0x28>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e076      	b.n	8001f86 <HAL_HCD_HC_Init+0x116>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	212c      	movs	r1, #44	; 0x2c
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	333d      	adds	r3, #61	; 0x3d
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	212c      	movs	r1, #44	; 0x2c
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3338      	adds	r3, #56	; 0x38
 8001ec0:	787a      	ldrb	r2, [r7, #1]
 8001ec2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3340      	adds	r3, #64	; 0x40
 8001ed2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ed4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	212c      	movs	r1, #44	; 0x2c
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3339      	adds	r3, #57	; 0x39
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	212c      	movs	r1, #44	; 0x2c
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	333f      	adds	r3, #63	; 0x3f
 8001ef6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001efa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	78ba      	ldrb	r2, [r7, #2]
 8001f00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f04:	b2d0      	uxtb	r0, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	333a      	adds	r3, #58	; 0x3a
 8001f12:	4602      	mov	r2, r0
 8001f14:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da09      	bge.n	8001f32 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	333b      	adds	r3, #59	; 0x3b
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e008      	b.n	8001f44 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	333b      	adds	r3, #59	; 0x3b
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	212c      	movs	r1, #44	; 0x2c
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	333c      	adds	r3, #60	; 0x3c
 8001f52:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f56:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	787c      	ldrb	r4, [r7, #1]
 8001f5e:	78ba      	ldrb	r2, [r7, #2]
 8001f60:	78f9      	ldrb	r1, [r7, #3]
 8001f62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f64:	9302      	str	r3, [sp, #8]
 8001f66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4623      	mov	r3, r4
 8001f74:	f003 ffb2 	bl	8005edc <USB_HC_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}

08001f8e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_HCD_HC_Halt+0x1e>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e00f      	b.n	8001fcc <HAL_HCD_HC_Halt+0x3e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 fa02 	bl	80063c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	70fb      	strb	r3, [r7, #3]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	70bb      	strb	r3, [r7, #2]
 8001fea:	4613      	mov	r3, r2
 8001fec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	333b      	adds	r3, #59	; 0x3b
 8001ffc:	78ba      	ldrb	r2, [r7, #2]
 8001ffe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	333f      	adds	r3, #63	; 0x3f
 800200e:	787a      	ldrb	r2, [r7, #1]
 8002010:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002012:	7c3b      	ldrb	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d112      	bne.n	800203e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	3342      	adds	r3, #66	; 0x42
 8002026:	2203      	movs	r2, #3
 8002028:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	333d      	adds	r3, #61	; 0x3d
 8002038:	7f3a      	ldrb	r2, [r7, #28]
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e008      	b.n	8002050 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3342      	adds	r3, #66	; 0x42
 800204c:	2202      	movs	r2, #2
 800204e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002050:	787b      	ldrb	r3, [r7, #1]
 8002052:	2b03      	cmp	r3, #3
 8002054:	f200 80c6 	bhi.w	80021e4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002058:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800205a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205e:	bf00      	nop
 8002060:	08002071 	.word	0x08002071
 8002064:	080021d1 	.word	0x080021d1
 8002068:	080020d5 	.word	0x080020d5
 800206c:	08002153 	.word	0x08002153
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002070:	7c3b      	ldrb	r3, [r7, #16]
 8002072:	2b01      	cmp	r3, #1
 8002074:	f040 80b8 	bne.w	80021e8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002078:	78bb      	ldrb	r3, [r7, #2]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 80b4 	bne.w	80021e8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002080:	8b3b      	ldrh	r3, [r7, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	4413      	add	r3, r2
 8002092:	3355      	adds	r3, #85	; 0x55
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	212c      	movs	r1, #44	; 0x2c
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	3355      	adds	r3, #85	; 0x55
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3342      	adds	r3, #66	; 0x42
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020be:	e093      	b.n	80021e8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3342      	adds	r3, #66	; 0x42
 80020ce:	2202      	movs	r2, #2
 80020d0:	701a      	strb	r2, [r3, #0]
      break;
 80020d2:	e089      	b.n	80021e8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80020d4:	78bb      	ldrb	r3, [r7, #2]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d11d      	bne.n	8002116 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3355      	adds	r3, #85	; 0x55
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3342      	adds	r3, #66	; 0x42
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002100:	e073      	b.n	80021ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	212c      	movs	r1, #44	; 0x2c
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	4413      	add	r3, r2
 800210e:	3342      	adds	r3, #66	; 0x42
 8002110:	2202      	movs	r2, #2
 8002112:	701a      	strb	r2, [r3, #0]
      break;
 8002114:	e069      	b.n	80021ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	3354      	adds	r3, #84	; 0x54
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3342      	adds	r3, #66	; 0x42
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
      break;
 800213c:	e055      	b.n	80021ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3342      	adds	r3, #66	; 0x42
 800214c:	2202      	movs	r2, #2
 800214e:	701a      	strb	r2, [r3, #0]
      break;
 8002150:	e04b      	b.n	80021ea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002152:	78bb      	ldrb	r3, [r7, #2]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d11d      	bne.n	8002194 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	3355      	adds	r3, #85	; 0x55
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	4413      	add	r3, r2
 8002178:	3342      	adds	r3, #66	; 0x42
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800217e:	e034      	b.n	80021ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3342      	adds	r3, #66	; 0x42
 800218e:	2202      	movs	r2, #2
 8002190:	701a      	strb	r2, [r3, #0]
      break;
 8002192:	e02a      	b.n	80021ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	3354      	adds	r3, #84	; 0x54
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	212c      	movs	r1, #44	; 0x2c
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	3342      	adds	r3, #66	; 0x42
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
      break;
 80021ba:	e016      	b.n	80021ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3342      	adds	r3, #66	; 0x42
 80021ca:	2202      	movs	r2, #2
 80021cc:	701a      	strb	r2, [r3, #0]
      break;
 80021ce:	e00c      	b.n	80021ea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3342      	adds	r3, #66	; 0x42
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
      break;
 80021e2:	e002      	b.n	80021ea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80021e4:	bf00      	nop
 80021e6:	e000      	b.n	80021ea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80021e8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3344      	adds	r3, #68	; 0x44
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	8b3a      	ldrh	r2, [r7, #24]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	202c      	movs	r0, #44	; 0x2c
 8002204:	fb00 f303 	mul.w	r3, r0, r3
 8002208:	440b      	add	r3, r1
 800220a:	334c      	adds	r3, #76	; 0x4c
 800220c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	3360      	adds	r3, #96	; 0x60
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3350      	adds	r3, #80	; 0x50
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	3339      	adds	r3, #57	; 0x39
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3361      	adds	r3, #97	; 0x61
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	222c      	movs	r2, #44	; 0x2c
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	3338      	adds	r3, #56	; 0x38
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	18d1      	adds	r1, r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	f003 ff56 	bl	8006120 <USB_HC_StartXfer>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop

08002280 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f003 fc57 	bl	8005b4a <USB_GetMode>
 800229c:	4603      	mov	r3, r0
 800229e:	2b01      	cmp	r3, #1
 80022a0:	f040 80f6 	bne.w	8002490 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 fc3b 	bl	8005b24 <USB_ReadInterrupts>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80ec 	beq.w	800248e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fc32 	bl	8005b24 <USB_ReadInterrupts>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ca:	d104      	bne.n	80022d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80022d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fc22 	bl	8005b24 <USB_ReadInterrupts>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ea:	d104      	bne.n	80022f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 fc12 	bl	8005b24 <USB_ReadInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002306:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800230a:	d104      	bne.n	8002316 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002314:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fc02 	bl	8005b24 <USB_ReadInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b02      	cmp	r3, #2
 8002328:	d103      	bne.n	8002332 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2202      	movs	r2, #2
 8002330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fbf4 	bl	8005b24 <USB_ReadInterrupts>
 800233c:	4603      	mov	r3, r0
 800233e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002346:	d11c      	bne.n	8002382 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002350:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10f      	bne.n	8002382 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002362:	2110      	movs	r1, #16
 8002364:	6938      	ldr	r0, [r7, #16]
 8002366:	f003 fae3 	bl	8005930 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800236a:	6938      	ldr	r0, [r7, #16]
 800236c:	f003 fb14 	bl	8005998 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fcea 	bl	8005d50 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f006 fab7 	bl	80088f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f003 fbcc 	bl	8005b24 <USB_ReadInterrupts>
 800238c:	4603      	mov	r3, r0
 800238e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002392:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002396:	d102      	bne.n	800239e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f001 f89e 	bl	80034da <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fbbe 	bl	8005b24 <USB_ReadInterrupts>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d106      	bne.n	80023c0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f006 fa80 	bl	80088b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2208      	movs	r2, #8
 80023be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 fbad 	bl	8005b24 <USB_ReadInterrupts>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d101      	bne.n	80023d8 <HAL_HCD_IRQHandler+0x158>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <HAL_HCD_IRQHandler+0x15a>
 80023d8:	2300      	movs	r3, #0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d012      	beq.n	8002404 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699a      	ldr	r2, [r3, #24]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0210 	bic.w	r2, r2, #16
 80023ec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 ffa1 	bl	8003336 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0210 	orr.w	r2, r2, #16
 8002402:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fb8b 	bl	8005b24 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002418:	d13a      	bne.n	8002490 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f003 ffc0 	bl	80063a4 <USB_HC_ReadInterrupt>
 8002424:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	e025      	b.n	8002478 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d018      	beq.n	8002472 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002456:	d106      	bne.n	8002466 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8ab 	bl	80025ba <HCD_HC_IN_IRQHandler>
 8002464:	e005      	b.n	8002472 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fbf9 	bl	8002c64 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3301      	adds	r3, #1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	429a      	cmp	r2, r3
 8002480:	d3d4      	bcc.n	800242c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248a:	615a      	str	r2, [r3, #20]
 800248c:	e000      	b.n	8002490 <HAL_HCD_IRQHandler+0x210>
      return;
 800248e:	bf00      	nop
    }
  }
}
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_HCD_Start+0x16>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e013      	b.n	80024d4 <HAL_HCD_Start+0x3e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 fcac 	bl	8005e18 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f003 f9c4 	bl	8005852 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_HCD_Stop+0x16>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e00d      	b.n	800250e <HAL_HCD_Stop+0x32>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f004 f89a 	bl	8006638 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fc4e 	bl	8005dc4 <USB_ResetPort>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	3360      	adds	r3, #96	; 0x60
 800254c:	781b      	ldrb	r3, [r3, #0]
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	3350      	adds	r3, #80	; 0x50
 8002574:	681b      	ldr	r3, [r3, #0]
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fc92 	bl	8005eb8 <USB_GetCurrentFrame>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fc6d 	bl	8005e8a <USB_GetHostSpeed>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d11a      	bne.n	8002620 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	461a      	mov	r2, r3
 80025f8:	2304      	movs	r3, #4
 80025fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3361      	adds	r3, #97	; 0x61
 800260a:	2206      	movs	r2, #6
 800260c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fed4 	bl	80063c6 <USB_HC_Halt>
 800261e:	e0af      	b.n	8002780 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002636:	d11b      	bne.n	8002670 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800264a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	212c      	movs	r1, #44	; 0x2c
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	3361      	adds	r3, #97	; 0x61
 800265a:	2207      	movs	r2, #7
 800265c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f003 feac 	bl	80063c6 <USB_HC_Halt>
 800266e:	e087      	b.n	8002780 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b20      	cmp	r3, #32
 8002684:	d109      	bne.n	800269a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	461a      	mov	r2, r3
 8002694:	2320      	movs	r3, #32
 8002696:	6093      	str	r3, [r2, #8]
 8002698:	e072      	b.n	8002780 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d11a      	bne.n	80026e6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	2308      	movs	r3, #8
 80026c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3361      	adds	r3, #97	; 0x61
 80026d0:	2205      	movs	r2, #5
 80026d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fe71 	bl	80063c6 <USB_HC_Halt>
 80026e4:	e04c      	b.n	8002780 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	d11b      	bne.n	8002736 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	461a      	mov	r2, r3
 800270c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002710:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3361      	adds	r3, #97	; 0x61
 8002720:	2208      	movs	r2, #8
 8002722:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fe49 	bl	80063c6 <USB_HC_Halt>
 8002734:	e024      	b.n	8002780 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002748:	2b80      	cmp	r3, #128	; 0x80
 800274a:	d119      	bne.n	8002780 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	461a      	mov	r2, r3
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3361      	adds	r3, #97	; 0x61
 800276c:	2206      	movs	r2, #6
 800276e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fe23 	bl	80063c6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002796:	d112      	bne.n	80027be <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fe0f 	bl	80063c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	461a      	mov	r2, r3
 80027b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80027bc:	e24e      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	f040 80df 	bne.w	8002994 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d019      	beq.n	8002812 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3348      	adds	r3, #72	; 0x48
 80027ec:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	0159      	lsls	r1, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002800:	1ad2      	subs	r2, r2, r3
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	202c      	movs	r0, #44	; 0x2c
 8002808:	fb00 f303 	mul.w	r3, r0, r3
 800280c:	440b      	add	r3, r1
 800280e:	3350      	adds	r3, #80	; 0x50
 8002810:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3361      	adds	r3, #97	; 0x61
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	335c      	adds	r3, #92	; 0x5c
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	461a      	mov	r2, r3
 8002844:	2301      	movs	r3, #1
 8002846:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	333f      	adds	r3, #63	; 0x3f
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d009      	beq.n	8002870 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	333f      	adds	r3, #63	; 0x3f
 800286a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800286c:	2b02      	cmp	r3, #2
 800286e:	d111      	bne.n	8002894 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f003 fda3 	bl	80063c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	461a      	mov	r2, r3
 800288e:	2310      	movs	r3, #16
 8002890:	6093      	str	r3, [r2, #8]
 8002892:	e03a      	b.n	800290a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	333f      	adds	r3, #63	; 0x3f
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d009      	beq.n	80028bc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	333f      	adds	r3, #63	; 0x3f
 80028b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d126      	bne.n	800290a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	0151      	lsls	r1, r2, #5
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	440a      	add	r2, r1
 80028d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028da:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3360      	adds	r3, #96	; 0x60
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	b2d9      	uxtb	r1, r3
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	202c      	movs	r0, #44	; 0x2c
 80028f8:	fb00 f303 	mul.w	r3, r0, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3360      	adds	r3, #96	; 0x60
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f006 f801 	bl	800890c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d12b      	bne.n	800296a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3348      	adds	r3, #72	; 0x48
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	202c      	movs	r0, #44	; 0x2c
 8002928:	fb00 f202 	mul.w	r2, r0, r2
 800292c:	440a      	add	r2, r1
 800292e:	3240      	adds	r2, #64	; 0x40
 8002930:	8812      	ldrh	r2, [r2, #0]
 8002932:	fbb3 f3f2 	udiv	r3, r3, r2
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 818e 	beq.w	8002c5c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3354      	adds	r3, #84	; 0x54
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	f083 0301 	eor.w	r3, r3, #1
 8002954:	b2d8      	uxtb	r0, r3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3354      	adds	r3, #84	; 0x54
 8002964:	4602      	mov	r2, r0
 8002966:	701a      	strb	r2, [r3, #0]
}
 8002968:	e178      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3354      	adds	r3, #84	; 0x54
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f083 0301 	eor.w	r3, r3, #1
 800297e:	b2d8      	uxtb	r0, r3
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3354      	adds	r3, #84	; 0x54
 800298e:	4602      	mov	r2, r0
 8002990:	701a      	strb	r2, [r3, #0]
}
 8002992:	e163      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	f040 80f6 	bne.w	8002b98 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3361      	adds	r3, #97	; 0x61
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d109      	bne.n	80029d4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3360      	adds	r3, #96	; 0x60
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e0c9      	b.n	8002b68 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3361      	adds	r3, #97	; 0x61
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d109      	bne.n	80029fc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3360      	adds	r3, #96	; 0x60
 80029f6:	2205      	movs	r2, #5
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e0b5      	b.n	8002b68 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3361      	adds	r3, #97	; 0x61
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d009      	beq.n	8002a24 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3361      	adds	r3, #97	; 0x61
 8002a1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d150      	bne.n	8002ac6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	335c      	adds	r3, #92	; 0x5c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	202c      	movs	r0, #44	; 0x2c
 8002a3c:	fb00 f303 	mul.w	r3, r0, r3
 8002a40:	440b      	add	r3, r1
 8002a42:	335c      	adds	r3, #92	; 0x5c
 8002a44:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	335c      	adds	r3, #92	; 0x5c
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d912      	bls.n	8002a80 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	335c      	adds	r3, #92	; 0x5c
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3360      	adds	r3, #96	; 0x60
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a7e:	e073      	b.n	8002b68 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3360      	adds	r3, #96	; 0x60
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aa8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ab0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ac4:	e050      	b.n	8002b68 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3361      	adds	r3, #97	; 0x61
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d122      	bne.n	8002b20 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3360      	adds	r3, #96	; 0x60
 8002ae8:	2202      	movs	r2, #2
 8002aea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b02:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b0a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e023      	b.n	8002b68 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3361      	adds	r3, #97	; 0x61
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b07      	cmp	r3, #7
 8002b32:	d119      	bne.n	8002b68 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	335c      	adds	r3, #92	; 0x5c
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	202c      	movs	r0, #44	; 0x2c
 8002b4c:	fb00 f303 	mul.w	r3, r0, r3
 8002b50:	440b      	add	r3, r1
 8002b52:	335c      	adds	r3, #92	; 0x5c
 8002b54:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3360      	adds	r3, #96	; 0x60
 8002b64:	2204      	movs	r2, #4
 8002b66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	2302      	movs	r3, #2
 8002b78:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	b2d9      	uxtb	r1, r3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	202c      	movs	r0, #44	; 0x2c
 8002b84:	fb00 f303 	mul.w	r3, r0, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3360      	adds	r3, #96	; 0x60
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f005 febb 	bl	800890c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b96:	e061      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d156      	bne.n	8002c5c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	333f      	adds	r3, #63	; 0x3f
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d111      	bne.n	8002be6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	335c      	adds	r3, #92	; 0x5c
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f003 fbf1 	bl	80063c6 <USB_HC_Halt>
 8002be4:	e031      	b.n	8002c4a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	333f      	adds	r3, #63	; 0x3f
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	333f      	adds	r3, #63	; 0x3f
 8002c08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d11d      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	335c      	adds	r3, #92	; 0x5c
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d110      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3361      	adds	r3, #97	; 0x61
 8002c36:	2203      	movs	r2, #3
 8002c38:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fbbe 	bl	80063c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	461a      	mov	r2, r3
 8002c58:	2310      	movs	r3, #16
 8002c5a:	6093      	str	r3, [r2, #8]
}
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d11a      	bne.n	8002cca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3361      	adds	r3, #97	; 0x61
 8002cb4:	2206      	movs	r2, #6
 8002cb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 fb7f 	bl	80063c6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002cc8:	e331      	b.n	800332e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d12e      	bne.n	8002d3e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cec:	461a      	mov	r2, r3
 8002cee:	2320      	movs	r3, #32
 8002cf0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	333d      	adds	r3, #61	; 0x3d
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	f040 8313 	bne.w	800332e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	333d      	adds	r3, #61	; 0x3d
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3360      	adds	r3, #96	; 0x60
 8002d28:	2202      	movs	r2, #2
 8002d2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 fb45 	bl	80063c6 <USB_HC_Halt>
}
 8002d3c:	e2f7      	b.n	800332e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d54:	d112      	bne.n	8002d7c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d62:	461a      	mov	r2, r3
 8002d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f003 fb26 	bl	80063c6 <USB_HC_Halt>
}
 8002d7a:	e2d8      	b.n	800332e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	335c      	adds	r3, #92	; 0x5c
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b40      	cmp	r3, #64	; 0x40
 8002db8:	d111      	bne.n	8002dde <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	333d      	adds	r3, #61	; 0x3d
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2340      	movs	r3, #64	; 0x40
 8002ddc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dea:	461a      	mov	r2, r3
 8002dec:	2301      	movs	r3, #1
 8002dee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3361      	adds	r3, #97	; 0x61
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 fada 	bl	80063c6 <USB_HC_Halt>
}
 8002e12:	e28c      	b.n	800332e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d12c      	bne.n	8002e84 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3361      	adds	r3, #97	; 0x61
 8002e38:	2204      	movs	r2, #4
 8002e3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	333d      	adds	r3, #61	; 0x3d
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	335c      	adds	r3, #92	; 0x5c
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 faab 	bl	80063c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2340      	movs	r3, #64	; 0x40
 8002e80:	6093      	str	r3, [r2, #8]
}
 8002e82:	e254      	b.n	800332e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d11a      	bne.n	8002ed0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2308      	movs	r3, #8
 8002eaa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3361      	adds	r3, #97	; 0x61
 8002eba:	2205      	movs	r2, #5
 8002ebc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 fa7c 	bl	80063c6 <USB_HC_Halt>
}
 8002ece:	e22e      	b.n	800332e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d140      	bne.n	8002f68 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	335c      	adds	r3, #92	; 0x5c
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3361      	adds	r3, #97	; 0x61
 8002f06:	2203      	movs	r2, #3
 8002f08:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	212c      	movs	r1, #44	; 0x2c
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	333d      	adds	r3, #61	; 0x3d
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d112      	bne.n	8002f44 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	212c      	movs	r1, #44	; 0x2c
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	333c      	adds	r3, #60	; 0x3c
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	212c      	movs	r1, #44	; 0x2c
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	333d      	adds	r3, #61	; 0x3d
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f003 fa39 	bl	80063c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	461a      	mov	r2, r3
 8002f62:	2310      	movs	r3, #16
 8002f64:	6093      	str	r3, [r2, #8]
}
 8002f66:	e1e2      	b.n	800332e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b80      	cmp	r3, #128	; 0x80
 8002f7c:	d164      	bne.n	8003048 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d111      	bne.n	8002faa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3361      	adds	r3, #97	; 0x61
 8002f94:	2206      	movs	r2, #6
 8002f96:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 fa0f 	bl	80063c6 <USB_HC_Halt>
 8002fa8:	e044      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	335c      	adds	r3, #92	; 0x5c
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	202c      	movs	r0, #44	; 0x2c
 8002fc2:	fb00 f303 	mul.w	r3, r0, r3
 8002fc6:	440b      	add	r3, r1
 8002fc8:	335c      	adds	r3, #92	; 0x5c
 8002fca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	335c      	adds	r3, #92	; 0x5c
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d920      	bls.n	8003022 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	212c      	movs	r1, #44	; 0x2c
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	335c      	adds	r3, #92	; 0x5c
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3360      	adds	r3, #96	; 0x60
 8003000:	2204      	movs	r2, #4
 8003002:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	b2d9      	uxtb	r1, r3
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	202c      	movs	r0, #44	; 0x2c
 800300e:	fb00 f303 	mul.w	r3, r0, r3
 8003012:	4413      	add	r3, r2
 8003014:	3360      	adds	r3, #96	; 0x60
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f005 fc76 	bl	800890c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003020:	e008      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	3360      	adds	r3, #96	; 0x60
 8003030:	2202      	movs	r2, #2
 8003032:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	6093      	str	r3, [r2, #8]
}
 8003046:	e172      	b.n	800332e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305e:	d11b      	bne.n	8003098 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3361      	adds	r3, #97	; 0x61
 800306e:	2208      	movs	r2, #8
 8003070:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f003 f9a2 	bl	80063c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	461a      	mov	r2, r3
 8003090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003094:	6093      	str	r3, [r2, #8]
}
 8003096:	e14a      	b.n	800332e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	f040 813f 	bne.w	800332e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3361      	adds	r3, #97	; 0x61
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d17d      	bne.n	80031c0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3360      	adds	r3, #96	; 0x60
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	333f      	adds	r3, #63	; 0x3f
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d00a      	beq.n	8003100 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	333f      	adds	r3, #63	; 0x3f
 80030f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	f040 8100 	bne.w	8003300 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d113      	bne.n	8003130 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3355      	adds	r3, #85	; 0x55
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	f083 0301 	eor.w	r3, r3, #1
 800311c:	b2d8      	uxtb	r0, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	212c      	movs	r1, #44	; 0x2c
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	3355      	adds	r3, #85	; 0x55
 800312c:	4602      	mov	r2, r0
 800312e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 80e3 	bne.w	8003300 <HCD_HC_OUT_IRQHandler+0x69c>
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	334c      	adds	r3, #76	; 0x4c
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80d8 	beq.w	8003300 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	334c      	adds	r3, #76	; 0x4c
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	202c      	movs	r0, #44	; 0x2c
 8003166:	fb00 f202 	mul.w	r2, r0, r2
 800316a:	440a      	add	r2, r1
 800316c:	3240      	adds	r2, #64	; 0x40
 800316e:	8812      	ldrh	r2, [r2, #0]
 8003170:	4413      	add	r3, r2
 8003172:	3b01      	subs	r3, #1
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	202c      	movs	r0, #44	; 0x2c
 800317a:	fb00 f202 	mul.w	r2, r0, r2
 800317e:	440a      	add	r2, r1
 8003180:	3240      	adds	r2, #64	; 0x40
 8003182:	8812      	ldrh	r2, [r2, #0]
 8003184:	fbb3 f3f2 	udiv	r3, r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80b5 	beq.w	8003300 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3355      	adds	r3, #85	; 0x55
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	f083 0301 	eor.w	r3, r3, #1
 80031aa:	b2d8      	uxtb	r0, r3
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3355      	adds	r3, #85	; 0x55
 80031ba:	4602      	mov	r2, r0
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e09f      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3361      	adds	r3, #97	; 0x61
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d109      	bne.n	80031e8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	212c      	movs	r1, #44	; 0x2c
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	4413      	add	r3, r2
 80031e0:	3360      	adds	r3, #96	; 0x60
 80031e2:	2202      	movs	r2, #2
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e08b      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3361      	adds	r3, #97	; 0x61
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d109      	bne.n	8003210 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	212c      	movs	r1, #44	; 0x2c
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	3360      	adds	r3, #96	; 0x60
 800320a:	2202      	movs	r2, #2
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e077      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3361      	adds	r3, #97	; 0x61
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b05      	cmp	r3, #5
 8003222:	d109      	bne.n	8003238 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3360      	adds	r3, #96	; 0x60
 8003232:	2205      	movs	r2, #5
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e063      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3361      	adds	r3, #97	; 0x61
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b06      	cmp	r3, #6
 800324a:	d009      	beq.n	8003260 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3361      	adds	r3, #97	; 0x61
 800325a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800325c:	2b08      	cmp	r3, #8
 800325e:	d14f      	bne.n	8003300 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	335c      	adds	r3, #92	; 0x5c
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	202c      	movs	r0, #44	; 0x2c
 8003278:	fb00 f303 	mul.w	r3, r0, r3
 800327c:	440b      	add	r3, r1
 800327e:	335c      	adds	r3, #92	; 0x5c
 8003280:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	335c      	adds	r3, #92	; 0x5c
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d912      	bls.n	80032bc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	212c      	movs	r1, #44	; 0x2c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	335c      	adds	r3, #92	; 0x5c
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3360      	adds	r3, #96	; 0x60
 80032b6:	2204      	movs	r2, #4
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e021      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	3360      	adds	r3, #96	; 0x60
 80032ca:	2202      	movs	r2, #2
 80032cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032e4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032ec:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	461a      	mov	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	4413      	add	r3, r2
 8003308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330c:	461a      	mov	r2, r3
 800330e:	2302      	movs	r3, #2
 8003310:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	b2d9      	uxtb	r1, r3
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	202c      	movs	r0, #44	; 0x2c
 800331c:	fb00 f303 	mul.w	r3, r0, r3
 8003320:	4413      	add	r3, r2
 8003322:	3360      	adds	r3, #96	; 0x60
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f005 faef 	bl	800890c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800332e:	bf00      	nop
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b08a      	sub	sp, #40	; 0x28
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	0c5b      	lsrs	r3, r3, #17
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800336a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d004      	beq.n	800337c <HCD_RXQLVL_IRQHandler+0x46>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b05      	cmp	r3, #5
 8003376:	f000 80a9 	beq.w	80034cc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800337a:	e0aa      	b.n	80034d2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80a6 	beq.w	80034d0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3344      	adds	r3, #68	; 0x44
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 809b 	beq.w	80034d0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3350      	adds	r3, #80	; 0x50
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	441a      	add	r2, r3
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	202c      	movs	r0, #44	; 0x2c
 80033b4:	fb00 f303 	mul.w	r3, r0, r3
 80033b8:	440b      	add	r3, r1
 80033ba:	334c      	adds	r3, #76	; 0x4c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d87a      	bhi.n	80034b8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3344      	adds	r3, #68	; 0x44
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	b292      	uxth	r2, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	f002 fb4a 	bl	8005a74 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3344      	adds	r3, #68	; 0x44
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	441a      	add	r2, r3
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	202c      	movs	r0, #44	; 0x2c
 80033fa:	fb00 f303 	mul.w	r3, r0, r3
 80033fe:	440b      	add	r3, r1
 8003400:	3344      	adds	r3, #68	; 0x44
 8003402:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3350      	adds	r3, #80	; 0x50
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	441a      	add	r2, r3
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	202c      	movs	r0, #44	; 0x2c
 800341e:	fb00 f303 	mul.w	r3, r0, r3
 8003422:	440b      	add	r3, r1
 8003424:	3350      	adds	r3, #80	; 0x50
 8003426:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	0cdb      	lsrs	r3, r3, #19
 8003438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800343c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3340      	adds	r3, #64	; 0x40
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4293      	cmp	r3, r2
 8003454:	d13c      	bne.n	80034d0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d039      	beq.n	80034d0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003472:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800347a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	3354      	adds	r3, #84	; 0x54
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	f083 0301 	eor.w	r3, r3, #1
 80034a2:	b2d8      	uxtb	r0, r3
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3354      	adds	r3, #84	; 0x54
 80034b2:	4602      	mov	r2, r0
 80034b4:	701a      	strb	r2, [r3, #0]
      break;
 80034b6:	e00b      	b.n	80034d0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	3360      	adds	r3, #96	; 0x60
 80034c6:	2204      	movs	r2, #4
 80034c8:	701a      	strb	r2, [r3, #0]
      break;
 80034ca:	e001      	b.n	80034d0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80034d0:	bf00      	nop
  }
}
 80034d2:	bf00      	nop
 80034d4:	3728      	adds	r7, #40	; 0x28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003506:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b02      	cmp	r3, #2
 8003510:	d10b      	bne.n	800352a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d102      	bne.n	8003522 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f005 f9d9 	bl	80088d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b08      	cmp	r3, #8
 8003532:	d132      	bne.n	800359a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f043 0308 	orr.w	r3, r3, #8
 800353a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b04      	cmp	r3, #4
 8003544:	d126      	bne.n	8003594 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d113      	bne.n	8003576 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003554:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003558:	d106      	bne.n	8003568 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2102      	movs	r1, #2
 8003560:	4618      	mov	r0, r3
 8003562:	f002 fbf5 	bl	8005d50 <USB_InitFSLSPClkSel>
 8003566:	e011      	b.n	800358c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f002 fbee 	bl	8005d50 <USB_InitFSLSPClkSel>
 8003574:	e00a      	b.n	800358c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d106      	bne.n	800358c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003584:	461a      	mov	r2, r3
 8003586:	f64e 2360 	movw	r3, #60000	; 0xea60
 800358a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f005 f9cb 	bl	8008928 <HAL_HCD_PortEnabled_Callback>
 8003592:	e002      	b.n	800359a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f005 f9d5 	bl	8008944 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d103      	bne.n	80035ac <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f043 0320 	orr.w	r3, r3, #32
 80035aa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035b2:	461a      	mov	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	6013      	str	r3, [r2, #0]
}
 80035b8:	bf00      	nop
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e12b      	b.n	800382a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd f902 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	; 0x24
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003624:	f001 fa20 	bl	8004a68 <HAL_RCC_GetPCLK1Freq>
 8003628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4a81      	ldr	r2, [pc, #516]	; (8003834 <HAL_I2C_Init+0x274>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d807      	bhi.n	8003644 <HAL_I2C_Init+0x84>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a80      	ldr	r2, [pc, #512]	; (8003838 <HAL_I2C_Init+0x278>)
 8003638:	4293      	cmp	r3, r2
 800363a:	bf94      	ite	ls
 800363c:	2301      	movls	r3, #1
 800363e:	2300      	movhi	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e006      	b.n	8003652 <HAL_I2C_Init+0x92>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4a7d      	ldr	r2, [pc, #500]	; (800383c <HAL_I2C_Init+0x27c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	bf94      	ite	ls
 800364c:	2301      	movls	r3, #1
 800364e:	2300      	movhi	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0e7      	b.n	800382a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a78      	ldr	r2, [pc, #480]	; (8003840 <HAL_I2C_Init+0x280>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	0c9b      	lsrs	r3, r3, #18
 8003664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a6a      	ldr	r2, [pc, #424]	; (8003834 <HAL_I2C_Init+0x274>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d802      	bhi.n	8003694 <HAL_I2C_Init+0xd4>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3301      	adds	r3, #1
 8003692:	e009      	b.n	80036a8 <HAL_I2C_Init+0xe8>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	4a69      	ldr	r2, [pc, #420]	; (8003844 <HAL_I2C_Init+0x284>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	099b      	lsrs	r3, r3, #6
 80036a6:	3301      	adds	r3, #1
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	495c      	ldr	r1, [pc, #368]	; (8003834 <HAL_I2C_Init+0x274>)
 80036c4:	428b      	cmp	r3, r1
 80036c6:	d819      	bhi.n	80036fc <HAL_I2C_Init+0x13c>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1e59      	subs	r1, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d6:	1c59      	adds	r1, r3, #1
 80036d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036dc:	400b      	ands	r3, r1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_I2C_Init+0x138>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1e59      	subs	r1, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f6:	e051      	b.n	800379c <HAL_I2C_Init+0x1dc>
 80036f8:	2304      	movs	r3, #4
 80036fa:	e04f      	b.n	800379c <HAL_I2C_Init+0x1dc>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d111      	bne.n	8003728 <HAL_I2C_Init+0x168>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e58      	subs	r0, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	440b      	add	r3, r1
 8003712:	fbb0 f3f3 	udiv	r3, r0, r3
 8003716:	3301      	adds	r3, #1
 8003718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e012      	b.n	800374e <HAL_I2C_Init+0x18e>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1e58      	subs	r0, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	0099      	lsls	r1, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	fbb0 f3f3 	udiv	r3, r0, r3
 800373e:	3301      	adds	r3, #1
 8003740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Init+0x196>
 8003752:	2301      	movs	r3, #1
 8003754:	e022      	b.n	800379c <HAL_I2C_Init+0x1dc>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10e      	bne.n	800377c <HAL_I2C_Init+0x1bc>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1e58      	subs	r0, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	440b      	add	r3, r1
 800376c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800377a:	e00f      	b.n	800379c <HAL_I2C_Init+0x1dc>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1e58      	subs	r0, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	0099      	lsls	r1, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003792:	3301      	adds	r3, #1
 8003794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	6809      	ldr	r1, [r1, #0]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6911      	ldr	r1, [r2, #16]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68d2      	ldr	r2, [r2, #12]
 80037d6:	4311      	orrs	r1, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	430b      	orrs	r3, r1
 80037de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	000186a0 	.word	0x000186a0
 8003838:	001e847f 	.word	0x001e847f
 800383c:	003d08ff 	.word	0x003d08ff
 8003840:	431bde83 	.word	0x431bde83
 8003844:	10624dd3 	.word	0x10624dd3

08003848 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e128      	b.n	8003aac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a90      	ldr	r2, [pc, #576]	; (8003ab4 <HAL_I2S_Init+0x26c>)
 8003872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7fd f833 	bl	80008e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003890:	f023 030f 	bic.w	r3, r3, #15
 8003894:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2202      	movs	r2, #2
 800389c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d060      	beq.n	8003968 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80038ae:	2310      	movs	r3, #16
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e001      	b.n	80038b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80038b4:	2320      	movs	r3, #32
 80038b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d802      	bhi.n	80038c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80038c6:	2001      	movs	r0, #1
 80038c8:	f001 f9c4 	bl	8004c54 <HAL_RCCEx_GetPeriphCLKFreq>
 80038cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d6:	d125      	bne.n	8003924 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d010      	beq.n	8003902 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	461a      	mov	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	3305      	adds	r3, #5
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	e01f      	b.n	8003942 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	fbb2 f2f3 	udiv	r2, r2, r3
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	461a      	mov	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	3305      	adds	r3, #5
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	e00e      	b.n	8003942 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	fbb2 f2f3 	udiv	r2, r2, r3
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	461a      	mov	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	3305      	adds	r3, #5
 8003940:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4a5c      	ldr	r2, [pc, #368]	; (8003ab8 <HAL_I2S_Init+0x270>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	085b      	lsrs	r3, r3, #1
 800395e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e003      	b.n	8003970 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003968:	2302      	movs	r3, #2
 800396a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d902      	bls.n	800397c <HAL_I2S_Init+0x134>
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2bff      	cmp	r3, #255	; 0xff
 800397a:	d907      	bls.n	800398c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	f043 0210 	orr.w	r2, r3, #16
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e08f      	b.n	8003aac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	ea42 0103 	orr.w	r1, r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	430a      	orrs	r2, r1
 800399e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039aa:	f023 030f 	bic.w	r3, r3, #15
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6851      	ldr	r1, [r2, #4]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6892      	ldr	r2, [r2, #8]
 80039b6:	4311      	orrs	r1, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68d2      	ldr	r2, [r2, #12]
 80039bc:	4311      	orrs	r1, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6992      	ldr	r2, [r2, #24]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d161      	bne.n	8003a9c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a38      	ldr	r2, [pc, #224]	; (8003abc <HAL_I2S_Init+0x274>)
 80039dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a37      	ldr	r2, [pc, #220]	; (8003ac0 <HAL_I2S_Init+0x278>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <HAL_I2S_Init+0x1a4>
 80039e8:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <HAL_I2S_Init+0x27c>)
 80039ea:	e001      	b.n	80039f0 <HAL_I2S_Init+0x1a8>
 80039ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	4932      	ldr	r1, [pc, #200]	; (8003ac0 <HAL_I2S_Init+0x278>)
 80039f8:	428a      	cmp	r2, r1
 80039fa:	d101      	bne.n	8003a00 <HAL_I2S_Init+0x1b8>
 80039fc:	4a31      	ldr	r2, [pc, #196]	; (8003ac4 <HAL_I2S_Init+0x27c>)
 80039fe:	e001      	b.n	8003a04 <HAL_I2S_Init+0x1bc>
 8003a00:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a08:	f023 030f 	bic.w	r3, r3, #15
 8003a0c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2b      	ldr	r2, [pc, #172]	; (8003ac0 <HAL_I2S_Init+0x278>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_I2S_Init+0x1d4>
 8003a18:	4b2a      	ldr	r3, [pc, #168]	; (8003ac4 <HAL_I2S_Init+0x27c>)
 8003a1a:	e001      	b.n	8003a20 <HAL_I2S_Init+0x1d8>
 8003a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a20:	2202      	movs	r2, #2
 8003a22:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a25      	ldr	r2, [pc, #148]	; (8003ac0 <HAL_I2S_Init+0x278>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2S_Init+0x1ea>
 8003a2e:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <HAL_I2S_Init+0x27c>)
 8003a30:	e001      	b.n	8003a36 <HAL_I2S_Init+0x1ee>
 8003a32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a42:	d003      	beq.n	8003a4c <HAL_I2S_Init+0x204>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d103      	bne.n	8003a54 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	e001      	b.n	8003a58 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a62:	4313      	orrs	r3, r2
 8003a64:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a76:	4313      	orrs	r3, r2
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	897b      	ldrh	r3, [r7, #10]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a84:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a0d      	ldr	r2, [pc, #52]	; (8003ac0 <HAL_I2S_Init+0x278>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2S_Init+0x24c>
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_I2S_Init+0x27c>)
 8003a92:	e001      	b.n	8003a98 <HAL_I2S_Init+0x250>
 8003a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a98:	897a      	ldrh	r2, [r7, #10]
 8003a9a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	08003bbf 	.word	0x08003bbf
 8003ab8:	cccccccd 	.word	0xcccccccd
 8003abc:	08003cd5 	.word	0x08003cd5
 8003ac0:	40003800 	.word	0x40003800
 8003ac4:	40003400 	.word	0x40003400

08003ac8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	881a      	ldrh	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	1c9a      	adds	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10e      	bne.n	8003b58 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b48:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ffb8 	bl	8003ac8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b58:	bf00      	nop
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	b292      	uxth	r2, r2
 8003b74:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10e      	bne.n	8003bb6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ba6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ff93 	bl	8003adc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b086      	sub	sp, #24
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d13a      	bne.n	8003c50 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d109      	bne.n	8003bf8 <I2S_IRQHandler+0x3a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d102      	bne.n	8003bf8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff ffb4 	bl	8003b60 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d126      	bne.n	8003c50 <I2S_IRQHandler+0x92>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d11f      	bne.n	8003c50 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	f043 0202 	orr.w	r2, r3, #2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff ff50 	bl	8003af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d136      	bne.n	8003cca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d109      	bne.n	8003c7a <I2S_IRQHandler+0xbc>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b80      	cmp	r3, #128	; 0x80
 8003c72:	d102      	bne.n	8003c7a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff ff45 	bl	8003b04 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d122      	bne.n	8003cca <I2S_IRQHandler+0x10c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d11b      	bne.n	8003cca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ca0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	f043 0204 	orr.w	r2, r3, #4
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ff13 	bl	8003af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a92      	ldr	r2, [pc, #584]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003cee:	4b92      	ldr	r3, [pc, #584]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cf0:	e001      	b.n	8003cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003cf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a8b      	ldr	r2, [pc, #556]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d0c:	4b8a      	ldr	r3, [pc, #552]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d0e:	e001      	b.n	8003d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d20:	d004      	beq.n	8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 8099 	bne.w	8003e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d107      	bne.n	8003d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f925 	bl	8003f90 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f9c8 	bl	80040f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d13a      	bne.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d035      	beq.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a6e      	ldr	r2, [pc, #440]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d7e:	4b6e      	ldr	r3, [pc, #440]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d80:	e001      	b.n	8003d86 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4969      	ldr	r1, [pc, #420]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d8e:	428b      	cmp	r3, r1
 8003d90:	d101      	bne.n	8003d96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d92:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d94:	e001      	b.n	8003d9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d9e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f043 0202 	orr.w	r2, r3, #2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff fe88 	bl	8003af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	f040 80c3 	bne.w	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80bd 	beq.w	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a49      	ldr	r2, [pc, #292]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e14:	e001      	b.n	8003e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4944      	ldr	r1, [pc, #272]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e22:	428b      	cmp	r3, r1
 8003e24:	d101      	bne.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e26:	4b44      	ldr	r3, [pc, #272]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e28:	e001      	b.n	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e32:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e34:	2300      	movs	r3, #0
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	f043 0204 	orr.w	r2, r3, #4
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff fe4a 	bl	8003af0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e5c:	e089      	b.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d107      	bne.n	8003e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f8be 	bl	8003ff4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d107      	bne.n	8003e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f8fd 	bl	800408c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d12f      	bne.n	8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d02a      	beq.n	8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003eb4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1e      	ldr	r2, [pc, #120]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec2:	e001      	b.n	8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4919      	ldr	r1, [pc, #100]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ed4:	4b18      	ldr	r3, [pc, #96]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed6:	e001      	b.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003edc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ee0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	f043 0202 	orr.w	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fdfa 	bl	8003af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d136      	bne.n	8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d031      	beq.n	8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d101      	bne.n	8003f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f1c:	e001      	b.n	8003f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4902      	ldr	r1, [pc, #8]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f2a:	428b      	cmp	r3, r1
 8003f2c:	d106      	bne.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f2e:	4b02      	ldr	r3, [pc, #8]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f30:	e006      	b.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f32:	bf00      	nop
 8003f34:	40003800 	.word	0x40003800
 8003f38:	40003400 	.word	0x40003400
 8003f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f44:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f043 0204 	orr.w	r2, r3, #4
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff fdc0 	bl	8003af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f70:	e000      	b.n	8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f72:	bf00      	nop
}
 8003f74:	bf00      	nop
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c99      	adds	r1, r3, #2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6251      	str	r1, [r2, #36]	; 0x24
 8003fa2:	881a      	ldrh	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d113      	bne.n	8003fea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fd0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff ffc9 	bl	8003f7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	1c99      	adds	r1, r3, #2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6251      	str	r1, [r2, #36]	; 0x24
 8004006:	8819      	ldrh	r1, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <I2SEx_TxISR_I2SExt+0x90>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d101      	bne.n	8004016 <I2SEx_TxISR_I2SExt+0x22>
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <I2SEx_TxISR_I2SExt+0x94>)
 8004014:	e001      	b.n	800401a <I2SEx_TxISR_I2SExt+0x26>
 8004016:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800401a:	460a      	mov	r2, r1
 800401c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d121      	bne.n	800407a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a12      	ldr	r2, [pc, #72]	; (8004084 <I2SEx_TxISR_I2SExt+0x90>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <I2SEx_TxISR_I2SExt+0x50>
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <I2SEx_TxISR_I2SExt+0x94>)
 8004042:	e001      	b.n	8004048 <I2SEx_TxISR_I2SExt+0x54>
 8004044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	490d      	ldr	r1, [pc, #52]	; (8004084 <I2SEx_TxISR_I2SExt+0x90>)
 8004050:	428b      	cmp	r3, r1
 8004052:	d101      	bne.n	8004058 <I2SEx_TxISR_I2SExt+0x64>
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <I2SEx_TxISR_I2SExt+0x94>)
 8004056:	e001      	b.n	800405c <I2SEx_TxISR_I2SExt+0x68>
 8004058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004060:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ff81 	bl	8003f7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40003800 	.word	0x40003800
 8004088:	40003400 	.word	0x40003400

0800408c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68d8      	ldr	r0, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	1c99      	adds	r1, r3, #2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040a4:	b282      	uxth	r2, r0
 80040a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d113      	bne.n	80040e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff ff4a 	bl	8003f7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a20      	ldr	r2, [pc, #128]	; (8004180 <I2SEx_RxISR_I2SExt+0x90>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <I2SEx_RxISR_I2SExt+0x16>
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <I2SEx_RxISR_I2SExt+0x94>)
 8004104:	e001      	b.n	800410a <I2SEx_RxISR_I2SExt+0x1a>
 8004106:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800410a:	68d8      	ldr	r0, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	1c99      	adds	r1, r3, #2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004116:	b282      	uxth	r2, r0
 8004118:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d121      	bne.n	8004176 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <I2SEx_RxISR_I2SExt+0x90>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d101      	bne.n	8004140 <I2SEx_RxISR_I2SExt+0x50>
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <I2SEx_RxISR_I2SExt+0x94>)
 800413e:	e001      	b.n	8004144 <I2SEx_RxISR_I2SExt+0x54>
 8004140:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	490d      	ldr	r1, [pc, #52]	; (8004180 <I2SEx_RxISR_I2SExt+0x90>)
 800414c:	428b      	cmp	r3, r1
 800414e:	d101      	bne.n	8004154 <I2SEx_RxISR_I2SExt+0x64>
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <I2SEx_RxISR_I2SExt+0x94>)
 8004152:	e001      	b.n	8004158 <I2SEx_RxISR_I2SExt+0x68>
 8004154:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004158:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800415c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ff03 	bl	8003f7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40003800 	.word	0x40003800
 8004184:	40003400 	.word	0x40003400

08004188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e267      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d075      	beq.n	8004292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a6:	4b88      	ldr	r3, [pc, #544]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d00c      	beq.n	80041cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b2:	4b85      	ldr	r3, [pc, #532]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d112      	bne.n	80041e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041be:	4b82      	ldr	r3, [pc, #520]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ca:	d10b      	bne.n	80041e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	4b7e      	ldr	r3, [pc, #504]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d05b      	beq.n	8004290 <HAL_RCC_OscConfig+0x108>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d157      	bne.n	8004290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e242      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ec:	d106      	bne.n	80041fc <HAL_RCC_OscConfig+0x74>
 80041ee:	4b76      	ldr	r3, [pc, #472]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a75      	ldr	r2, [pc, #468]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e01d      	b.n	8004238 <HAL_RCC_OscConfig+0xb0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0x98>
 8004206:	4b70      	ldr	r3, [pc, #448]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a6f      	ldr	r2, [pc, #444]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 800420c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b6d      	ldr	r3, [pc, #436]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a6c      	ldr	r2, [pc, #432]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0xb0>
 8004220:	4b69      	ldr	r3, [pc, #420]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a68      	ldr	r2, [pc, #416]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 8004226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4b66      	ldr	r3, [pc, #408]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a65      	ldr	r2, [pc, #404]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 8004232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fd fa8c 	bl	800175c <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004248:	f7fd fa88 	bl	800175c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	; 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e207      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	4b5b      	ldr	r3, [pc, #364]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0xc0>
 8004266:	e014      	b.n	8004292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004268:	f7fd fa78 	bl	800175c <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004270:	f7fd fa74 	bl	800175c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e1f3      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	4b51      	ldr	r3, [pc, #324]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0xe8>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d063      	beq.n	8004366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800429e:	4b4a      	ldr	r3, [pc, #296]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00b      	beq.n	80042c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042aa:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d11c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b6:	4b44      	ldr	r3, [pc, #272]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d116      	bne.n	80042f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c2:	4b41      	ldr	r3, [pc, #260]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_RCC_OscConfig+0x152>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d001      	beq.n	80042da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e1c7      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042da:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4937      	ldr	r1, [pc, #220]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ee:	e03a      	b.n	8004366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f8:	4b34      	ldr	r3, [pc, #208]	; (80043cc <HAL_RCC_OscConfig+0x244>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fe:	f7fd fa2d 	bl	800175c <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004306:	f7fd fa29 	bl	800175c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e1a8      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004318:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4925      	ldr	r1, [pc, #148]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 8004334:	4313      	orrs	r3, r2
 8004336:	600b      	str	r3, [r1, #0]
 8004338:	e015      	b.n	8004366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <HAL_RCC_OscConfig+0x244>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fd fa0c 	bl	800175c <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004348:	f7fd fa08 	bl	800175c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e187      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435a:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d036      	beq.n	80043e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <HAL_RCC_OscConfig+0x248>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004380:	f7fd f9ec 	bl	800175c <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004388:	f7fd f9e8 	bl	800175c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e167      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439a:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_OscConfig+0x240>)
 800439c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x200>
 80043a6:	e01b      	b.n	80043e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a8:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <HAL_RCC_OscConfig+0x248>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ae:	f7fd f9d5 	bl	800175c <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b4:	e00e      	b.n	80043d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b6:	f7fd f9d1 	bl	800175c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d907      	bls.n	80043d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e150      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
 80043c8:	40023800 	.word	0x40023800
 80043cc:	42470000 	.word	0x42470000
 80043d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d4:	4b88      	ldr	r3, [pc, #544]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 80043d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1ea      	bne.n	80043b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8097 	beq.w	800451c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ee:	2300      	movs	r3, #0
 80043f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f2:	4b81      	ldr	r3, [pc, #516]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	4b7d      	ldr	r3, [pc, #500]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	4a7c      	ldr	r2, [pc, #496]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440c:	6413      	str	r3, [r2, #64]	; 0x40
 800440e:	4b7a      	ldr	r3, [pc, #488]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800441a:	2301      	movs	r3, #1
 800441c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441e:	4b77      	ldr	r3, [pc, #476]	; (80045fc <HAL_RCC_OscConfig+0x474>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d118      	bne.n	800445c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800442a:	4b74      	ldr	r3, [pc, #464]	; (80045fc <HAL_RCC_OscConfig+0x474>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a73      	ldr	r2, [pc, #460]	; (80045fc <HAL_RCC_OscConfig+0x474>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004436:	f7fd f991 	bl	800175c <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443e:	f7fd f98d 	bl	800175c <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e10c      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004450:	4b6a      	ldr	r3, [pc, #424]	; (80045fc <HAL_RCC_OscConfig+0x474>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d106      	bne.n	8004472 <HAL_RCC_OscConfig+0x2ea>
 8004464:	4b64      	ldr	r3, [pc, #400]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	4a63      	ldr	r2, [pc, #396]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	6713      	str	r3, [r2, #112]	; 0x70
 8004470:	e01c      	b.n	80044ac <HAL_RCC_OscConfig+0x324>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b05      	cmp	r3, #5
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x30c>
 800447a:	4b5f      	ldr	r3, [pc, #380]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	4a5e      	ldr	r2, [pc, #376]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 8004480:	f043 0304 	orr.w	r3, r3, #4
 8004484:	6713      	str	r3, [r2, #112]	; 0x70
 8004486:	4b5c      	ldr	r3, [pc, #368]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a5b      	ldr	r2, [pc, #364]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	6713      	str	r3, [r2, #112]	; 0x70
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0x324>
 8004494:	4b58      	ldr	r3, [pc, #352]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a57      	ldr	r2, [pc, #348]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	4b55      	ldr	r3, [pc, #340]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a54      	ldr	r2, [pc, #336]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 80044a6:	f023 0304 	bic.w	r3, r3, #4
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d015      	beq.n	80044e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fd f952 	bl	800175c <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044bc:	f7fd f94e 	bl	800175c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e0cb      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d2:	4b49      	ldr	r3, [pc, #292]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0ee      	beq.n	80044bc <HAL_RCC_OscConfig+0x334>
 80044de:	e014      	b.n	800450a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e0:	f7fd f93c 	bl	800175c <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f7fd f938 	bl	800175c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e0b5      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fe:	4b3e      	ldr	r3, [pc, #248]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1ee      	bne.n	80044e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d105      	bne.n	800451c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004510:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	4a38      	ldr	r2, [pc, #224]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 8004516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80a1 	beq.w	8004668 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004526:	4b34      	ldr	r3, [pc, #208]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b08      	cmp	r3, #8
 8004530:	d05c      	beq.n	80045ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d141      	bne.n	80045be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453a:	4b31      	ldr	r3, [pc, #196]	; (8004600 <HAL_RCC_OscConfig+0x478>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004540:	f7fd f90c 	bl	800175c <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004548:	f7fd f908 	bl	800175c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e087      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	4b27      	ldr	r3, [pc, #156]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	019b      	lsls	r3, r3, #6
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	3b01      	subs	r3, #1
 8004580:	041b      	lsls	r3, r3, #16
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	491b      	ldr	r1, [pc, #108]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004590:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <HAL_RCC_OscConfig+0x478>)
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004596:	f7fd f8e1 	bl	800175c <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459e:	f7fd f8dd 	bl	800175c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e05c      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b0:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0x416>
 80045bc:	e054      	b.n	8004668 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045be:	4b10      	ldr	r3, [pc, #64]	; (8004600 <HAL_RCC_OscConfig+0x478>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fd f8ca 	bl	800175c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fd f8c6 	bl	800175c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e045      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_RCC_OscConfig+0x470>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x444>
 80045ea:	e03d      	b.n	8004668 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d107      	bne.n	8004604 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e038      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40007000 	.word	0x40007000
 8004600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_RCC_OscConfig+0x4ec>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d028      	beq.n	8004664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461c:	429a      	cmp	r2, r3
 800461e:	d121      	bne.n	8004664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d11a      	bne.n	8004664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004634:	4013      	ands	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800463a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800463c:	4293      	cmp	r3, r2
 800463e:	d111      	bne.n	8004664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	3b01      	subs	r3, #1
 800464e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d107      	bne.n	8004664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800

08004678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0cc      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800468c:	4b68      	ldr	r3, [pc, #416]	; (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d90c      	bls.n	80046b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469a:	4b65      	ldr	r3, [pc, #404]	; (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a2:	4b63      	ldr	r3, [pc, #396]	; (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0b8      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046cc:	4b59      	ldr	r3, [pc, #356]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4a58      	ldr	r2, [pc, #352]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e4:	4b53      	ldr	r3, [pc, #332]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4a52      	ldr	r2, [pc, #328]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f0:	4b50      	ldr	r3, [pc, #320]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	494d      	ldr	r1, [pc, #308]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d044      	beq.n	8004798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d107      	bne.n	8004726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	4b47      	ldr	r3, [pc, #284]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d119      	bne.n	8004756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e07f      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d003      	beq.n	8004736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004732:	2b03      	cmp	r3, #3
 8004734:	d107      	bne.n	8004746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004736:	4b3f      	ldr	r3, [pc, #252]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e06f      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004746:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e067      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004756:	4b37      	ldr	r3, [pc, #220]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f023 0203 	bic.w	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4934      	ldr	r1, [pc, #208]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	4313      	orrs	r3, r2
 8004766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004768:	f7fc fff8 	bl	800175c <HAL_GetTick>
 800476c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476e:	e00a      	b.n	8004786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004770:	f7fc fff4 	bl	800175c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	; 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e04f      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004786:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 020c 	and.w	r2, r3, #12
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	429a      	cmp	r2, r3
 8004796:	d1eb      	bne.n	8004770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d20c      	bcs.n	80047c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a6:	4b22      	ldr	r3, [pc, #136]	; (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e032      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4916      	ldr	r1, [pc, #88]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	490e      	ldr	r1, [pc, #56]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047fe:	f000 f821 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8004802:	4602      	mov	r2, r0
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	490a      	ldr	r1, [pc, #40]	; (8004838 <HAL_RCC_ClockConfig+0x1c0>)
 8004810:	5ccb      	ldrb	r3, [r1, r3]
 8004812:	fa22 f303 	lsr.w	r3, r2, r3
 8004816:	4a09      	ldr	r2, [pc, #36]	; (800483c <HAL_RCC_ClockConfig+0x1c4>)
 8004818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800481a:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7fc ff58 	bl	80016d4 <HAL_InitTick>

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40023c00 	.word	0x40023c00
 8004834:	40023800 	.word	0x40023800
 8004838:	08008fe4 	.word	0x08008fe4
 800483c:	20000110 	.word	0x20000110
 8004840:	20000114 	.word	0x20000114

08004844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004848:	b094      	sub	sp, #80	; 0x50
 800484a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	647b      	str	r3, [r7, #68]	; 0x44
 8004850:	2300      	movs	r3, #0
 8004852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004854:	2300      	movs	r3, #0
 8004856:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800485c:	4b79      	ldr	r3, [pc, #484]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 030c 	and.w	r3, r3, #12
 8004864:	2b08      	cmp	r3, #8
 8004866:	d00d      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x40>
 8004868:	2b08      	cmp	r3, #8
 800486a:	f200 80e1 	bhi.w	8004a30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_RCC_GetSysClockFreq+0x34>
 8004872:	2b04      	cmp	r3, #4
 8004874:	d003      	beq.n	800487e <HAL_RCC_GetSysClockFreq+0x3a>
 8004876:	e0db      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004878:	4b73      	ldr	r3, [pc, #460]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x204>)
 800487a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800487c:	e0db      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800487e:	4b73      	ldr	r3, [pc, #460]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x208>)
 8004880:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004882:	e0d8      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004884:	4b6f      	ldr	r3, [pc, #444]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800488c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800488e:	4b6d      	ldr	r3, [pc, #436]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d063      	beq.n	8004962 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800489a:	4b6a      	ldr	r3, [pc, #424]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	2200      	movs	r2, #0
 80048a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30
 80048ae:	2300      	movs	r3, #0
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
 80048b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048b6:	4622      	mov	r2, r4
 80048b8:	462b      	mov	r3, r5
 80048ba:	f04f 0000 	mov.w	r0, #0
 80048be:	f04f 0100 	mov.w	r1, #0
 80048c2:	0159      	lsls	r1, r3, #5
 80048c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c8:	0150      	lsls	r0, r2, #5
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4621      	mov	r1, r4
 80048d0:	1a51      	subs	r1, r2, r1
 80048d2:	6139      	str	r1, [r7, #16]
 80048d4:	4629      	mov	r1, r5
 80048d6:	eb63 0301 	sbc.w	r3, r3, r1
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e8:	4659      	mov	r1, fp
 80048ea:	018b      	lsls	r3, r1, #6
 80048ec:	4651      	mov	r1, sl
 80048ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048f2:	4651      	mov	r1, sl
 80048f4:	018a      	lsls	r2, r1, #6
 80048f6:	4651      	mov	r1, sl
 80048f8:	ebb2 0801 	subs.w	r8, r2, r1
 80048fc:	4659      	mov	r1, fp
 80048fe:	eb63 0901 	sbc.w	r9, r3, r1
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800490e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004916:	4690      	mov	r8, r2
 8004918:	4699      	mov	r9, r3
 800491a:	4623      	mov	r3, r4
 800491c:	eb18 0303 	adds.w	r3, r8, r3
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	462b      	mov	r3, r5
 8004924:	eb49 0303 	adc.w	r3, r9, r3
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004936:	4629      	mov	r1, r5
 8004938:	024b      	lsls	r3, r1, #9
 800493a:	4621      	mov	r1, r4
 800493c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004940:	4621      	mov	r1, r4
 8004942:	024a      	lsls	r2, r1, #9
 8004944:	4610      	mov	r0, r2
 8004946:	4619      	mov	r1, r3
 8004948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494a:	2200      	movs	r2, #0
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
 800494e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004950:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004954:	f7fb fc38 	bl	80001c8 <__aeabi_uldivmod>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4613      	mov	r3, r2
 800495e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004960:	e058      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004962:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	2200      	movs	r2, #0
 800496a:	4618      	mov	r0, r3
 800496c:	4611      	mov	r1, r2
 800496e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004972:	623b      	str	r3, [r7, #32]
 8004974:	2300      	movs	r3, #0
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
 8004978:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800497c:	4642      	mov	r2, r8
 800497e:	464b      	mov	r3, r9
 8004980:	f04f 0000 	mov.w	r0, #0
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	0159      	lsls	r1, r3, #5
 800498a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800498e:	0150      	lsls	r0, r2, #5
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4641      	mov	r1, r8
 8004996:	ebb2 0a01 	subs.w	sl, r2, r1
 800499a:	4649      	mov	r1, r9
 800499c:	eb63 0b01 	sbc.w	fp, r3, r1
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049b4:	ebb2 040a 	subs.w	r4, r2, sl
 80049b8:	eb63 050b 	sbc.w	r5, r3, fp
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	00eb      	lsls	r3, r5, #3
 80049c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ca:	00e2      	lsls	r2, r4, #3
 80049cc:	4614      	mov	r4, r2
 80049ce:	461d      	mov	r5, r3
 80049d0:	4643      	mov	r3, r8
 80049d2:	18e3      	adds	r3, r4, r3
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	464b      	mov	r3, r9
 80049d8:	eb45 0303 	adc.w	r3, r5, r3
 80049dc:	607b      	str	r3, [r7, #4]
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ea:	4629      	mov	r1, r5
 80049ec:	028b      	lsls	r3, r1, #10
 80049ee:	4621      	mov	r1, r4
 80049f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049f4:	4621      	mov	r1, r4
 80049f6:	028a      	lsls	r2, r1, #10
 80049f8:	4610      	mov	r0, r2
 80049fa:	4619      	mov	r1, r3
 80049fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fe:	2200      	movs	r2, #0
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	61fa      	str	r2, [r7, #28]
 8004a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a08:	f7fb fbde 	bl	80001c8 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4613      	mov	r3, r2
 8004a12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a2e:	e002      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3750      	adds	r7, #80	; 0x50
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a42:	bf00      	nop
 8004a44:	40023800 	.word	0x40023800
 8004a48:	00f42400 	.word	0x00f42400
 8004a4c:	007a1200 	.word	0x007a1200

08004a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a54:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000110 	.word	0x20000110

08004a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a6c:	f7ff fff0 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a70:	4602      	mov	r2, r0
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	0a9b      	lsrs	r3, r3, #10
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	4903      	ldr	r1, [pc, #12]	; (8004a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a7e:	5ccb      	ldrb	r3, [r1, r3]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	08008ff4 	.word	0x08008ff4

08004a90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d105      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d035      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ab8:	4b62      	ldr	r3, [pc, #392]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004abe:	f7fc fe4d 	bl	800175c <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ac6:	f7fc fe49 	bl	800175c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e0b0      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad8:	4b5b      	ldr	r3, [pc, #364]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f0      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	019a      	lsls	r2, r3, #6
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	071b      	lsls	r3, r3, #28
 8004af0:	4955      	ldr	r1, [pc, #340]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004af8:	4b52      	ldr	r3, [pc, #328]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004afe:	f7fc fe2d 	bl	800175c <HAL_GetTick>
 8004b02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b06:	f7fc fe29 	bl	800175c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e090      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b18:	4b4b      	ldr	r3, [pc, #300]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8083 	beq.w	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	4b44      	ldr	r3, [pc, #272]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	4a43      	ldr	r2, [pc, #268]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b40:	6413      	str	r3, [r2, #64]	; 0x40
 8004b42:	4b41      	ldr	r3, [pc, #260]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b4e:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a3e      	ldr	r2, [pc, #248]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5a:	f7fc fdff 	bl	800175c <HAL_GetTick>
 8004b5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b62:	f7fc fdfb 	bl	800175c <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e062      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b74:	4b35      	ldr	r3, [pc, #212]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b80:	4b31      	ldr	r3, [pc, #196]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d02f      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d028      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ba8:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bae:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bb4:	4a24      	ldr	r2, [pc, #144]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bba:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d114      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fc fdc9 	bl	800175c <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fc fdc5 	bl	800175c <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e02a      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ee      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfc:	d10d      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c12:	490d      	ldr	r1, [pc, #52]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
 8004c18:	e005      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c20:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c24:	6093      	str	r3, [r2, #8]
 8004c26:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c32:	4905      	ldr	r1, [pc, #20]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	42470068 	.word	0x42470068
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40007000 	.word	0x40007000
 8004c50:	42470e40 	.word	0x42470e40

08004c54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d13e      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c72:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d12f      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c88:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c8a:	617b      	str	r3, [r7, #20]
          break;
 8004c8c:	e02f      	b.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c8e:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c9a:	d108      	bne.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c9c:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ca4:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	e007      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cae:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb6:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004cbe:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc4:	099b      	lsrs	r3, r3, #6
 8004cc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd8:	0f1b      	lsrs	r3, r3, #28
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]
          break;
 8004ce6:	e002      	b.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
          break;
 8004cec:	bf00      	nop
        }
      }
      break;
 8004cee:	bf00      	nop
    }
  }
  return frequency;
 8004cf0:	697b      	ldr	r3, [r7, #20]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40023800 	.word	0x40023800
 8004d04:	00bb8000 	.word	0x00bb8000
 8004d08:	007a1200 	.word	0x007a1200
 8004d0c:	00f42400 	.word	0x00f42400

08004d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e07b      	b.n	8004e1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d108      	bne.n	8004d3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d32:	d009      	beq.n	8004d48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	61da      	str	r2, [r3, #28]
 8004d3a:	e005      	b.n	8004d48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fc f964 	bl	8001030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	ea42 0103 	orr.w	r1, r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	f003 0104 	and.w	r1, r3, #4
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	f003 0210 	and.w	r2, r3, #16
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e041      	b.n	8004eb8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fc fb21 	bl	8001490 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f000 f951 	bl	8005108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <HAL_TIM_OC_Start+0x24>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	bf14      	ite	ne
 8004edc:	2301      	movne	r3, #1
 8004ede:	2300      	moveq	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	e022      	b.n	8004f2a <HAL_TIM_OC_Start+0x6a>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d109      	bne.n	8004efe <HAL_TIM_OC_Start+0x3e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	bf14      	ite	ne
 8004ef6:	2301      	movne	r3, #1
 8004ef8:	2300      	moveq	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	e015      	b.n	8004f2a <HAL_TIM_OC_Start+0x6a>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d109      	bne.n	8004f18 <HAL_TIM_OC_Start+0x58>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	bf14      	ite	ne
 8004f10:	2301      	movne	r3, #1
 8004f12:	2300      	moveq	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	e008      	b.n	8004f2a <HAL_TIM_OC_Start+0x6a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e07c      	b.n	800502c <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <HAL_TIM_OC_Start+0x82>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f40:	e013      	b.n	8004f6a <HAL_TIM_OC_Start+0xaa>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d104      	bne.n	8004f52 <HAL_TIM_OC_Start+0x92>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f50:	e00b      	b.n	8004f6a <HAL_TIM_OC_Start+0xaa>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d104      	bne.n	8004f62 <HAL_TIM_OC_Start+0xa2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f60:	e003      	b.n	8004f6a <HAL_TIM_OC_Start+0xaa>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	6839      	ldr	r1, [r7, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fb18 	bl	80055a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2d      	ldr	r2, [pc, #180]	; (8005034 <HAL_TIM_OC_Start+0x174>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIM_OC_Start+0xcc>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2c      	ldr	r2, [pc, #176]	; (8005038 <HAL_TIM_OC_Start+0x178>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_OC_Start+0xd0>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <HAL_TIM_OC_Start+0xd2>
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a22      	ldr	r2, [pc, #136]	; (8005034 <HAL_TIM_OC_Start+0x174>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d022      	beq.n	8004ff6 <HAL_TIM_OC_Start+0x136>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb8:	d01d      	beq.n	8004ff6 <HAL_TIM_OC_Start+0x136>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1f      	ldr	r2, [pc, #124]	; (800503c <HAL_TIM_OC_Start+0x17c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d018      	beq.n	8004ff6 <HAL_TIM_OC_Start+0x136>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <HAL_TIM_OC_Start+0x180>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <HAL_TIM_OC_Start+0x136>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1c      	ldr	r2, [pc, #112]	; (8005044 <HAL_TIM_OC_Start+0x184>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_TIM_OC_Start+0x136>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a16      	ldr	r2, [pc, #88]	; (8005038 <HAL_TIM_OC_Start+0x178>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_TIM_OC_Start+0x136>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a18      	ldr	r2, [pc, #96]	; (8005048 <HAL_TIM_OC_Start+0x188>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_TIM_OC_Start+0x136>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a16      	ldr	r2, [pc, #88]	; (800504c <HAL_TIM_OC_Start+0x18c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d111      	bne.n	800501a <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b06      	cmp	r3, #6
 8005006:	d010      	beq.n	800502a <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005018:	e007      	b.n	800502a <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0201 	orr.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40010000 	.word	0x40010000
 8005038:	40010400 	.word	0x40010400
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
 8005048:	40014000 	.word	0x40014000
 800504c:	40001800 	.word	0x40001800

08005050 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_TIM_OC_ConfigChannel+0x1e>
 800506a:	2302      	movs	r3, #2
 800506c:	e048      	b.n	8005100 <HAL_TIM_OC_ConfigChannel+0xb0>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b0c      	cmp	r3, #12
 800507a:	d839      	bhi.n	80050f0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <HAL_TIM_OC_ConfigChannel+0x34>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	080050b9 	.word	0x080050b9
 8005088:	080050f1 	.word	0x080050f1
 800508c:	080050f1 	.word	0x080050f1
 8005090:	080050f1 	.word	0x080050f1
 8005094:	080050c7 	.word	0x080050c7
 8005098:	080050f1 	.word	0x080050f1
 800509c:	080050f1 	.word	0x080050f1
 80050a0:	080050f1 	.word	0x080050f1
 80050a4:	080050d5 	.word	0x080050d5
 80050a8:	080050f1 	.word	0x080050f1
 80050ac:	080050f1 	.word	0x080050f1
 80050b0:	080050f1 	.word	0x080050f1
 80050b4:	080050e3 	.word	0x080050e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f8c2 	bl	8005248 <TIM_OC1_SetConfig>
      break;
 80050c4:	e017      	b.n	80050f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 f92b 	bl	8005328 <TIM_OC2_SetConfig>
      break;
 80050d2:	e010      	b.n	80050f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f99a 	bl	8005414 <TIM_OC3_SetConfig>
      break;
 80050e0:	e009      	b.n	80050f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fa07 	bl	80054fc <TIM_OC4_SetConfig>
      break;
 80050ee:	e002      	b.n	80050f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	75fb      	strb	r3, [r7, #23]
      break;
 80050f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a40      	ldr	r2, [pc, #256]	; (800521c <TIM_Base_SetConfig+0x114>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d00f      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a3d      	ldr	r2, [pc, #244]	; (8005220 <TIM_Base_SetConfig+0x118>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a3c      	ldr	r2, [pc, #240]	; (8005224 <TIM_Base_SetConfig+0x11c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a3b      	ldr	r2, [pc, #236]	; (8005228 <TIM_Base_SetConfig+0x120>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a3a      	ldr	r2, [pc, #232]	; (800522c <TIM_Base_SetConfig+0x124>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2f      	ldr	r2, [pc, #188]	; (800521c <TIM_Base_SetConfig+0x114>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02b      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005168:	d027      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <TIM_Base_SetConfig+0x118>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d023      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a2b      	ldr	r2, [pc, #172]	; (8005224 <TIM_Base_SetConfig+0x11c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01f      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2a      	ldr	r2, [pc, #168]	; (8005228 <TIM_Base_SetConfig+0x120>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01b      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a29      	ldr	r2, [pc, #164]	; (800522c <TIM_Base_SetConfig+0x124>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d017      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a28      	ldr	r2, [pc, #160]	; (8005230 <TIM_Base_SetConfig+0x128>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a27      	ldr	r2, [pc, #156]	; (8005234 <TIM_Base_SetConfig+0x12c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00f      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a26      	ldr	r2, [pc, #152]	; (8005238 <TIM_Base_SetConfig+0x130>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00b      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a25      	ldr	r2, [pc, #148]	; (800523c <TIM_Base_SetConfig+0x134>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a24      	ldr	r2, [pc, #144]	; (8005240 <TIM_Base_SetConfig+0x138>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a23      	ldr	r2, [pc, #140]	; (8005244 <TIM_Base_SetConfig+0x13c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a0a      	ldr	r2, [pc, #40]	; (800521c <TIM_Base_SetConfig+0x114>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_Base_SetConfig+0xf8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a0c      	ldr	r2, [pc, #48]	; (800522c <TIM_Base_SetConfig+0x124>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d103      	bne.n	8005208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	615a      	str	r2, [r3, #20]
}
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800
 8005228:	40000c00 	.word	0x40000c00
 800522c:	40010400 	.word	0x40010400
 8005230:	40014000 	.word	0x40014000
 8005234:	40014400 	.word	0x40014400
 8005238:	40014800 	.word	0x40014800
 800523c:	40001800 	.word	0x40001800
 8005240:	40001c00 	.word	0x40001c00
 8005244:	40002000 	.word	0x40002000

08005248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0201 	bic.w	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f023 0302 	bic.w	r3, r3, #2
 8005290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a20      	ldr	r2, [pc, #128]	; (8005320 <TIM_OC1_SetConfig+0xd8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_OC1_SetConfig+0x64>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a1f      	ldr	r2, [pc, #124]	; (8005324 <TIM_OC1_SetConfig+0xdc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d10c      	bne.n	80052c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0308 	bic.w	r3, r3, #8
 80052b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f023 0304 	bic.w	r3, r3, #4
 80052c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a15      	ldr	r2, [pc, #84]	; (8005320 <TIM_OC1_SetConfig+0xd8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d003      	beq.n	80052d6 <TIM_OC1_SetConfig+0x8e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a14      	ldr	r2, [pc, #80]	; (8005324 <TIM_OC1_SetConfig+0xdc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d111      	bne.n	80052fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40010000 	.word	0x40010000
 8005324:	40010400 	.word	0x40010400

08005328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f023 0210 	bic.w	r2, r3, #16
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 0320 	bic.w	r3, r3, #32
 8005372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a22      	ldr	r2, [pc, #136]	; (800540c <TIM_OC2_SetConfig+0xe4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_OC2_SetConfig+0x68>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a21      	ldr	r2, [pc, #132]	; (8005410 <TIM_OC2_SetConfig+0xe8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10d      	bne.n	80053ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a17      	ldr	r2, [pc, #92]	; (800540c <TIM_OC2_SetConfig+0xe4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_OC2_SetConfig+0x94>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a16      	ldr	r2, [pc, #88]	; (8005410 <TIM_OC2_SetConfig+0xe8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d113      	bne.n	80053e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000
 8005410:	40010400 	.word	0x40010400

08005414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800545c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <TIM_OC3_SetConfig+0xe0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_OC3_SetConfig+0x66>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <TIM_OC3_SetConfig+0xe4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d10d      	bne.n	8005496 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a16      	ldr	r2, [pc, #88]	; (80054f4 <TIM_OC3_SetConfig+0xe0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <TIM_OC3_SetConfig+0x92>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a15      	ldr	r2, [pc, #84]	; (80054f8 <TIM_OC3_SetConfig+0xe4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d113      	bne.n	80054ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	621a      	str	r2, [r3, #32]
}
 80054e8:	bf00      	nop
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40010400 	.word	0x40010400

080054fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	031b      	lsls	r3, r3, #12
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a12      	ldr	r2, [pc, #72]	; (80055a0 <TIM_OC4_SetConfig+0xa4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_OC4_SetConfig+0x68>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <TIM_OC4_SetConfig+0xa8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d109      	bne.n	8005578 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800556a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	019b      	lsls	r3, r3, #6
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40010400 	.word	0x40010400

080055a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	2201      	movs	r2, #1
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1a      	ldr	r2, [r3, #32]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	43db      	mvns	r3, r3
 80055ca:	401a      	ands	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	fa01 f303 	lsl.w	r3, r1, r3
 80055e0:	431a      	orrs	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005608:	2302      	movs	r3, #2
 800560a:	e05a      	b.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a21      	ldr	r2, [pc, #132]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d022      	beq.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005658:	d01d      	beq.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1d      	ldr	r2, [pc, #116]	; (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d018      	beq.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1b      	ldr	r2, [pc, #108]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00e      	beq.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a18      	ldr	r2, [pc, #96]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d009      	beq.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a17      	ldr	r2, [pc, #92]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a15      	ldr	r2, [pc, #84]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d10c      	bne.n	80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800569c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40010000 	.word	0x40010000
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40000c00 	.word	0x40000c00
 80056e0:	40010400 	.word	0x40010400
 80056e4:	40014000 	.word	0x40014000
 80056e8:	40001800 	.word	0x40001800

080056ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005704:	2302      	movs	r3, #2
 8005706:	e03d      	b.n	8005784 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005790:	b084      	sub	sp, #16
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	f107 001c 	add.w	r0, r7, #28
 800579e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d122      	bne.n	80057ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d105      	bne.n	80057e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f9c0 	bl	8005b68 <USB_CoreReset>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e01a      	b.n	8005824 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f9b4 	bl	8005b68 <USB_CoreReset>
 8005800:	4603      	mov	r3, r0
 8005802:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
 8005816:	e005      	b.n	8005824 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	2b01      	cmp	r3, #1
 8005828:	d10b      	bne.n	8005842 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f043 0206 	orr.w	r2, r3, #6
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005842:	7bfb      	ldrb	r3, [r7, #15]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800584e:	b004      	add	sp, #16
 8005850:	4770      	bx	lr

08005852 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f023 0201 	bic.w	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	460b      	mov	r3, r1
 80058a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d115      	bne.n	80058e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058c4:	2001      	movs	r0, #1
 80058c6:	f7fb ff55 	bl	8001774 <HAL_Delay>
      ms++;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3301      	adds	r3, #1
 80058ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f93a 	bl	8005b4a <USB_GetMode>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d01e      	beq.n	800591a <USB_SetCurrentMode+0x84>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b31      	cmp	r3, #49	; 0x31
 80058e0:	d9f0      	bls.n	80058c4 <USB_SetCurrentMode+0x2e>
 80058e2:	e01a      	b.n	800591a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d115      	bne.n	8005916 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058f6:	2001      	movs	r0, #1
 80058f8:	f7fb ff3c 	bl	8001774 <HAL_Delay>
      ms++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3301      	adds	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f921 	bl	8005b4a <USB_GetMode>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <USB_SetCurrentMode+0x84>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b31      	cmp	r3, #49	; 0x31
 8005912:	d9f0      	bls.n	80058f6 <USB_SetCurrentMode+0x60>
 8005914:	e001      	b.n	800591a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e005      	b.n	8005926 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b32      	cmp	r3, #50	; 0x32
 800591e:	d101      	bne.n	8005924 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3301      	adds	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4a13      	ldr	r2, [pc, #76]	; (8005994 <USB_FlushTxFifo+0x64>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e01b      	b.n	8005988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	daf2      	bge.n	800593e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	019b      	lsls	r3, r3, #6
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a08      	ldr	r2, [pc, #32]	; (8005994 <USB_FlushTxFifo+0x64>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e006      	b.n	8005988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b20      	cmp	r3, #32
 8005984:	d0f0      	beq.n	8005968 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	00030d40 	.word	0x00030d40

08005998 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3301      	adds	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4a11      	ldr	r2, [pc, #68]	; (80059f4 <USB_FlushRxFifo+0x5c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e018      	b.n	80059e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	daf2      	bge.n	80059a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2210      	movs	r2, #16
 80059c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <USB_FlushRxFifo+0x5c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e006      	b.n	80059e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d0f0      	beq.n	80059c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	00030d40 	.word	0x00030d40

080059f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b089      	sub	sp, #36	; 0x24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	4611      	mov	r1, r2
 8005a04:	461a      	mov	r2, r3
 8005a06:	460b      	mov	r3, r1
 8005a08:	71fb      	strb	r3, [r7, #7]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d123      	bne.n	8005a66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a1e:	88bb      	ldrh	r3, [r7, #4]
 8005a20:	3303      	adds	r3, #3
 8005a22:	089b      	lsrs	r3, r3, #2
 8005a24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a26:	2300      	movs	r3, #0
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	e018      	b.n	8005a5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	031a      	lsls	r2, r3, #12
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a38:	461a      	mov	r2, r3
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3301      	adds	r3, #1
 8005a44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	3301      	adds	r3, #1
 8005a56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d3e2      	bcc.n	8005a2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3724      	adds	r7, #36	; 0x24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b08b      	sub	sp, #44	; 0x2c
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	623b      	str	r3, [r7, #32]
 8005a9e:	e014      	b.n	8005aca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	3301      	adds	r3, #1
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	3301      	adds	r3, #1
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	6a3a      	ldr	r2, [r7, #32]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d3e6      	bcc.n	8005aa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ad2:	8bfb      	ldrh	r3, [r7, #30]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01e      	beq.n	8005b16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f107 0310 	add.w	r3, r7, #16
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	701a      	strb	r2, [r3, #0]
      i++;
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	3301      	adds	r3, #1
 8005b02:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	3301      	adds	r3, #1
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b0a:	8bfb      	ldrh	r3, [r7, #30]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b10:	8bfb      	ldrh	r3, [r7, #30]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1ea      	bne.n	8005aec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	372c      	adds	r7, #44	; 0x2c
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f003 0301 	and.w	r3, r3, #1
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3301      	adds	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <USB_CoreReset+0x64>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e01b      	b.n	8005bbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	daf2      	bge.n	8005b74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f043 0201 	orr.w	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <USB_CoreReset+0x64>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d901      	bls.n	8005bb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e006      	b.n	8005bbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d0f0      	beq.n	8005b9e <USB_CoreReset+0x36>

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	00030d40 	.word	0x00030d40

08005bd0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d018      	beq.n	8005c58 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d10a      	bne.n	8005c42 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c3a:	f043 0304 	orr.w	r3, r3, #4
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	e014      	b.n	8005c6c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c50:	f023 0304 	bic.w	r3, r3, #4
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e009      	b.n	8005c6c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c66:	f023 0304 	bic.w	r3, r3, #4
 8005c6a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c6c:	2110      	movs	r1, #16
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff fe5e 	bl	8005930 <USB_FlushTxFifo>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff fe8a 	bl	8005998 <USB_FlushRxFifo>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e015      	b.n	8005cc0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d3e5      	bcc.n	8005c94 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <USB_HostInit+0x16c>)
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <USB_HostInit+0x170>)
 8005cf4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005cf8:	e009      	b.n	8005d0e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2280      	movs	r2, #128	; 0x80
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a10      	ldr	r2, [pc, #64]	; (8005d44 <USB_HostInit+0x174>)
 8005d04:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a0f      	ldr	r2, [pc, #60]	; (8005d48 <USB_HostInit+0x178>)
 8005d0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d105      	bne.n	8005d20 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f043 0210 	orr.w	r2, r3, #16
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <USB_HostInit+0x17c>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d38:	b004      	add	sp, #16
 8005d3a:	4770      	bx	lr
 8005d3c:	01000200 	.word	0x01000200
 8005d40:	00e00300 	.word	0x00e00300
 8005d44:	00600080 	.word	0x00600080
 8005d48:	004000e0 	.word	0x004000e0
 8005d4c:	a3200008 	.word	0xa3200008

08005d50 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	68f9      	ldr	r1, [r7, #12]
 8005d84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d107      	bne.n	8005da2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d9e:	6053      	str	r3, [r2, #4]
 8005da0:	e009      	b.n	8005db6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d106      	bne.n	8005db6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dae:	461a      	mov	r2, r3
 8005db0:	f241 7370 	movw	r3, #6000	; 0x1770
 8005db4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005de4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005df4:	2064      	movs	r0, #100	; 0x64
 8005df6:	f7fb fcbd 	bl	8001774 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e06:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e08:	200a      	movs	r0, #10
 8005e0a:	f7fb fcb3 	bl	8001774 <HAL_Delay>

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d109      	bne.n	8005e5c <USB_DriveVbus+0x44>
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d106      	bne.n	8005e5c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e5a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e66:	d109      	bne.n	8005e7c <USB_DriveVbus+0x64>
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e7a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	0c5b      	lsrs	r3, r3, #17
 8005ea8:	f003 0303 	and.w	r3, r3, #3
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	b29b      	uxth	r3, r3
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	70fb      	strb	r3, [r7, #3]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	70bb      	strb	r3, [r7, #2]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f10:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d87e      	bhi.n	8006018 <USB_HC_Init+0x13c>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <USB_HC_Init+0x44>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f31 	.word	0x08005f31
 8005f24:	08005fdb 	.word	0x08005fdb
 8005f28:	08005f31 	.word	0x08005f31
 8005f2c:	08005f9d 	.word	0x08005f9d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	da10      	bge.n	8005f6e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f6c:	e057      	b.n	800601e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d051      	beq.n	800601e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	78fa      	ldrb	r2, [r7, #3]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f98:	60d3      	str	r3, [r2, #12]
      break;
 8005f9a:	e040      	b.n	800601e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa8:	461a      	mov	r2, r3
 8005faa:	f240 639d 	movw	r3, #1693	; 0x69d
 8005fae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	da34      	bge.n	8006022 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005fd8:	e023      	b.n	8006022 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fda:	78fb      	ldrb	r3, [r7, #3]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f240 2325 	movw	r3, #549	; 0x225
 8005fec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da17      	bge.n	8006026 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	440a      	add	r2, r1
 800600c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006010:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006014:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006016:	e006      	b.n	8006026 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	77fb      	strb	r3, [r7, #31]
      break;
 800601c:	e004      	b.n	8006028 <USB_HC_Init+0x14c>
      break;
 800601e:	bf00      	nop
 8006020:	e002      	b.n	8006028 <USB_HC_Init+0x14c>
      break;
 8006022:	bf00      	nop
 8006024:	e000      	b.n	8006028 <USB_HC_Init+0x14c>
      break;
 8006026:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	4413      	add	r3, r2
 8006030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	0151      	lsls	r1, r2, #5
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	440a      	add	r2, r1
 800603e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006042:	f043 0302 	orr.w	r3, r3, #2
 8006046:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800604e:	699a      	ldr	r2, [r3, #24]
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	2101      	movs	r1, #1
 8006058:	fa01 f303 	lsl.w	r3, r1, r3
 800605c:	6939      	ldr	r1, [r7, #16]
 800605e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006062:	4313      	orrs	r3, r2
 8006064:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006072:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006076:	2b00      	cmp	r3, #0
 8006078:	da03      	bge.n	8006082 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800607a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800607e:	61bb      	str	r3, [r7, #24]
 8006080:	e001      	b.n	8006086 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff feff 	bl	8005e8a <USB_GetHostSpeed>
 800608c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800608e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006092:	2b02      	cmp	r3, #2
 8006094:	d106      	bne.n	80060a4 <USB_HC_Init+0x1c8>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d003      	beq.n	80060a4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800609c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	e001      	b.n	80060a8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060a8:	787b      	ldrb	r3, [r7, #1]
 80060aa:	059b      	lsls	r3, r3, #22
 80060ac:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060b0:	78bb      	ldrb	r3, [r7, #2]
 80060b2:	02db      	lsls	r3, r3, #11
 80060b4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060b8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060be:	049b      	lsls	r3, r3, #18
 80060c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	0159      	lsls	r1, r3, #5
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	440b      	add	r3, r1
 80060da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060de:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060e4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80060e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d003      	beq.n	80060f6 <USB_HC_Init+0x21a>
 80060ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d10f      	bne.n	8006116 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	78fa      	ldrb	r2, [r7, #3]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	440a      	add	r2, r1
 800610c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006110:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006114:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006116:	7ffb      	ldrb	r3, [r7, #31]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3720      	adds	r7, #32
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08c      	sub	sp, #48	; 0x30
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4613      	mov	r3, r2
 800612c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	785b      	ldrb	r3, [r3, #1]
 8006136:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800613c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006146:	2b00      	cmp	r3, #0
 8006148:	d02d      	beq.n	80061a6 <USB_HC_StartXfer+0x86>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	791b      	ldrb	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d129      	bne.n	80061a6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d117      	bne.n	8006188 <USB_HC_StartXfer+0x68>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	79db      	ldrb	r3, [r3, #7]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <USB_HC_StartXfer+0x48>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	79db      	ldrb	r3, [r3, #7]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d10f      	bne.n	8006188 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	4413      	add	r3, r2
 8006170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	6a3a      	ldr	r2, [r7, #32]
 800617c:	440a      	add	r2, r1
 800617e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006186:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10b      	bne.n	80061a6 <USB_HC_StartXfer+0x86>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	795b      	ldrb	r3, [r3, #5]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d107      	bne.n	80061a6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	4619      	mov	r1, r3
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fa0f 	bl	80065c0 <USB_DoPing>
      return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e0f8      	b.n	8006398 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d018      	beq.n	80061e0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	8912      	ldrh	r2, [r2, #8]
 80061b6:	4413      	add	r3, r2
 80061b8:	3b01      	subs	r3, #1
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	8912      	ldrh	r2, [r2, #8]
 80061be:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80061c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061c6:	8b7b      	ldrh	r3, [r7, #26]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d90b      	bls.n	80061e4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80061cc:	8b7b      	ldrh	r3, [r7, #26]
 80061ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	8912      	ldrh	r2, [r2, #8]
 80061d6:	fb03 f202 	mul.w	r2, r3, r2
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	611a      	str	r2, [r3, #16]
 80061de:	e001      	b.n	80061e4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80061e0:	2301      	movs	r3, #1
 80061e2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	78db      	ldrb	r3, [r3, #3]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d007      	beq.n	80061fc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	8912      	ldrh	r2, [r2, #8]
 80061f2:	fb03 f202 	mul.w	r2, r3, r2
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	611a      	str	r2, [r3, #16]
 80061fa:	e003      	b.n	8006204 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800620c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800620e:	04d9      	lsls	r1, r3, #19
 8006210:	4b63      	ldr	r3, [pc, #396]	; (80063a0 <USB_HC_StartXfer+0x280>)
 8006212:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006214:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	7a9b      	ldrb	r3, [r3, #10]
 800621a:	075b      	lsls	r3, r3, #29
 800621c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006220:	69f9      	ldr	r1, [r7, #28]
 8006222:	0148      	lsls	r0, r1, #5
 8006224:	6a39      	ldr	r1, [r7, #32]
 8006226:	4401      	add	r1, r0
 8006228:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800622c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800622e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d009      	beq.n	800624a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	68d9      	ldr	r1, [r3, #12]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	4413      	add	r3, r2
 8006242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006246:	460a      	mov	r2, r1
 8006248:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	bf0c      	ite	eq
 800625a:	2301      	moveq	r3, #1
 800625c:	2300      	movne	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	6a3a      	ldr	r2, [r7, #32]
 8006276:	440a      	add	r2, r1
 8006278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800627c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006280:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	7e7b      	ldrb	r3, [r7, #25]
 8006292:	075b      	lsls	r3, r3, #29
 8006294:	69f9      	ldr	r1, [r7, #28]
 8006296:	0148      	lsls	r0, r1, #5
 8006298:	6a39      	ldr	r1, [r7, #32]
 800629a:	4401      	add	r1, r0
 800629c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80062a0:	4313      	orrs	r3, r2
 80062a2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062ba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	78db      	ldrb	r3, [r3, #3]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	e003      	b.n	80062d6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062d4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062dc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ea:	461a      	mov	r2, r3
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e04e      	b.n	8006398 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	78db      	ldrb	r3, [r3, #3]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d149      	bne.n	8006396 <USB_HC_StartXfer+0x276>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d045      	beq.n	8006396 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	79db      	ldrb	r3, [r3, #7]
 800630e:	2b03      	cmp	r3, #3
 8006310:	d830      	bhi.n	8006374 <USB_HC_StartXfer+0x254>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <USB_HC_StartXfer+0x1f8>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	08006329 	.word	0x08006329
 800631c:	0800634d 	.word	0x0800634d
 8006320:	08006329 	.word	0x08006329
 8006324:	0800634d 	.word	0x0800634d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	3303      	adds	r3, #3
 800632e:	089b      	lsrs	r3, r3, #2
 8006330:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006332:	8afa      	ldrh	r2, [r7, #22]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	b29b      	uxth	r3, r3
 800633a:	429a      	cmp	r2, r3
 800633c:	d91c      	bls.n	8006378 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f043 0220 	orr.w	r2, r3, #32
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	619a      	str	r2, [r3, #24]
        }
        break;
 800634a:	e015      	b.n	8006378 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	3303      	adds	r3, #3
 8006352:	089b      	lsrs	r3, r3, #2
 8006354:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006356:	8afa      	ldrh	r2, [r7, #22]
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	b29b      	uxth	r3, r3
 8006362:	429a      	cmp	r2, r3
 8006364:	d90a      	bls.n	800637c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	619a      	str	r2, [r3, #24]
        }
        break;
 8006372:	e003      	b.n	800637c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006374:	bf00      	nop
 8006376:	e002      	b.n	800637e <USB_HC_StartXfer+0x25e>
        break;
 8006378:	bf00      	nop
 800637a:	e000      	b.n	800637e <USB_HC_StartXfer+0x25e>
        break;
 800637c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	68d9      	ldr	r1, [r3, #12]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	785a      	ldrb	r2, [r3, #1]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	b29b      	uxth	r3, r3
 800638c:	2000      	movs	r0, #0
 800638e:	9000      	str	r0, [sp, #0]
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff fb31 	bl	80059f8 <USB_WritePacket>
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3728      	adds	r7, #40	; 0x28
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	1ff80000 	.word	0x1ff80000

080063a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	b29b      	uxth	r3, r3
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b089      	sub	sp, #36	; 0x24
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	0c9b      	lsrs	r3, r3, #18
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	0fdb      	lsrs	r3, r3, #31
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b20      	cmp	r3, #32
 8006414:	d104      	bne.n	8006420 <USB_HC_Halt+0x5a>
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	e0c8      	b.n	80065b2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <USB_HC_Halt+0x66>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d163      	bne.n	80064f4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	440a      	add	r2, r1
 8006442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800644a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	f040 80ab 	bne.w	80065b0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d133      	bne.n	80064ce <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	0151      	lsls	r1, r2, #5
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	440a      	add	r2, r1
 800647c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006480:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006484:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	440a      	add	r2, r1
 800649c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064a4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b2:	d81d      	bhi.n	80064f0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ca:	d0ec      	beq.n	80064a6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064cc:	e070      	b.n	80065b0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064ee:	e05f      	b.n	80065b0 <USB_HC_Halt+0x1ea>
            break;
 80064f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064f2:	e05d      	b.n	80065b0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	0151      	lsls	r1, r2, #5
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	440a      	add	r2, r1
 800650a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800650e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006512:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d133      	bne.n	800658c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	440a      	add	r2, r1
 800653a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800653e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006542:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	69fa      	ldr	r2, [r7, #28]
 8006558:	440a      	add	r2, r1
 800655a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800655e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006562:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006570:	d81d      	bhi.n	80065ae <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4413      	add	r3, r2
 800657a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006588:	d0ec      	beq.n	8006564 <USB_HC_Halt+0x19e>
 800658a:	e011      	b.n	80065b0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	e000      	b.n	80065b0 <USB_HC_Halt+0x1ea>
          break;
 80065ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3724      	adds	r7, #36	; 0x24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065d4:	2301      	movs	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	04da      	lsls	r2, r3, #19
 80065dc:	4b15      	ldr	r3, [pc, #84]	; (8006634 <USB_DoPing+0x74>)
 80065de:	4013      	ands	r3, r2
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006608:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006610:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	4413      	add	r3, r2
 800661a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661e:	461a      	mov	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	1ff80000 	.word	0x1ff80000

08006638 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff f911 	bl	8005874 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006652:	2110      	movs	r1, #16
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff f96b 	bl	8005930 <USB_FlushTxFifo>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff f997 	bl	8005998 <USB_FlushRxFifo>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006674:	2300      	movs	r3, #0
 8006676:	61bb      	str	r3, [r7, #24]
 8006678:	e01f      	b.n	80066ba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	4413      	add	r3, r2
 8006682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006690:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006698:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ae:	461a      	mov	r2, r3
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b0f      	cmp	r3, #15
 80066be:	d9dc      	bls.n	800667a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066c0:	2300      	movs	r3, #0
 80066c2:	61bb      	str	r3, [r7, #24]
 80066c4:	e034      	b.n	8006730 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fa:	461a      	mov	r2, r3
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3301      	adds	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800670c:	d80c      	bhi.n	8006728 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006724:	d0ec      	beq.n	8006700 <USB_StopHost+0xc8>
 8006726:	e000      	b.n	800672a <USB_StopHost+0xf2>
        break;
 8006728:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	3301      	adds	r3, #1
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b0f      	cmp	r3, #15
 8006734:	d9c7      	bls.n	80066c6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800673c:	461a      	mov	r2, r3
 800673e:	f04f 33ff 	mov.w	r3, #4294967295
 8006742:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff f880 	bl	8005852 <USB_EnableGlobalInt>

  return ret;
 8006752:	7ffb      	ldrb	r3, [r7, #31]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3720      	adds	r7, #32
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b089      	sub	sp, #36	; 0x24
 8006760:	af04      	add	r7, sp, #16
 8006762:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006764:	2301      	movs	r3, #1
 8006766:	2202      	movs	r2, #2
 8006768:	2102      	movs	r1, #2
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fc66 	bl	800703c <USBH_FindInterface>
 8006770:	4603      	mov	r3, r0
 8006772:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	2bff      	cmp	r3, #255	; 0xff
 8006778:	d002      	beq.n	8006780 <USBH_CDC_InterfaceInit+0x24>
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d901      	bls.n	8006784 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006780:	2302      	movs	r3, #2
 8006782:	e13d      	b.n	8006a00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fc3b 	bl	8007004 <USBH_SelectInterface>
 800678e:	4603      	mov	r3, r0
 8006790:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006798:	2302      	movs	r3, #2
 800679a:	e131      	b.n	8006a00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80067a2:	2050      	movs	r0, #80	; 0x50
 80067a4:	f002 fafa 	bl	8008d9c <malloc>
 80067a8:	4603      	mov	r3, r0
 80067aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80067bc:	2302      	movs	r3, #2
 80067be:	e11f      	b.n	8006a00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80067c0:	2250      	movs	r2, #80	; 0x50
 80067c2:	2100      	movs	r1, #0
 80067c4:	68b8      	ldr	r0, [r7, #8]
 80067c6:	f002 faf9 	bl	8008dbc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	211a      	movs	r1, #26
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	4413      	add	r3, r2
 80067d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	b25b      	sxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	da15      	bge.n	800680e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	211a      	movs	r1, #26
 80067e8:	fb01 f303 	mul.w	r3, r1, r3
 80067ec:	4413      	add	r3, r2
 80067ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067f2:	781a      	ldrb	r2, [r3, #0]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	211a      	movs	r1, #26
 80067fe:	fb01 f303 	mul.w	r3, r1, r3
 8006802:	4413      	add	r3, r2
 8006804:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006808:	881a      	ldrh	r2, [r3, #0]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 ff2c 	bl	8008672 <USBH_AllocPipe>
 800681a:	4603      	mov	r3, r0
 800681c:	461a      	mov	r2, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	7819      	ldrb	r1, [r3, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	7858      	ldrb	r0, [r3, #1]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	8952      	ldrh	r2, [r2, #10]
 800683a:	9202      	str	r2, [sp, #8]
 800683c:	2203      	movs	r2, #3
 800683e:	9201      	str	r2, [sp, #4]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	4623      	mov	r3, r4
 8006844:	4602      	mov	r2, r0
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f001 fee4 	bl	8008614 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2200      	movs	r2, #0
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f002 f9f3 	bl	8008c40 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800685a:	2300      	movs	r3, #0
 800685c:	2200      	movs	r2, #0
 800685e:	210a      	movs	r1, #10
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fbeb 	bl	800703c <USBH_FindInterface>
 8006866:	4603      	mov	r3, r0
 8006868:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	2bff      	cmp	r3, #255	; 0xff
 800686e:	d002      	beq.n	8006876 <USBH_CDC_InterfaceInit+0x11a>
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d901      	bls.n	800687a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006876:	2302      	movs	r3, #2
 8006878:	e0c2      	b.n	8006a00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	211a      	movs	r1, #26
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	4413      	add	r3, r2
 8006886:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	b25b      	sxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	da16      	bge.n	80068c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	211a      	movs	r1, #26
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	4413      	add	r3, r2
 800689e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068a2:	781a      	ldrb	r2, [r3, #0]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	211a      	movs	r1, #26
 80068ae:	fb01 f303 	mul.w	r3, r1, r3
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068b8:	881a      	ldrh	r2, [r3, #0]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	835a      	strh	r2, [r3, #26]
 80068be:	e015      	b.n	80068ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	211a      	movs	r1, #26
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068d0:	781a      	ldrb	r2, [r3, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	211a      	movs	r1, #26
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068e6:	881a      	ldrh	r2, [r3, #0]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	211a      	movs	r1, #26
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	4413      	add	r3, r2
 80068f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	b25b      	sxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	da16      	bge.n	8006932 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	211a      	movs	r1, #26
 800690a:	fb01 f303 	mul.w	r3, r1, r3
 800690e:	4413      	add	r3, r2
 8006910:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006914:	781a      	ldrb	r2, [r3, #0]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	211a      	movs	r1, #26
 8006920:	fb01 f303 	mul.w	r3, r1, r3
 8006924:	4413      	add	r3, r2
 8006926:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800692a:	881a      	ldrh	r2, [r3, #0]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	835a      	strh	r2, [r3, #26]
 8006930:	e015      	b.n	800695e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	211a      	movs	r1, #26
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	4413      	add	r3, r2
 800693e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006942:	781a      	ldrb	r2, [r3, #0]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	211a      	movs	r1, #26
 800694e:	fb01 f303 	mul.w	r3, r1, r3
 8006952:	4413      	add	r3, r2
 8006954:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006958:	881a      	ldrh	r2, [r3, #0]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	7b9b      	ldrb	r3, [r3, #14]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 fe84 	bl	8008672 <USBH_AllocPipe>
 800696a:	4603      	mov	r3, r0
 800696c:	461a      	mov	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	7bdb      	ldrb	r3, [r3, #15]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 fe7a 	bl	8008672 <USBH_AllocPipe>
 800697e:	4603      	mov	r3, r0
 8006980:	461a      	mov	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	7b59      	ldrb	r1, [r3, #13]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	7b98      	ldrb	r0, [r3, #14]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	8b12      	ldrh	r2, [r2, #24]
 800699e:	9202      	str	r2, [sp, #8]
 80069a0:	2202      	movs	r2, #2
 80069a2:	9201      	str	r2, [sp, #4]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	4623      	mov	r3, r4
 80069a8:	4602      	mov	r2, r0
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 fe32 	bl	8008614 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	7b19      	ldrb	r1, [r3, #12]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	7bd8      	ldrb	r0, [r3, #15]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	8b52      	ldrh	r2, [r2, #26]
 80069c8:	9202      	str	r2, [sp, #8]
 80069ca:	2202      	movs	r2, #2
 80069cc:	9201      	str	r2, [sp, #4]
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	4623      	mov	r3, r4
 80069d2:	4602      	mov	r2, r0
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fe1d 	bl	8008614 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	7b5b      	ldrb	r3, [r3, #13]
 80069e6:	2200      	movs	r2, #0
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f002 f928 	bl	8008c40 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	7b1b      	ldrb	r3, [r3, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f002 f921 	bl	8008c40 <USBH_LL_SetToggle>

  return USBH_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd90      	pop	{r4, r7, pc}

08006a08 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00e      	beq.n	8006a40 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 fe12 	bl	8008652 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fe3d 	bl	80086b4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	7b1b      	ldrb	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00e      	beq.n	8006a66 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	7b1b      	ldrb	r3, [r3, #12]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fdff 	bl	8008652 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	7b1b      	ldrb	r3, [r3, #12]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 fe2a 	bl	80086b4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	7b5b      	ldrb	r3, [r3, #13]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00e      	beq.n	8006a8c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	7b5b      	ldrb	r3, [r3, #13]
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 fdec 	bl	8008652 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	7b5b      	ldrb	r3, [r3, #13]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fe17 	bl	80086b4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00b      	beq.n	8006ab0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f002 f983 	bl	8008dac <free>
    phost->pActiveClass->pData = 0U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aac:	2200      	movs	r2, #0
 8006aae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3340      	adds	r3, #64	; 0x40
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f8b1 	bl	8006c3a <GetLineCoding>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ae8:	2102      	movs	r1, #2
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006aee:	7afb      	ldrb	r3, [r7, #11]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b00:	2301      	movs	r3, #1
 8006b02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d877      	bhi.n	8006c0c <USBH_CDC_Process+0x114>
 8006b1c:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <USBH_CDC_Process+0x2c>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b39 	.word	0x08006b39
 8006b28:	08006b3f 	.word	0x08006b3f
 8006b2c:	08006b6f 	.word	0x08006b6f
 8006b30:	08006be3 	.word	0x08006be3
 8006b34:	08006bf1 	.word	0x08006bf1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3c:	e06d      	b.n	8006c1a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f897 	bl	8006c78 <SetLineCoding>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d104      	bne.n	8006b5e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b5c:	e058      	b.n	8006c10 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d055      	beq.n	8006c10 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2204      	movs	r2, #4
 8006b68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b6c:	e050      	b.n	8006c10 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	3340      	adds	r3, #64	; 0x40
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f860 	bl	8006c3a <GetLineCoding>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b7e:	7bbb      	ldrb	r3, [r7, #14]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d126      	bne.n	8006bd2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b96:	791b      	ldrb	r3, [r3, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d13b      	bne.n	8006c14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d133      	bne.n	8006c14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d12b      	bne.n	8006c14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d124      	bne.n	8006c14 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f958 	bl	8006e80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bd0:	e020      	b.n	8006c14 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006bd2:	7bbb      	ldrb	r3, [r7, #14]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d01d      	beq.n	8006c14 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006be0:	e018      	b.n	8006c14 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f867 	bl	8006cb6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f8da 	bl	8006da2 <CDC_ProcessReception>
      break;
 8006bee:	e014      	b.n	8006c1a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 ffef 	bl	8007bd6 <USBH_ClrFeature>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c0a:	e005      	b.n	8006c18 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c0c:	bf00      	nop
 8006c0e:	e004      	b.n	8006c1a <USBH_CDC_Process+0x122>
      break;
 8006c10:	bf00      	nop
 8006c12:	e002      	b.n	8006c1a <USBH_CDC_Process+0x122>
      break;
 8006c14:	bf00      	nop
 8006c16:	e000      	b.n	8006c1a <USBH_CDC_Process+0x122>
      break;
 8006c18:	bf00      	nop

  }

  return status;
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	22a1      	movs	r2, #161	; 0xa1
 8006c48:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2221      	movs	r2, #33	; 0x21
 8006c4e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2207      	movs	r2, #7
 8006c60:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2207      	movs	r2, #7
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 fa81 	bl	8008170 <USBH_CtlReq>
 8006c6e:	4603      	mov	r3, r0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2221      	movs	r2, #33	; 0x21
 8006c86:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2207      	movs	r2, #7
 8006c9e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2207      	movs	r2, #7
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fa62 	bl	8008170 <USBH_CtlReq>
 8006cac:	4603      	mov	r3, r0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b086      	sub	sp, #24
 8006cba:	af02      	add	r7, sp, #8
 8006cbc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d002      	beq.n	8006cdc <CDC_ProcessTransmission+0x26>
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d023      	beq.n	8006d22 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006cda:	e05e      	b.n	8006d9a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	8b12      	ldrh	r2, [r2, #24]
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d90b      	bls.n	8006d00 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	69d9      	ldr	r1, [r3, #28]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8b1a      	ldrh	r2, [r3, #24]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	7b5b      	ldrb	r3, [r3, #13]
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	9000      	str	r0, [sp, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fc48 	bl	800858e <USBH_BulkSendData>
 8006cfe:	e00b      	b.n	8006d18 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	7b5b      	ldrb	r3, [r3, #13]
 8006d0e:	2001      	movs	r0, #1
 8006d10:	9000      	str	r0, [sp, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fc3b 	bl	800858e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d20:	e03b      	b.n	8006d9a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	7b5b      	ldrb	r3, [r3, #13]
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 ff5f 	bl	8008bec <USBH_LL_GetURBState>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d32:	7afb      	ldrb	r3, [r7, #11]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d128      	bne.n	8006d8a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	8b12      	ldrh	r2, [r2, #24]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d90e      	bls.n	8006d62 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	8b12      	ldrh	r2, [r2, #24]
 8006d4c:	1a9a      	subs	r2, r3, r2
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	8b12      	ldrh	r2, [r2, #24]
 8006d5a:	441a      	add	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	61da      	str	r2, [r3, #28]
 8006d60:	e002      	b.n	8006d68 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d004      	beq.n	8006d7a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d78:	e00e      	b.n	8006d98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f868 	bl	8006e58 <USBH_CDC_TransmitCallback>
      break;
 8006d88:	e006      	b.n	8006d98 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d8a:	7afb      	ldrb	r3, [r7, #11]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d103      	bne.n	8006d98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d98:	bf00      	nop
  }
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b086      	sub	sp, #24
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006db4:	2300      	movs	r3, #0
 8006db6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d002      	beq.n	8006dc8 <CDC_ProcessReception+0x26>
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d00e      	beq.n	8006de4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006dc6:	e043      	b.n	8006e50 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	6a19      	ldr	r1, [r3, #32]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	8b5a      	ldrh	r2, [r3, #26]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	7b1b      	ldrb	r3, [r3, #12]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 fbff 	bl	80085d8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2204      	movs	r2, #4
 8006dde:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006de2:	e035      	b.n	8006e50 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	7b1b      	ldrb	r3, [r3, #12]
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 fefe 	bl	8008bec <USBH_LL_GetURBState>
 8006df0:	4603      	mov	r3, r0
 8006df2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006df4:	7cfb      	ldrb	r3, [r7, #19]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d129      	bne.n	8006e4e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	7b1b      	ldrb	r3, [r3, #12]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 fe61 	bl	8008ac8 <USBH_LL_GetLastXferSize>
 8006e06:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d016      	beq.n	8006e40 <CDC_ProcessReception+0x9e>
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	8b5b      	ldrh	r3, [r3, #26]
 8006e16:	461a      	mov	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d910      	bls.n	8006e40 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	1ad2      	subs	r2, r2, r3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	6a1a      	ldr	r2, [r3, #32]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	441a      	add	r2, r3
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2203      	movs	r2, #3
 8006e3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e3e:	e006      	b.n	8006e4e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f80f 	bl	8006e6c <USBH_CDC_ReceiveCallback>
      break;
 8006e4e:	bf00      	nop
  }
}
 8006e50:	bf00      	nop
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e029      	b.n	8006f00 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	79fa      	ldrb	r2, [r7, #7]
 8006eb0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f81f 	bl	8006f08 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f001 fd31 	bl	8008960 <USBH_LL_Init>

  return USBH_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e009      	b.n	8006f2e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	33e0      	adds	r3, #224	; 0xe0
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	2200      	movs	r2, #0
 8006f26:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b0f      	cmp	r3, #15
 8006f32:	d9f2      	bls.n	8006f1a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e009      	b.n	8006f4e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f44:	2200      	movs	r2, #0
 8006f46:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f54:	d3f1      	bcc.n	8006f3a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2240      	movs	r2, #64	; 0x40
 8006f7a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d016      	beq.n	8006ff2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10e      	bne.n	8006fec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fd4:	1c59      	adds	r1, r3, #1
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	33de      	adds	r3, #222	; 0xde
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]
 8006fea:	e004      	b.n	8006ff6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fec:	2302      	movs	r3, #2
 8006fee:	73fb      	strb	r3, [r7, #15]
 8006ff0:	e001      	b.n	8006ff6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800701a:	78fa      	ldrb	r2, [r7, #3]
 800701c:	429a      	cmp	r2, r3
 800701e:	d204      	bcs.n	800702a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007028:	e001      	b.n	800702e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800702a:	2302      	movs	r3, #2
 800702c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	4608      	mov	r0, r1
 8007046:	4611      	mov	r1, r2
 8007048:	461a      	mov	r2, r3
 800704a:	4603      	mov	r3, r0
 800704c:	70fb      	strb	r3, [r7, #3]
 800704e:	460b      	mov	r3, r1
 8007050:	70bb      	strb	r3, [r7, #2]
 8007052:	4613      	mov	r3, r2
 8007054:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007064:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007066:	e025      	b.n	80070b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	221a      	movs	r2, #26
 800706c:	fb02 f303 	mul.w	r3, r2, r3
 8007070:	3308      	adds	r3, #8
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	3302      	adds	r3, #2
 8007078:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	795b      	ldrb	r3, [r3, #5]
 800707e:	78fa      	ldrb	r2, [r7, #3]
 8007080:	429a      	cmp	r2, r3
 8007082:	d002      	beq.n	800708a <USBH_FindInterface+0x4e>
 8007084:	78fb      	ldrb	r3, [r7, #3]
 8007086:	2bff      	cmp	r3, #255	; 0xff
 8007088:	d111      	bne.n	80070ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800708e:	78ba      	ldrb	r2, [r7, #2]
 8007090:	429a      	cmp	r2, r3
 8007092:	d002      	beq.n	800709a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007094:	78bb      	ldrb	r3, [r7, #2]
 8007096:	2bff      	cmp	r3, #255	; 0xff
 8007098:	d109      	bne.n	80070ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800709e:	787a      	ldrb	r2, [r7, #1]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d002      	beq.n	80070aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070a4:	787b      	ldrb	r3, [r7, #1]
 80070a6:	2bff      	cmp	r3, #255	; 0xff
 80070a8:	d101      	bne.n	80070ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	e006      	b.n	80070bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	3301      	adds	r3, #1
 80070b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d9d6      	bls.n	8007068 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070ba:	23ff      	movs	r3, #255	; 0xff
}
 80070bc:	4618      	mov	r0, r3
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 fc81 	bl	80089d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80070d6:	2101      	movs	r1, #1
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 fd9a 	bl	8008c12 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af04      	add	r7, sp, #16
 80070ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80070f0:	2302      	movs	r3, #2
 80070f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b01      	cmp	r3, #1
 8007102:	d102      	bne.n	800710a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2203      	movs	r2, #3
 8007108:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b0b      	cmp	r3, #11
 8007112:	f200 81be 	bhi.w	8007492 <USBH_Process+0x3aa>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <USBH_Process+0x34>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	0800714d 	.word	0x0800714d
 8007120:	0800717f 	.word	0x0800717f
 8007124:	080071e7 	.word	0x080071e7
 8007128:	0800742d 	.word	0x0800742d
 800712c:	08007493 	.word	0x08007493
 8007130:	0800728b 	.word	0x0800728b
 8007134:	080073d3 	.word	0x080073d3
 8007138:	080072c1 	.word	0x080072c1
 800713c:	080072e1 	.word	0x080072e1
 8007140:	08007301 	.word	0x08007301
 8007144:	08007345 	.word	0x08007345
 8007148:	08007415 	.word	0x08007415
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 819e 	beq.w	8007496 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007160:	20c8      	movs	r0, #200	; 0xc8
 8007162:	f001 fd9d 	bl	8008ca0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 fc93 	bl	8008a92 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800717c:	e18b      	b.n	8007496 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007184:	2b01      	cmp	r3, #1
 8007186:	d107      	bne.n	8007198 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007196:	e18d      	b.n	80074b4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800719e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071a2:	d914      	bls.n	80071ce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071aa:	3301      	adds	r3, #1
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d903      	bls.n	80071c6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	220d      	movs	r2, #13
 80071c2:	701a      	strb	r2, [r3, #0]
      break;
 80071c4:	e176      	b.n	80074b4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	701a      	strb	r2, [r3, #0]
      break;
 80071cc:	e172      	b.n	80074b4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071d4:	f103 020a 	add.w	r2, r3, #10
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80071de:	200a      	movs	r0, #10
 80071e0:	f001 fd5e 	bl	8008ca0 <USBH_Delay>
      break;
 80071e4:	e166      	b.n	80074b4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071f6:	2104      	movs	r1, #4
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80071fc:	2064      	movs	r0, #100	; 0x64
 80071fe:	f001 fd4f 	bl	8008ca0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 fc1e 	bl	8008a44 <USBH_LL_GetSpeed>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2205      	movs	r2, #5
 8007216:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007218:	2100      	movs	r1, #0
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 fa29 	bl	8008672 <USBH_AllocPipe>
 8007220:	4603      	mov	r3, r0
 8007222:	461a      	mov	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007228:	2180      	movs	r1, #128	; 0x80
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fa21 	bl	8008672 <USBH_AllocPipe>
 8007230:	4603      	mov	r3, r0
 8007232:	461a      	mov	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7919      	ldrb	r1, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800724c:	b292      	uxth	r2, r2
 800724e:	9202      	str	r2, [sp, #8]
 8007250:	2200      	movs	r2, #0
 8007252:	9201      	str	r2, [sp, #4]
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	4603      	mov	r3, r0
 8007258:	2280      	movs	r2, #128	; 0x80
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 f9da 	bl	8008614 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	7959      	ldrb	r1, [r3, #5]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007274:	b292      	uxth	r2, r2
 8007276:	9202      	str	r2, [sp, #8]
 8007278:	2200      	movs	r2, #0
 800727a:	9201      	str	r2, [sp, #4]
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	4603      	mov	r3, r0
 8007280:	2200      	movs	r2, #0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 f9c6 	bl	8008614 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007288:	e114      	b.n	80074b4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f918 	bl	80074c0 <USBH_HandleEnum>
 8007290:	4603      	mov	r3, r0
 8007292:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	f040 80fe 	bne.w	800749a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d103      	bne.n	80072b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2208      	movs	r2, #8
 80072b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072b6:	e0f0      	b.n	800749a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2207      	movs	r2, #7
 80072bc:	701a      	strb	r2, [r3, #0]
      break;
 80072be:	e0ec      	b.n	800749a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 80e9 	beq.w	800749e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072d2:	2101      	movs	r1, #1
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2208      	movs	r2, #8
 80072dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80072de:	e0de      	b.n	800749e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fc2c 	bl	8007b48 <USBH_SetCfg>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f040 80d5 	bne.w	80074a2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2209      	movs	r2, #9
 80072fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072fe:	e0d0      	b.n	80074a2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007306:	f003 0320 	and.w	r3, r3, #32
 800730a:	2b00      	cmp	r3, #0
 800730c:	d016      	beq.n	800733c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800730e:	2101      	movs	r1, #1
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fc3c 	bl	8007b8e <USBH_SetFeature>
 8007316:	4603      	mov	r3, r0
 8007318:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	220a      	movs	r2, #10
 8007326:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007328:	e0bd      	b.n	80074a6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b03      	cmp	r3, #3
 8007330:	f040 80b9 	bne.w	80074a6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	220a      	movs	r2, #10
 8007338:	701a      	strb	r2, [r3, #0]
      break;
 800733a:	e0b4      	b.n	80074a6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	220a      	movs	r2, #10
 8007340:	701a      	strb	r2, [r3, #0]
      break;
 8007342:	e0b0      	b.n	80074a6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 80ad 	beq.w	80074aa <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	e016      	b.n	800738c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800735e:	7bfa      	ldrb	r2, [r7, #15]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	32de      	adds	r2, #222	; 0xde
 8007364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007368:	791a      	ldrb	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007370:	429a      	cmp	r2, r3
 8007372:	d108      	bne.n	8007386 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007374:	7bfa      	ldrb	r2, [r7, #15]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	32de      	adds	r2, #222	; 0xde
 800737a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007384:	e005      	b.n	8007392 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	3301      	adds	r3, #1
 800738a:	73fb      	strb	r3, [r7, #15]
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0e5      	beq.n	800735e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d016      	beq.n	80073ca <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	4798      	blx	r3
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d109      	bne.n	80073c2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2206      	movs	r2, #6
 80073b2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ba:	2103      	movs	r1, #3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073c0:	e073      	b.n	80074aa <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	220d      	movs	r2, #13
 80073c6:	701a      	strb	r2, [r3, #0]
      break;
 80073c8:	e06f      	b.n	80074aa <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	220d      	movs	r2, #13
 80073ce:	701a      	strb	r2, [r3, #0]
      break;
 80073d0:	e06b      	b.n	80074aa <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d017      	beq.n	800740c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
 80073e8:	4603      	mov	r3, r0
 80073ea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d103      	bne.n	80073fc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	220b      	movs	r2, #11
 80073f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073fa:	e058      	b.n	80074ae <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d154      	bne.n	80074ae <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	220d      	movs	r2, #13
 8007408:	701a      	strb	r2, [r3, #0]
      break;
 800740a:	e050      	b.n	80074ae <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	220d      	movs	r2, #13
 8007410:	701a      	strb	r2, [r3, #0]
      break;
 8007412:	e04c      	b.n	80074ae <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d049      	beq.n	80074b2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
      }
      break;
 800742a:	e042      	b.n	80074b2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff fd67 	bl	8006f08 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d009      	beq.n	8007458 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d005      	beq.n	800746e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007468:	2105      	movs	r1, #5
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b01      	cmp	r3, #1
 8007478:	d107      	bne.n	800748a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff fe20 	bl	80070c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007488:	e014      	b.n	80074b4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 faa4 	bl	80089d8 <USBH_LL_Start>
      break;
 8007490:	e010      	b.n	80074b4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007492:	bf00      	nop
 8007494:	e00e      	b.n	80074b4 <USBH_Process+0x3cc>
      break;
 8007496:	bf00      	nop
 8007498:	e00c      	b.n	80074b4 <USBH_Process+0x3cc>
      break;
 800749a:	bf00      	nop
 800749c:	e00a      	b.n	80074b4 <USBH_Process+0x3cc>
    break;
 800749e:	bf00      	nop
 80074a0:	e008      	b.n	80074b4 <USBH_Process+0x3cc>
      break;
 80074a2:	bf00      	nop
 80074a4:	e006      	b.n	80074b4 <USBH_Process+0x3cc>
      break;
 80074a6:	bf00      	nop
 80074a8:	e004      	b.n	80074b4 <USBH_Process+0x3cc>
      break;
 80074aa:	bf00      	nop
 80074ac:	e002      	b.n	80074b4 <USBH_Process+0x3cc>
      break;
 80074ae:	bf00      	nop
 80074b0:	e000      	b.n	80074b4 <USBH_Process+0x3cc>
      break;
 80074b2:	bf00      	nop
  }
  return USBH_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop

080074c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af04      	add	r7, sp, #16
 80074c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074c8:	2301      	movs	r3, #1
 80074ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	785b      	ldrb	r3, [r3, #1]
 80074d4:	2b07      	cmp	r3, #7
 80074d6:	f200 81c1 	bhi.w	800785c <USBH_HandleEnum+0x39c>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <USBH_HandleEnum+0x20>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007501 	.word	0x08007501
 80074e4:	080075bf 	.word	0x080075bf
 80074e8:	08007629 	.word	0x08007629
 80074ec:	080076b7 	.word	0x080076b7
 80074f0:	08007721 	.word	0x08007721
 80074f4:	08007791 	.word	0x08007791
 80074f8:	080077d7 	.word	0x080077d7
 80074fc:	0800781d 	.word	0x0800781d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007500:	2108      	movs	r1, #8
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa50 	bl	80079a8 <USBH_Get_DevDesc>
 8007508:	4603      	mov	r3, r0
 800750a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d130      	bne.n	8007574 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	7919      	ldrb	r1, [r3, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007536:	b292      	uxth	r2, r2
 8007538:	9202      	str	r2, [sp, #8]
 800753a:	2200      	movs	r2, #0
 800753c:	9201      	str	r2, [sp, #4]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	4603      	mov	r3, r0
 8007542:	2280      	movs	r2, #128	; 0x80
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 f865 	bl	8008614 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	7959      	ldrb	r1, [r3, #5]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800755e:	b292      	uxth	r2, r2
 8007560:	9202      	str	r2, [sp, #8]
 8007562:	2200      	movs	r2, #0
 8007564:	9201      	str	r2, [sp, #4]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	4603      	mov	r3, r0
 800756a:	2200      	movs	r2, #0
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 f851 	bl	8008614 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007572:	e175      	b.n	8007860 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b03      	cmp	r3, #3
 8007578:	f040 8172 	bne.w	8007860 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007582:	3301      	adds	r3, #1
 8007584:	b2da      	uxtb	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007592:	2b03      	cmp	r3, #3
 8007594:	d903      	bls.n	800759e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	220d      	movs	r2, #13
 800759a:	701a      	strb	r2, [r3, #0]
      break;
 800759c:	e160      	b.n	8007860 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	795b      	ldrb	r3, [r3, #5]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 f885 	bl	80086b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	791b      	ldrb	r3, [r3, #4]
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 f87f 	bl	80086b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
      break;
 80075bc:	e150      	b.n	8007860 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80075be:	2112      	movs	r1, #18
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f9f1 	bl	80079a8 <USBH_Get_DevDesc>
 80075c6:	4603      	mov	r3, r0
 80075c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075d6:	e145      	b.n	8007864 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b03      	cmp	r3, #3
 80075dc:	f040 8142 	bne.w	8007864 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075e6:	3301      	adds	r3, #1
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d903      	bls.n	8007602 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	220d      	movs	r2, #13
 80075fe:	701a      	strb	r2, [r3, #0]
      break;
 8007600:	e130      	b.n	8007864 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	795b      	ldrb	r3, [r3, #5]
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 f853 	bl	80086b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	791b      	ldrb	r3, [r3, #4]
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 f84d 	bl	80086b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
      break;
 8007626:	e11d      	b.n	8007864 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007628:	2101      	movs	r1, #1
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa68 	bl	8007b00 <USBH_SetAddress>
 8007630:	4603      	mov	r3, r0
 8007632:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d132      	bne.n	80076a0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800763a:	2002      	movs	r0, #2
 800763c:	f001 fb30 	bl	8008ca0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2203      	movs	r2, #3
 800764c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7919      	ldrb	r1, [r3, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007662:	b292      	uxth	r2, r2
 8007664:	9202      	str	r2, [sp, #8]
 8007666:	2200      	movs	r2, #0
 8007668:	9201      	str	r2, [sp, #4]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	4603      	mov	r3, r0
 800766e:	2280      	movs	r2, #128	; 0x80
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 ffcf 	bl	8008614 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	7959      	ldrb	r1, [r3, #5]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800768a:	b292      	uxth	r2, r2
 800768c:	9202      	str	r2, [sp, #8]
 800768e:	2200      	movs	r2, #0
 8007690:	9201      	str	r2, [sp, #4]
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	4603      	mov	r3, r0
 8007696:	2200      	movs	r2, #0
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 ffbb 	bl	8008614 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800769e:	e0e3      	b.n	8007868 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	f040 80e0 	bne.w	8007868 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	220d      	movs	r2, #13
 80076ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	705a      	strb	r2, [r3, #1]
      break;
 80076b4:	e0d8      	b.n	8007868 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80076b6:	2109      	movs	r1, #9
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f99d 	bl	80079f8 <USBH_Get_CfgDesc>
 80076be:	4603      	mov	r3, r0
 80076c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d103      	bne.n	80076d0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2204      	movs	r2, #4
 80076cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ce:	e0cd      	b.n	800786c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	f040 80ca 	bne.w	800786c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076de:	3301      	adds	r3, #1
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d903      	bls.n	80076fa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	220d      	movs	r2, #13
 80076f6:	701a      	strb	r2, [r3, #0]
      break;
 80076f8:	e0b8      	b.n	800786c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	795b      	ldrb	r3, [r3, #5]
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 ffd7 	bl	80086b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	791b      	ldrb	r3, [r3, #4]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 ffd1 	bl	80086b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
      break;
 800771e:	e0a5      	b.n	800786c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f965 	bl	80079f8 <USBH_Get_CfgDesc>
 800772e:	4603      	mov	r3, r0
 8007730:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d103      	bne.n	8007740 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2205      	movs	r2, #5
 800773c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800773e:	e097      	b.n	8007870 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	2b03      	cmp	r3, #3
 8007744:	f040 8094 	bne.w	8007870 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800774e:	3301      	adds	r3, #1
 8007750:	b2da      	uxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800775e:	2b03      	cmp	r3, #3
 8007760:	d903      	bls.n	800776a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	220d      	movs	r2, #13
 8007766:	701a      	strb	r2, [r3, #0]
      break;
 8007768:	e082      	b.n	8007870 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	795b      	ldrb	r3, [r3, #5]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 ff9f 	bl	80086b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	791b      	ldrb	r3, [r3, #4]
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 ff99 	bl	80086b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
      break;
 800778e:	e06f      	b.n	8007870 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007796:	2b00      	cmp	r3, #0
 8007798:	d019      	beq.n	80077ce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077a6:	23ff      	movs	r3, #255	; 0xff
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f949 	bl	8007a40 <USBH_Get_StringDesc>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d103      	bne.n	80077c0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2206      	movs	r2, #6
 80077bc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077be:	e059      	b.n	8007874 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d156      	bne.n	8007874 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2206      	movs	r2, #6
 80077ca:	705a      	strb	r2, [r3, #1]
      break;
 80077cc:	e052      	b.n	8007874 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2206      	movs	r2, #6
 80077d2:	705a      	strb	r2, [r3, #1]
      break;
 80077d4:	e04e      	b.n	8007874 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d019      	beq.n	8007814 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077ec:	23ff      	movs	r3, #255	; 0xff
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f926 	bl	8007a40 <USBH_Get_StringDesc>
 80077f4:	4603      	mov	r3, r0
 80077f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d103      	bne.n	8007806 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2207      	movs	r2, #7
 8007802:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007804:	e038      	b.n	8007878 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b03      	cmp	r3, #3
 800780a:	d135      	bne.n	8007878 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2207      	movs	r2, #7
 8007810:	705a      	strb	r2, [r3, #1]
      break;
 8007812:	e031      	b.n	8007878 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2207      	movs	r2, #7
 8007818:	705a      	strb	r2, [r3, #1]
      break;
 800781a:	e02d      	b.n	8007878 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007822:	2b00      	cmp	r3, #0
 8007824:	d017      	beq.n	8007856 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007832:	23ff      	movs	r3, #255	; 0xff
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f903 	bl	8007a40 <USBH_Get_StringDesc>
 800783a:	4603      	mov	r3, r0
 800783c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007848:	e018      	b.n	800787c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b03      	cmp	r3, #3
 800784e:	d115      	bne.n	800787c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
      break;
 8007854:	e012      	b.n	800787c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]
      break;
 800785a:	e00f      	b.n	800787c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800785c:	bf00      	nop
 800785e:	e00e      	b.n	800787e <USBH_HandleEnum+0x3be>
      break;
 8007860:	bf00      	nop
 8007862:	e00c      	b.n	800787e <USBH_HandleEnum+0x3be>
      break;
 8007864:	bf00      	nop
 8007866:	e00a      	b.n	800787e <USBH_HandleEnum+0x3be>
      break;
 8007868:	bf00      	nop
 800786a:	e008      	b.n	800787e <USBH_HandleEnum+0x3be>
      break;
 800786c:	bf00      	nop
 800786e:	e006      	b.n	800787e <USBH_HandleEnum+0x3be>
      break;
 8007870:	bf00      	nop
 8007872:	e004      	b.n	800787e <USBH_HandleEnum+0x3be>
      break;
 8007874:	bf00      	nop
 8007876:	e002      	b.n	800787e <USBH_HandleEnum+0x3be>
      break;
 8007878:	bf00      	nop
 800787a:	e000      	b.n	800787e <USBH_HandleEnum+0x3be>
      break;
 800787c:	bf00      	nop
  }
  return Status;
 800787e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f804 	bl	80078ca <USBH_HandleSof>
}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b0b      	cmp	r3, #11
 80078da:	d10a      	bne.n	80078f2 <USBH_HandleSof+0x28>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d005      	beq.n	80078f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
  }
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800790a:	bf00      	nop
}
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007926:	bf00      	nop
}
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 f844 	bl	8008a0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	791b      	ldrb	r3, [r3, #4]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fe91 	bl	80086b4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	795b      	ldrb	r3, [r3, #5]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fe8b 	bl	80086b4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	4613      	mov	r3, r2
 80079c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079c6:	2100      	movs	r1, #0
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f864 	bl	8007a96 <USBH_GetDescriptor>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10a      	bne.n	80079ee <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f203 3026 	addw	r0, r3, #806	; 0x326
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079e4:	78fa      	ldrb	r2, [r7, #3]
 80079e6:	b292      	uxth	r2, r2
 80079e8:	4619      	mov	r1, r3
 80079ea:	f000 f918 	bl	8007c1e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	331c      	adds	r3, #28
 8007a08:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007a0a:	887b      	ldrh	r3, [r7, #2]
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a14:	2100      	movs	r1, #0
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f83d 	bl	8007a96 <USBH_GetDescriptor>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d107      	bne.n	8007a36 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a26:	887b      	ldrh	r3, [r7, #2]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f987 	bl	8007d40 <USBH_ParseCfgDesc>
 8007a32:	4603      	mov	r3, r0
 8007a34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b088      	sub	sp, #32
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	72fb      	strb	r3, [r7, #11]
 8007a50:	4613      	mov	r3, r2
 8007a52:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007a54:	7afb      	ldrb	r3, [r7, #11]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a5c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a64:	893b      	ldrh	r3, [r7, #8]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f812 	bl	8007a96 <USBH_GetDescriptor>
 8007a72:	4603      	mov	r3, r0
 8007a74:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d107      	bne.n	8007a8c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a82:	893a      	ldrh	r2, [r7, #8]
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fb24 	bl	80080d4 <USBH_ParseStringDesc>
  }

  return status;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	607b      	str	r3, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	72fb      	strb	r3, [r7, #11]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	789b      	ldrb	r3, [r3, #2]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d11c      	bne.n	8007aea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ab0:	7afb      	ldrb	r3, [r7, #11]
 8007ab2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2206      	movs	r2, #6
 8007ac0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	893a      	ldrh	r2, [r7, #8]
 8007ac6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ac8:	893b      	ldrh	r3, [r7, #8]
 8007aca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ad2:	d104      	bne.n	8007ade <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f240 4209 	movw	r2, #1033	; 0x409
 8007ada:	829a      	strh	r2, [r3, #20]
 8007adc:	e002      	b.n	8007ae4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8b3a      	ldrh	r2, [r7, #24]
 8007ae8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007aea:	8b3b      	ldrh	r3, [r7, #24]
 8007aec:	461a      	mov	r2, r3
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 fb3d 	bl	8008170 <USBH_CtlReq>
 8007af6:	4603      	mov	r3, r0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	789b      	ldrb	r3, [r3, #2]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d10f      	bne.n	8007b34 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2205      	movs	r2, #5
 8007b1e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b34:	2200      	movs	r2, #0
 8007b36:	2100      	movs	r1, #0
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fb19 	bl	8008170 <USBH_CtlReq>
 8007b3e:	4603      	mov	r3, r0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	789b      	ldrb	r3, [r3, #2]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d10e      	bne.n	8007b7a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2209      	movs	r2, #9
 8007b66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	887a      	ldrh	r2, [r7, #2]
 8007b6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 faf6 	bl	8008170 <USBH_CtlReq>
 8007b84:	4603      	mov	r3, r0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	789b      	ldrb	r3, [r3, #2]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d10f      	bne.n	8007bc2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2203      	movs	r2, #3
 8007bac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fad2 	bl	8008170 <USBH_CtlReq>
 8007bcc:	4603      	mov	r3, r0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	789b      	ldrb	r3, [r3, #2]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d10f      	bne.n	8007c0a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007bfc:	78fb      	ldrb	r3, [r7, #3]
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 faae 	bl	8008170 <USBH_CtlReq>
 8007c14:	4603      	mov	r3, r0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	781a      	ldrb	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	785a      	ldrb	r2, [r3, #1]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	3302      	adds	r3, #2
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	3303      	adds	r3, #3
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	4313      	orrs	r3, r2
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	791a      	ldrb	r2, [r3, #4]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	795a      	ldrb	r2, [r3, #5]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	799a      	ldrb	r2, [r3, #6]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	79da      	ldrb	r2, [r3, #7]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	79db      	ldrb	r3, [r3, #7]
 8007c7c:	2b20      	cmp	r3, #32
 8007c7e:	dc11      	bgt.n	8007ca4 <USBH_ParseDevDesc+0x86>
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	db16      	blt.n	8007cb2 <USBH_ParseDevDesc+0x94>
 8007c84:	3b08      	subs	r3, #8
 8007c86:	2201      	movs	r2, #1
 8007c88:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	bf14      	ite	ne
 8007c98:	2301      	movne	r3, #1
 8007c9a:	2300      	moveq	r3, #0
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d102      	bne.n	8007ca8 <USBH_ParseDevDesc+0x8a>
 8007ca2:	e006      	b.n	8007cb2 <USBH_ParseDevDesc+0x94>
 8007ca4:	2b40      	cmp	r3, #64	; 0x40
 8007ca6:	d104      	bne.n	8007cb2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	79da      	ldrb	r2, [r3, #7]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	71da      	strb	r2, [r3, #7]
      break;
 8007cb0:	e003      	b.n	8007cba <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2240      	movs	r2, #64	; 0x40
 8007cb6:	71da      	strb	r2, [r3, #7]
      break;
 8007cb8:	bf00      	nop
  }

  if (length > 8U)
 8007cba:	88fb      	ldrh	r3, [r7, #6]
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d939      	bls.n	8007d34 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	3309      	adds	r3, #9
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	330a      	adds	r3, #10
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	330b      	adds	r3, #11
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	330c      	adds	r3, #12
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	330d      	adds	r3, #13
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	7b9a      	ldrb	r2, [r3, #14]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	7bda      	ldrb	r2, [r3, #15]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	7c1a      	ldrb	r2, [r3, #16]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	7c5a      	ldrb	r2, [r3, #17]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	745a      	strb	r2, [r3, #17]
  }
}
 8007d34:	bf00      	nop
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08c      	sub	sp, #48	; 0x30
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d54:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	781a      	ldrb	r2, [r3, #0]
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	785a      	ldrb	r2, [r3, #1]
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	3302      	adds	r3, #2
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	3303      	adds	r3, #3
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	4313      	orrs	r3, r2
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d9c:	bf28      	it	cs
 8007d9e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	791a      	ldrb	r2, [r3, #4]
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	795a      	ldrb	r2, [r3, #5]
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	799a      	ldrb	r2, [r3, #6]
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	79da      	ldrb	r2, [r3, #7]
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	7a1a      	ldrb	r2, [r3, #8]
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b09      	cmp	r3, #9
 8007dd6:	d002      	beq.n	8007dde <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	2209      	movs	r2, #9
 8007ddc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007dde:	88fb      	ldrh	r3, [r7, #6]
 8007de0:	2b09      	cmp	r3, #9
 8007de2:	f240 809d 	bls.w	8007f20 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007de6:	2309      	movs	r3, #9
 8007de8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007dee:	e081      	b.n	8007ef4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007df0:	f107 0316 	add.w	r3, r7, #22
 8007df4:	4619      	mov	r1, r3
 8007df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df8:	f000 f99f 	bl	800813a <USBH_GetNextDesc>
 8007dfc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	785b      	ldrb	r3, [r3, #1]
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d176      	bne.n	8007ef4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b09      	cmp	r3, #9
 8007e0c:	d002      	beq.n	8007e14 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e10:	2209      	movs	r2, #9
 8007e12:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e18:	221a      	movs	r2, #26
 8007e1a:	fb02 f303 	mul.w	r3, r2, r3
 8007e1e:	3308      	adds	r3, #8
 8007e20:	6a3a      	ldr	r2, [r7, #32]
 8007e22:	4413      	add	r3, r2
 8007e24:	3302      	adds	r3, #2
 8007e26:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e2a:	69f8      	ldr	r0, [r7, #28]
 8007e2c:	f000 f87e 	bl	8007f2c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e3a:	e043      	b.n	8007ec4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e3c:	f107 0316 	add.w	r3, r7, #22
 8007e40:	4619      	mov	r1, r3
 8007e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e44:	f000 f979 	bl	800813a <USBH_GetNextDesc>
 8007e48:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	785b      	ldrb	r3, [r3, #1]
 8007e4e:	2b05      	cmp	r3, #5
 8007e50:	d138      	bne.n	8007ec4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	795b      	ldrb	r3, [r3, #5]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d10f      	bne.n	8007e7a <USBH_ParseCfgDesc+0x13a>
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	799b      	ldrb	r3, [r3, #6]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d10b      	bne.n	8007e7a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	79db      	ldrb	r3, [r3, #7]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10f      	bne.n	8007e8a <USBH_ParseCfgDesc+0x14a>
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b09      	cmp	r3, #9
 8007e70:	d00b      	beq.n	8007e8a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	2209      	movs	r2, #9
 8007e76:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e78:	e007      	b.n	8007e8a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b07      	cmp	r3, #7
 8007e80:	d004      	beq.n	8007e8c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	2207      	movs	r2, #7
 8007e86:	701a      	strb	r2, [r3, #0]
 8007e88:	e000      	b.n	8007e8c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e8a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e90:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e94:	3201      	adds	r2, #1
 8007e96:	00d2      	lsls	r2, r2, #3
 8007e98:	211a      	movs	r1, #26
 8007e9a:	fb01 f303 	mul.w	r3, r1, r3
 8007e9e:	4413      	add	r3, r2
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	6a3a      	ldr	r2, [r7, #32]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eac:	69b9      	ldr	r1, [r7, #24]
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 f86b 	bl	8007f8a <USBH_ParseEPDesc>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007eba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	791b      	ldrb	r3, [r3, #4]
 8007ec8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d204      	bcs.n	8007eda <USBH_ParseCfgDesc+0x19a>
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	885a      	ldrh	r2, [r3, #2]
 8007ed4:	8afb      	ldrh	r3, [r7, #22]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d8b0      	bhi.n	8007e3c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	791b      	ldrb	r3, [r3, #4]
 8007ede:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d201      	bcs.n	8007eea <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e01c      	b.n	8007f24 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eee:	3301      	adds	r3, #1
 8007ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d805      	bhi.n	8007f08 <USBH_ParseCfgDesc+0x1c8>
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	885a      	ldrh	r2, [r3, #2]
 8007f00:	8afb      	ldrh	r3, [r7, #22]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	f63f af74 	bhi.w	8007df0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	791b      	ldrb	r3, [r3, #4]
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	bf28      	it	cs
 8007f10:	2302      	movcs	r3, #2
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d201      	bcs.n	8007f20 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e001      	b.n	8007f24 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007f20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3730      	adds	r7, #48	; 0x30
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781a      	ldrb	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	785a      	ldrb	r2, [r3, #1]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	789a      	ldrb	r2, [r3, #2]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	78da      	ldrb	r2, [r3, #3]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	791a      	ldrb	r2, [r3, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	795a      	ldrb	r2, [r3, #5]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	799a      	ldrb	r2, [r3, #6]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	79da      	ldrb	r2, [r3, #7]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	7a1a      	ldrb	r2, [r3, #8]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	721a      	strb	r2, [r3, #8]
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b087      	sub	sp, #28
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	781a      	ldrb	r2, [r3, #0]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	785a      	ldrb	r2, [r3, #1]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	789a      	ldrb	r2, [r3, #2]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	78da      	ldrb	r2, [r3, #3]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3305      	adds	r3, #5
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	021b      	lsls	r3, r3, #8
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	799a      	ldrb	r2, [r3, #6]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	889b      	ldrh	r3, [r3, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d102      	bne.n	8007fec <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	75fb      	strb	r3, [r7, #23]
 8007fea:	e033      	b.n	8008054 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	889b      	ldrh	r3, [r3, #4]
 8007ff0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ff4:	f023 0307 	bic.w	r3, r3, #7
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	889b      	ldrh	r3, [r3, #4]
 8008002:	b21a      	sxth	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3304      	adds	r3, #4
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	b299      	uxth	r1, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3305      	adds	r3, #5
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b29b      	uxth	r3, r3
 8008014:	021b      	lsls	r3, r3, #8
 8008016:	b29b      	uxth	r3, r3
 8008018:	430b      	orrs	r3, r1
 800801a:	b29b      	uxth	r3, r3
 800801c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008020:	2b00      	cmp	r3, #0
 8008022:	d110      	bne.n	8008046 <USBH_ParseEPDesc+0xbc>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3304      	adds	r3, #4
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	b299      	uxth	r1, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3305      	adds	r3, #5
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	021b      	lsls	r3, r3, #8
 8008036:	b29b      	uxth	r3, r3
 8008038:	430b      	orrs	r3, r1
 800803a:	b29b      	uxth	r3, r3
 800803c:	b21b      	sxth	r3, r3
 800803e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008042:	b21b      	sxth	r3, r3
 8008044:	e001      	b.n	800804a <USBH_ParseEPDesc+0xc0>
 8008046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800804a:	4313      	orrs	r3, r2
 800804c:	b21b      	sxth	r3, r3
 800804e:	b29a      	uxth	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800805a:	2b00      	cmp	r3, #0
 800805c:	d116      	bne.n	800808c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	78db      	ldrb	r3, [r3, #3]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	2b01      	cmp	r3, #1
 8008068:	d005      	beq.n	8008076 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	78db      	ldrb	r3, [r3, #3]
 800806e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008072:	2b03      	cmp	r3, #3
 8008074:	d127      	bne.n	80080c6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	799b      	ldrb	r3, [r3, #6]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <USBH_ParseEPDesc+0xfc>
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	799b      	ldrb	r3, [r3, #6]
 8008082:	2b10      	cmp	r3, #16
 8008084:	d91f      	bls.n	80080c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008086:	2303      	movs	r3, #3
 8008088:	75fb      	strb	r3, [r7, #23]
 800808a:	e01c      	b.n	80080c6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	78db      	ldrb	r3, [r3, #3]
 8008090:	f003 0303 	and.w	r3, r3, #3
 8008094:	2b01      	cmp	r3, #1
 8008096:	d10a      	bne.n	80080ae <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	799b      	ldrb	r3, [r3, #6]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <USBH_ParseEPDesc+0x11e>
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	799b      	ldrb	r3, [r3, #6]
 80080a4:	2b10      	cmp	r3, #16
 80080a6:	d90e      	bls.n	80080c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080a8:	2303      	movs	r3, #3
 80080aa:	75fb      	strb	r3, [r7, #23]
 80080ac:	e00b      	b.n	80080c6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	78db      	ldrb	r3, [r3, #3]
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d105      	bne.n	80080c6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	799b      	ldrb	r3, [r3, #6]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080c2:	2303      	movs	r3, #3
 80080c4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	4613      	mov	r3, r2
 80080e0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3301      	adds	r3, #1
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d120      	bne.n	800812e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	1e9a      	subs	r2, r3, #2
 80080f2:	88fb      	ldrh	r3, [r7, #6]
 80080f4:	4293      	cmp	r3, r2
 80080f6:	bf28      	it	cs
 80080f8:	4613      	movcs	r3, r2
 80080fa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3302      	adds	r3, #2
 8008100:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008102:	2300      	movs	r3, #0
 8008104:	82fb      	strh	r3, [r7, #22]
 8008106:	e00b      	b.n	8008120 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008108:	8afb      	ldrh	r3, [r7, #22]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	3301      	adds	r3, #1
 8008118:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800811a:	8afb      	ldrh	r3, [r7, #22]
 800811c:	3302      	adds	r3, #2
 800811e:	82fb      	strh	r3, [r7, #22]
 8008120:	8afa      	ldrh	r2, [r7, #22]
 8008122:	8abb      	ldrh	r3, [r7, #20]
 8008124:	429a      	cmp	r2, r3
 8008126:	d3ef      	bcc.n	8008108 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2200      	movs	r2, #0
 800812c:	701a      	strb	r2, [r3, #0]
  }
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800813a:	b480      	push	{r7}
 800813c:	b085      	sub	sp, #20
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	881a      	ldrh	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	b29b      	uxth	r3, r3
 800814e:	4413      	add	r3, r2
 8008150:	b29a      	uxth	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4413      	add	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008162:	68fb      	ldr	r3, [r7, #12]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800817e:	2301      	movs	r3, #1
 8008180:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	789b      	ldrb	r3, [r3, #2]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d002      	beq.n	8008190 <USBH_CtlReq+0x20>
 800818a:	2b02      	cmp	r3, #2
 800818c:	d00f      	beq.n	80081ae <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800818e:	e027      	b.n	80081e0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	88fa      	ldrh	r2, [r7, #6]
 800819a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2202      	movs	r2, #2
 80081a6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081a8:	2301      	movs	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
      break;
 80081ac:	e018      	b.n	80081e0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f81c 	bl	80081ec <USBH_HandleControl>
 80081b4:	4603      	mov	r3, r0
 80081b6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <USBH_CtlReq+0x54>
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d106      	bne.n	80081d2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	761a      	strb	r2, [r3, #24]
      break;
 80081d0:	e005      	b.n	80081de <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d102      	bne.n	80081de <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2201      	movs	r2, #1
 80081dc:	709a      	strb	r2, [r3, #2]
      break;
 80081de:	bf00      	nop
  }
  return status;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80081f4:	2301      	movs	r3, #1
 80081f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	7e1b      	ldrb	r3, [r3, #24]
 8008200:	3b01      	subs	r3, #1
 8008202:	2b0a      	cmp	r3, #10
 8008204:	f200 8156 	bhi.w	80084b4 <USBH_HandleControl+0x2c8>
 8008208:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <USBH_HandleControl+0x24>)
 800820a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820e:	bf00      	nop
 8008210:	0800823d 	.word	0x0800823d
 8008214:	08008257 	.word	0x08008257
 8008218:	080082c1 	.word	0x080082c1
 800821c:	080082e7 	.word	0x080082e7
 8008220:	0800831f 	.word	0x0800831f
 8008224:	08008349 	.word	0x08008349
 8008228:	0800839b 	.word	0x0800839b
 800822c:	080083bd 	.word	0x080083bd
 8008230:	080083f9 	.word	0x080083f9
 8008234:	0800841f 	.word	0x0800841f
 8008238:	0800845d 	.word	0x0800845d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f103 0110 	add.w	r1, r3, #16
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	795b      	ldrb	r3, [r3, #5]
 8008246:	461a      	mov	r2, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f943 	bl	80084d4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2202      	movs	r2, #2
 8008252:	761a      	strb	r2, [r3, #24]
      break;
 8008254:	e139      	b.n	80084ca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	795b      	ldrb	r3, [r3, #5]
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fcc5 	bl	8008bec <USBH_LL_GetURBState>
 8008262:	4603      	mov	r3, r0
 8008264:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d11e      	bne.n	80082aa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	7c1b      	ldrb	r3, [r3, #16]
 8008270:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008274:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8adb      	ldrh	r3, [r3, #22]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800827e:	7b7b      	ldrb	r3, [r7, #13]
 8008280:	2b80      	cmp	r3, #128	; 0x80
 8008282:	d103      	bne.n	800828c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2203      	movs	r2, #3
 8008288:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800828a:	e115      	b.n	80084b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2205      	movs	r2, #5
 8008290:	761a      	strb	r2, [r3, #24]
      break;
 8008292:	e111      	b.n	80084b8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008294:	7b7b      	ldrb	r3, [r7, #13]
 8008296:	2b80      	cmp	r3, #128	; 0x80
 8008298:	d103      	bne.n	80082a2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2209      	movs	r2, #9
 800829e:	761a      	strb	r2, [r3, #24]
      break;
 80082a0:	e10a      	b.n	80084b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2207      	movs	r2, #7
 80082a6:	761a      	strb	r2, [r3, #24]
      break;
 80082a8:	e106      	b.n	80084b8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d003      	beq.n	80082b8 <USBH_HandleControl+0xcc>
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	f040 8100 	bne.w	80084b8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	220b      	movs	r2, #11
 80082bc:	761a      	strb	r2, [r3, #24]
      break;
 80082be:	e0fb      	b.n	80084b8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6899      	ldr	r1, [r3, #8]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	899a      	ldrh	r2, [r3, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	791b      	ldrb	r3, [r3, #4]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f93a 	bl	8008552 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2204      	movs	r2, #4
 80082e2:	761a      	strb	r2, [r3, #24]
      break;
 80082e4:	e0f1      	b.n	80084ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	791b      	ldrb	r3, [r3, #4]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fc7d 	bl	8008bec <USBH_LL_GetURBState>
 80082f2:	4603      	mov	r3, r0
 80082f4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d102      	bne.n	8008302 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2209      	movs	r2, #9
 8008300:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b05      	cmp	r3, #5
 8008306:	d102      	bne.n	800830e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008308:	2303      	movs	r3, #3
 800830a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800830c:	e0d6      	b.n	80084bc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	2b04      	cmp	r3, #4
 8008312:	f040 80d3 	bne.w	80084bc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	220b      	movs	r2, #11
 800831a:	761a      	strb	r2, [r3, #24]
      break;
 800831c:	e0ce      	b.n	80084bc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6899      	ldr	r1, [r3, #8]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	899a      	ldrh	r2, [r3, #12]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	795b      	ldrb	r3, [r3, #5]
 800832a:	2001      	movs	r0, #1
 800832c:	9000      	str	r0, [sp, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f8ea 	bl	8008508 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800833a:	b29a      	uxth	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2206      	movs	r2, #6
 8008344:	761a      	strb	r2, [r3, #24]
      break;
 8008346:	e0c0      	b.n	80084ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	795b      	ldrb	r3, [r3, #5]
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fc4c 	bl	8008bec <USBH_LL_GetURBState>
 8008354:	4603      	mov	r3, r0
 8008356:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d103      	bne.n	8008366 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2207      	movs	r2, #7
 8008362:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008364:	e0ac      	b.n	80084c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b05      	cmp	r3, #5
 800836a:	d105      	bne.n	8008378 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	220c      	movs	r2, #12
 8008370:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008372:	2303      	movs	r3, #3
 8008374:	73fb      	strb	r3, [r7, #15]
      break;
 8008376:	e0a3      	b.n	80084c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	2b02      	cmp	r3, #2
 800837c:	d103      	bne.n	8008386 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2205      	movs	r2, #5
 8008382:	761a      	strb	r2, [r3, #24]
      break;
 8008384:	e09c      	b.n	80084c0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b04      	cmp	r3, #4
 800838a:	f040 8099 	bne.w	80084c0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	220b      	movs	r2, #11
 8008392:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008394:	2302      	movs	r3, #2
 8008396:	73fb      	strb	r3, [r7, #15]
      break;
 8008398:	e092      	b.n	80084c0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	791b      	ldrb	r3, [r3, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	2100      	movs	r1, #0
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f8d5 	bl	8008552 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2208      	movs	r2, #8
 80083b8:	761a      	strb	r2, [r3, #24]

      break;
 80083ba:	e086      	b.n	80084ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	791b      	ldrb	r3, [r3, #4]
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fc12 	bl	8008bec <USBH_LL_GetURBState>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d105      	bne.n	80083de <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	220d      	movs	r2, #13
 80083d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083dc:	e072      	b.n	80084c4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d103      	bne.n	80083ec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	220b      	movs	r2, #11
 80083e8:	761a      	strb	r2, [r3, #24]
      break;
 80083ea:	e06b      	b.n	80084c4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d168      	bne.n	80084c4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80083f2:	2303      	movs	r3, #3
 80083f4:	73fb      	strb	r3, [r7, #15]
      break;
 80083f6:	e065      	b.n	80084c4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	795b      	ldrb	r3, [r3, #5]
 80083fc:	2201      	movs	r2, #1
 80083fe:	9200      	str	r2, [sp, #0]
 8008400:	2200      	movs	r2, #0
 8008402:	2100      	movs	r1, #0
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f87f 	bl	8008508 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	220a      	movs	r2, #10
 800841a:	761a      	strb	r2, [r3, #24]
      break;
 800841c:	e055      	b.n	80084ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	795b      	ldrb	r3, [r3, #5]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fbe1 	bl	8008bec <USBH_LL_GetURBState>
 800842a:	4603      	mov	r3, r0
 800842c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d105      	bne.n	8008440 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	220d      	movs	r2, #13
 800843c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800843e:	e043      	b.n	80084c8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d103      	bne.n	800844e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2209      	movs	r2, #9
 800844a:	761a      	strb	r2, [r3, #24]
      break;
 800844c:	e03c      	b.n	80084c8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b04      	cmp	r3, #4
 8008452:	d139      	bne.n	80084c8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	220b      	movs	r2, #11
 8008458:	761a      	strb	r2, [r3, #24]
      break;
 800845a:	e035      	b.n	80084c8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7e5b      	ldrb	r3, [r3, #25]
 8008460:	3301      	adds	r3, #1
 8008462:	b2da      	uxtb	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	765a      	strb	r2, [r3, #25]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	7e5b      	ldrb	r3, [r3, #25]
 800846c:	2b02      	cmp	r3, #2
 800846e:	d806      	bhi.n	800847e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800847c:	e025      	b.n	80084ca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008484:	2106      	movs	r1, #6
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	795b      	ldrb	r3, [r3, #5]
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f90c 	bl	80086b4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	791b      	ldrb	r3, [r3, #4]
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f906 	bl	80086b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084ae:	2302      	movs	r3, #2
 80084b0:	73fb      	strb	r3, [r7, #15]
      break;
 80084b2:	e00a      	b.n	80084ca <USBH_HandleControl+0x2de>

    default:
      break;
 80084b4:	bf00      	nop
 80084b6:	e008      	b.n	80084ca <USBH_HandleControl+0x2de>
      break;
 80084b8:	bf00      	nop
 80084ba:	e006      	b.n	80084ca <USBH_HandleControl+0x2de>
      break;
 80084bc:	bf00      	nop
 80084be:	e004      	b.n	80084ca <USBH_HandleControl+0x2de>
      break;
 80084c0:	bf00      	nop
 80084c2:	e002      	b.n	80084ca <USBH_HandleControl+0x2de>
      break;
 80084c4:	bf00      	nop
 80084c6:	e000      	b.n	80084ca <USBH_HandleControl+0x2de>
      break;
 80084c8:	bf00      	nop
  }

  return status;
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af04      	add	r7, sp, #16
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084e2:	79f9      	ldrb	r1, [r7, #7]
 80084e4:	2300      	movs	r3, #0
 80084e6:	9303      	str	r3, [sp, #12]
 80084e8:	2308      	movs	r3, #8
 80084ea:	9302      	str	r3, [sp, #8]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	2300      	movs	r3, #0
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	2300      	movs	r3, #0
 80084f6:	2200      	movs	r2, #0
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 fb46 	bl	8008b8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af04      	add	r7, sp, #16
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4611      	mov	r1, r2
 8008514:	461a      	mov	r2, r3
 8008516:	460b      	mov	r3, r1
 8008518:	80fb      	strh	r3, [r7, #6]
 800851a:	4613      	mov	r3, r2
 800851c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800852c:	7979      	ldrb	r1, [r7, #5]
 800852e:	7e3b      	ldrb	r3, [r7, #24]
 8008530:	9303      	str	r3, [sp, #12]
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	9302      	str	r3, [sp, #8]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	2301      	movs	r3, #1
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	2300      	movs	r3, #0
 8008540:	2200      	movs	r2, #0
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f000 fb21 	bl	8008b8a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b088      	sub	sp, #32
 8008556:	af04      	add	r7, sp, #16
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	4611      	mov	r1, r2
 800855e:	461a      	mov	r2, r3
 8008560:	460b      	mov	r3, r1
 8008562:	80fb      	strh	r3, [r7, #6]
 8008564:	4613      	mov	r3, r2
 8008566:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008568:	7979      	ldrb	r1, [r7, #5]
 800856a:	2300      	movs	r3, #0
 800856c:	9303      	str	r3, [sp, #12]
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	9302      	str	r3, [sp, #8]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	2301      	movs	r3, #1
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	2201      	movs	r2, #1
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 fb03 	bl	8008b8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008584:	2300      	movs	r3, #0

}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b088      	sub	sp, #32
 8008592:	af04      	add	r7, sp, #16
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	4611      	mov	r1, r2
 800859a:	461a      	mov	r2, r3
 800859c:	460b      	mov	r3, r1
 800859e:	80fb      	strh	r3, [r7, #6]
 80085a0:	4613      	mov	r3, r2
 80085a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085b2:	7979      	ldrb	r1, [r7, #5]
 80085b4:	7e3b      	ldrb	r3, [r7, #24]
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	9302      	str	r3, [sp, #8]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	2301      	movs	r3, #1
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	2302      	movs	r3, #2
 80085c6:	2200      	movs	r2, #0
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 fade 	bl	8008b8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b088      	sub	sp, #32
 80085dc:	af04      	add	r7, sp, #16
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4611      	mov	r1, r2
 80085e4:	461a      	mov	r2, r3
 80085e6:	460b      	mov	r3, r1
 80085e8:	80fb      	strh	r3, [r7, #6]
 80085ea:	4613      	mov	r3, r2
 80085ec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085ee:	7979      	ldrb	r1, [r7, #5]
 80085f0:	2300      	movs	r3, #0
 80085f2:	9303      	str	r3, [sp, #12]
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	9302      	str	r3, [sp, #8]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	2301      	movs	r3, #1
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	2302      	movs	r3, #2
 8008602:	2201      	movs	r2, #1
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fac0 	bl	8008b8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af04      	add	r7, sp, #16
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	4608      	mov	r0, r1
 800861e:	4611      	mov	r1, r2
 8008620:	461a      	mov	r2, r3
 8008622:	4603      	mov	r3, r0
 8008624:	70fb      	strb	r3, [r7, #3]
 8008626:	460b      	mov	r3, r1
 8008628:	70bb      	strb	r3, [r7, #2]
 800862a:	4613      	mov	r3, r2
 800862c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800862e:	7878      	ldrb	r0, [r7, #1]
 8008630:	78ba      	ldrb	r2, [r7, #2]
 8008632:	78f9      	ldrb	r1, [r7, #3]
 8008634:	8b3b      	ldrh	r3, [r7, #24]
 8008636:	9302      	str	r3, [sp, #8]
 8008638:	7d3b      	ldrb	r3, [r7, #20]
 800863a:	9301      	str	r3, [sp, #4]
 800863c:	7c3b      	ldrb	r3, [r7, #16]
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	4603      	mov	r3, r0
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa53 	bl	8008aee <USBH_LL_OpenPipe>

  return USBH_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b082      	sub	sp, #8
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fa72 	bl	8008b4c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	460b      	mov	r3, r1
 800867c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f836 	bl	80086f0 <USBH_GetFreePipe>
 8008684:	4603      	mov	r3, r0
 8008686:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008688:	89fb      	ldrh	r3, [r7, #14]
 800868a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800868e:	4293      	cmp	r3, r2
 8008690:	d00a      	beq.n	80086a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008692:	78fa      	ldrb	r2, [r7, #3]
 8008694:	89fb      	ldrh	r3, [r7, #14]
 8008696:	f003 030f 	and.w	r3, r3, #15
 800869a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	33e0      	adds	r3, #224	; 0xe0
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	440b      	add	r3, r1
 80086a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086a8:	89fb      	ldrh	r3, [r7, #14]
 80086aa:	b2db      	uxtb	r3, r3
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	2b0f      	cmp	r3, #15
 80086c4:	d80d      	bhi.n	80086e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	33e0      	adds	r3, #224	; 0xe0
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	33e0      	adds	r3, #224	; 0xe0
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
 8008700:	e00f      	b.n	8008722 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	33e0      	adds	r3, #224	; 0xe0
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d102      	bne.n	800871c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	b29b      	uxth	r3, r3
 800871a:	e007      	b.n	800872c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	3301      	adds	r3, #1
 8008720:	73fb      	strb	r3, [r7, #15]
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	2b0f      	cmp	r3, #15
 8008726:	d9ec      	bls.n	8008702 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008728:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800873c:	2201      	movs	r2, #1
 800873e:	490e      	ldr	r1, [pc, #56]	; (8008778 <MX_USB_HOST_Init+0x40>)
 8008740:	480e      	ldr	r0, [pc, #56]	; (800877c <MX_USB_HOST_Init+0x44>)
 8008742:	f7fe fba7 	bl	8006e94 <USBH_Init>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800874c:	f7f8 fc34 	bl	8000fb8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008750:	490b      	ldr	r1, [pc, #44]	; (8008780 <MX_USB_HOST_Init+0x48>)
 8008752:	480a      	ldr	r0, [pc, #40]	; (800877c <MX_USB_HOST_Init+0x44>)
 8008754:	f7fe fc2c 	bl	8006fb0 <USBH_RegisterClass>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800875e:	f7f8 fc2b 	bl	8000fb8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008762:	4806      	ldr	r0, [pc, #24]	; (800877c <MX_USB_HOST_Init+0x44>)
 8008764:	f7fe fcb0 	bl	80070c8 <USBH_Start>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800876e:	f7f8 fc23 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008772:	bf00      	nop
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	08008799 	.word	0x08008799
 800877c:	2000039c 	.word	0x2000039c
 8008780:	2000011c 	.word	0x2000011c

08008784 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008788:	4802      	ldr	r0, [pc, #8]	; (8008794 <MX_USB_HOST_Process+0x10>)
 800878a:	f7fe fcad 	bl	80070e8 <USBH_Process>
}
 800878e:	bf00      	nop
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	2000039c 	.word	0x2000039c

08008798 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d819      	bhi.n	80087e0 <USBH_UserProcess+0x48>
 80087ac:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <USBH_UserProcess+0x1c>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087e1 	.word	0x080087e1
 80087b8:	080087d1 	.word	0x080087d1
 80087bc:	080087e1 	.word	0x080087e1
 80087c0:	080087d9 	.word	0x080087d9
 80087c4:	080087c9 	.word	0x080087c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087c8:	4b09      	ldr	r3, [pc, #36]	; (80087f0 <USBH_UserProcess+0x58>)
 80087ca:	2203      	movs	r2, #3
 80087cc:	701a      	strb	r2, [r3, #0]
  break;
 80087ce:	e008      	b.n	80087e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <USBH_UserProcess+0x58>)
 80087d2:	2202      	movs	r2, #2
 80087d4:	701a      	strb	r2, [r3, #0]
  break;
 80087d6:	e004      	b.n	80087e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80087d8:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <USBH_UserProcess+0x58>)
 80087da:	2201      	movs	r2, #1
 80087dc:	701a      	strb	r2, [r3, #0]
  break;
 80087de:	e000      	b.n	80087e2 <USBH_UserProcess+0x4a>

  default:
  break;
 80087e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	20000774 	.word	0x20000774

080087f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08a      	sub	sp, #40	; 0x28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087fc:	f107 0314 	add.w	r3, r7, #20
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	605a      	str	r2, [r3, #4]
 8008806:	609a      	str	r2, [r3, #8]
 8008808:	60da      	str	r2, [r3, #12]
 800880a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008814:	d147      	bne.n	80088a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008816:	2300      	movs	r3, #0
 8008818:	613b      	str	r3, [r7, #16]
 800881a:	4b25      	ldr	r3, [pc, #148]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 800881c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881e:	4a24      	ldr	r2, [pc, #144]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008820:	f043 0301 	orr.w	r3, r3, #1
 8008824:	6313      	str	r3, [r2, #48]	; 0x30
 8008826:	4b22      	ldr	r3, [pc, #136]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008838:	2300      	movs	r3, #0
 800883a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800883c:	2300      	movs	r3, #0
 800883e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008840:	f107 0314 	add.w	r3, r7, #20
 8008844:	4619      	mov	r1, r3
 8008846:	481b      	ldr	r0, [pc, #108]	; (80088b4 <HAL_HCD_MspInit+0xc0>)
 8008848:	f7f9 f8ca 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800884c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008852:	2302      	movs	r3, #2
 8008854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008856:	2300      	movs	r3, #0
 8008858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800885a:	2300      	movs	r3, #0
 800885c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800885e:	230a      	movs	r3, #10
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008862:	f107 0314 	add.w	r3, r7, #20
 8008866:	4619      	mov	r1, r3
 8008868:	4812      	ldr	r0, [pc, #72]	; (80088b4 <HAL_HCD_MspInit+0xc0>)
 800886a:	f7f9 f8b9 	bl	80019e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800886e:	4b10      	ldr	r3, [pc, #64]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008872:	4a0f      	ldr	r2, [pc, #60]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008878:	6353      	str	r3, [r2, #52]	; 0x34
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008882:	4a0b      	ldr	r2, [pc, #44]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008888:	6453      	str	r3, [r2, #68]	; 0x44
 800888a:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 800888c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008896:	2200      	movs	r2, #0
 8008898:	2100      	movs	r1, #0
 800889a:	2043      	movs	r0, #67	; 0x43
 800889c:	f7f9 f869 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088a0:	2043      	movs	r0, #67	; 0x43
 80088a2:	f7f9 f882 	bl	80019aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088a6:	bf00      	nop
 80088a8:	3728      	adds	r7, #40	; 0x28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40023800 	.word	0x40023800
 80088b4:	40020000 	.word	0x40020000

080088b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe ffed 	bl	80078a6 <USBH_LL_IncTimer>
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7ff f825 	bl	8007932 <USBH_LL_Connect>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff f82e 	bl	8007960 <USBH_LL_Disconnect>
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
 8008918:	4613      	mov	r3, r2
 800891a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe ffdf 	bl	80078fa <USBH_LL_PortEnabled>
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008952:	4618      	mov	r0, r3
 8008954:	f7fe ffdf 	bl	8007916 <USBH_LL_PortDisabled>
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800896e:	2b01      	cmp	r3, #1
 8008970:	d12a      	bne.n	80089c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008972:	4a18      	ldr	r2, [pc, #96]	; (80089d4 <USBH_LL_Init+0x74>)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a15      	ldr	r2, [pc, #84]	; (80089d4 <USBH_LL_Init+0x74>)
 800897e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008982:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <USBH_LL_Init+0x74>)
 8008984:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008988:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800898a:	4b12      	ldr	r3, [pc, #72]	; (80089d4 <USBH_LL_Init+0x74>)
 800898c:	2208      	movs	r2, #8
 800898e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008990:	4b10      	ldr	r3, [pc, #64]	; (80089d4 <USBH_LL_Init+0x74>)
 8008992:	2201      	movs	r2, #1
 8008994:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008996:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <USBH_LL_Init+0x74>)
 8008998:	2200      	movs	r2, #0
 800899a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800899c:	4b0d      	ldr	r3, [pc, #52]	; (80089d4 <USBH_LL_Init+0x74>)
 800899e:	2202      	movs	r2, #2
 80089a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089a2:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <USBH_LL_Init+0x74>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089a8:	480a      	ldr	r0, [pc, #40]	; (80089d4 <USBH_LL_Init+0x74>)
 80089aa:	f7f9 f9ff 	bl	8001dac <HAL_HCD_Init>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089b4:	f7f8 fb00 	bl	8000fb8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089b8:	4806      	ldr	r0, [pc, #24]	; (80089d4 <USBH_LL_Init+0x74>)
 80089ba:	f7f9 fde2 	bl	8002582 <HAL_HCD_GetCurrentFrame>
 80089be:	4603      	mov	r3, r0
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7fe ff60 	bl	8007888 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000778 	.word	0x20000778

080089d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7f9 fd51 	bl	8002496 <HAL_HCD_Start>
 80089f4:	4603      	mov	r3, r0
 80089f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 f95c 	bl	8008cb8 <USBH_Get_USB_Status>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7f9 fd59 	bl	80024dc <HAL_HCD_Stop>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 f941 	bl	8008cb8 <USBH_Get_USB_Status>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7f9 fda1 	bl	800259e <HAL_HCD_GetCurrentSpeed>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d00c      	beq.n	8008a7c <USBH_LL_GetSpeed+0x38>
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d80d      	bhi.n	8008a82 <USBH_LL_GetSpeed+0x3e>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <USBH_LL_GetSpeed+0x2c>
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d003      	beq.n	8008a76 <USBH_LL_GetSpeed+0x32>
 8008a6e:	e008      	b.n	8008a82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]
    break;
 8008a74:	e008      	b.n	8008a88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a76:	2301      	movs	r3, #1
 8008a78:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7a:	e005      	b.n	8008a88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a80:	e002      	b.n	8008a88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a82:	2301      	movs	r3, #1
 8008a84:	73fb      	strb	r3, [r7, #15]
    break;
 8008a86:	bf00      	nop
  }
  return  speed;
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7f9 fd34 	bl	8002516 <HAL_HCD_ResetPort>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 f8ff 	bl	8008cb8 <USBH_Get_USB_Status>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ada:	78fa      	ldrb	r2, [r7, #3]
 8008adc:	4611      	mov	r1, r2
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7f9 fd3b 	bl	800255a <HAL_HCD_HC_GetXferCount>
 8008ae4:	4603      	mov	r3, r0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008aee:	b590      	push	{r4, r7, lr}
 8008af0:	b089      	sub	sp, #36	; 0x24
 8008af2:	af04      	add	r7, sp, #16
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	4608      	mov	r0, r1
 8008af8:	4611      	mov	r1, r2
 8008afa:	461a      	mov	r2, r3
 8008afc:	4603      	mov	r3, r0
 8008afe:	70fb      	strb	r3, [r7, #3]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70bb      	strb	r3, [r7, #2]
 8008b04:	4613      	mov	r3, r2
 8008b06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b16:	787c      	ldrb	r4, [r7, #1]
 8008b18:	78ba      	ldrb	r2, [r7, #2]
 8008b1a:	78f9      	ldrb	r1, [r7, #3]
 8008b1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b1e:	9302      	str	r3, [sp, #8]
 8008b20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	4623      	mov	r3, r4
 8008b2e:	f7f9 f99f 	bl	8001e70 <HAL_HCD_HC_Init>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 f8bd 	bl	8008cb8 <USBH_Get_USB_Status>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd90      	pop	{r4, r7, pc}

08008b4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b66:	78fa      	ldrb	r2, [r7, #3]
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7f9 fa0f 	bl	8001f8e <HAL_HCD_HC_Halt>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 f89e 	bl	8008cb8 <USBH_Get_USB_Status>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b8a:	b590      	push	{r4, r7, lr}
 8008b8c:	b089      	sub	sp, #36	; 0x24
 8008b8e:	af04      	add	r7, sp, #16
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	4608      	mov	r0, r1
 8008b94:	4611      	mov	r1, r2
 8008b96:	461a      	mov	r2, r3
 8008b98:	4603      	mov	r3, r0
 8008b9a:	70fb      	strb	r3, [r7, #3]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70bb      	strb	r3, [r7, #2]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bb2:	787c      	ldrb	r4, [r7, #1]
 8008bb4:	78ba      	ldrb	r2, [r7, #2]
 8008bb6:	78f9      	ldrb	r1, [r7, #3]
 8008bb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bbc:	9303      	str	r3, [sp, #12]
 8008bbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bc0:	9302      	str	r3, [sp, #8]
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	4623      	mov	r3, r4
 8008bce:	f7f9 fa01 	bl	8001fd4 <HAL_HCD_HC_SubmitRequest>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 f86d 	bl	8008cb8 <USBH_Get_USB_Status>
 8008bde:	4603      	mov	r3, r0
 8008be0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd90      	pop	{r4, r7, pc}

08008bec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7f9 fc95 	bl	8002532 <HAL_HCD_HC_GetURBState>
 8008c08:	4603      	mov	r3, r0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d103      	bne.n	8008c30 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 f870 	bl	8008d10 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c30:	20c8      	movs	r0, #200	; 0xc8
 8008c32:	f7f8 fd9f 	bl	8001774 <HAL_Delay>
  return USBH_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c56:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c58:	78fb      	ldrb	r3, [r7, #3]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	212c      	movs	r1, #44	; 0x2c
 8008c5e:	fb01 f303 	mul.w	r3, r1, r3
 8008c62:	4413      	add	r3, r2
 8008c64:	333b      	adds	r3, #59	; 0x3b
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	212c      	movs	r1, #44	; 0x2c
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	4413      	add	r3, r2
 8008c78:	3354      	adds	r3, #84	; 0x54
 8008c7a:	78ba      	ldrb	r2, [r7, #2]
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	e008      	b.n	8008c92 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	212c      	movs	r1, #44	; 0x2c
 8008c86:	fb01 f303 	mul.w	r3, r1, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3355      	adds	r3, #85	; 0x55
 8008c8e:	78ba      	ldrb	r2, [r7, #2]
 8008c90:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7f8 fd63 	bl	8001774 <HAL_Delay>
}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cc6:	79fb      	ldrb	r3, [r7, #7]
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d817      	bhi.n	8008cfc <USBH_Get_USB_Status+0x44>
 8008ccc:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <USBH_Get_USB_Status+0x1c>)
 8008cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd2:	bf00      	nop
 8008cd4:	08008ce5 	.word	0x08008ce5
 8008cd8:	08008ceb 	.word	0x08008ceb
 8008cdc:	08008cf1 	.word	0x08008cf1
 8008ce0:	08008cf7 	.word	0x08008cf7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce8:	e00b      	b.n	8008d02 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008cea:	2302      	movs	r3, #2
 8008cec:	73fb      	strb	r3, [r7, #15]
    break;
 8008cee:	e008      	b.n	8008d02 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf4:	e005      	b.n	8008d02 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfa:	e002      	b.n	8008d02 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8008d00:	bf00      	nop
  }
  return usb_status;
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
 8008d28:	e001      	b.n	8008d2e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	461a      	mov	r2, r3
 8008d32:	2101      	movs	r1, #1
 8008d34:	4803      	ldr	r0, [pc, #12]	; (8008d44 <MX_DriverVbusFS+0x34>)
 8008d36:	f7f9 f807 	bl	8001d48 <HAL_GPIO_WritePin>
}
 8008d3a:	bf00      	nop
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	40020800 	.word	0x40020800

08008d48 <__errno>:
 8008d48:	4b01      	ldr	r3, [pc, #4]	; (8008d50 <__errno+0x8>)
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	2000013c 	.word	0x2000013c

08008d54 <__libc_init_array>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	4d0d      	ldr	r5, [pc, #52]	; (8008d8c <__libc_init_array+0x38>)
 8008d58:	4c0d      	ldr	r4, [pc, #52]	; (8008d90 <__libc_init_array+0x3c>)
 8008d5a:	1b64      	subs	r4, r4, r5
 8008d5c:	10a4      	asrs	r4, r4, #2
 8008d5e:	2600      	movs	r6, #0
 8008d60:	42a6      	cmp	r6, r4
 8008d62:	d109      	bne.n	8008d78 <__libc_init_array+0x24>
 8008d64:	4d0b      	ldr	r5, [pc, #44]	; (8008d94 <__libc_init_array+0x40>)
 8008d66:	4c0c      	ldr	r4, [pc, #48]	; (8008d98 <__libc_init_array+0x44>)
 8008d68:	f000 f92e 	bl	8008fc8 <_init>
 8008d6c:	1b64      	subs	r4, r4, r5
 8008d6e:	10a4      	asrs	r4, r4, #2
 8008d70:	2600      	movs	r6, #0
 8008d72:	42a6      	cmp	r6, r4
 8008d74:	d105      	bne.n	8008d82 <__libc_init_array+0x2e>
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
 8008d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d7c:	4798      	blx	r3
 8008d7e:	3601      	adds	r6, #1
 8008d80:	e7ee      	b.n	8008d60 <__libc_init_array+0xc>
 8008d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d86:	4798      	blx	r3
 8008d88:	3601      	adds	r6, #1
 8008d8a:	e7f2      	b.n	8008d72 <__libc_init_array+0x1e>
 8008d8c:	08009004 	.word	0x08009004
 8008d90:	08009004 	.word	0x08009004
 8008d94:	08009004 	.word	0x08009004
 8008d98:	08009008 	.word	0x08009008

08008d9c <malloc>:
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <malloc+0xc>)
 8008d9e:	4601      	mov	r1, r0
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	f000 b87f 	b.w	8008ea4 <_malloc_r>
 8008da6:	bf00      	nop
 8008da8:	2000013c 	.word	0x2000013c

08008dac <free>:
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <free+0xc>)
 8008dae:	4601      	mov	r1, r0
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	f000 b80b 	b.w	8008dcc <_free_r>
 8008db6:	bf00      	nop
 8008db8:	2000013c 	.word	0x2000013c

08008dbc <memset>:
 8008dbc:	4402      	add	r2, r0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d100      	bne.n	8008dc6 <memset+0xa>
 8008dc4:	4770      	bx	lr
 8008dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dca:	e7f9      	b.n	8008dc0 <memset+0x4>

08008dcc <_free_r>:
 8008dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dce:	2900      	cmp	r1, #0
 8008dd0:	d044      	beq.n	8008e5c <_free_r+0x90>
 8008dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd6:	9001      	str	r0, [sp, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f1a1 0404 	sub.w	r4, r1, #4
 8008dde:	bfb8      	it	lt
 8008de0:	18e4      	addlt	r4, r4, r3
 8008de2:	f000 f8e3 	bl	8008fac <__malloc_lock>
 8008de6:	4a1e      	ldr	r2, [pc, #120]	; (8008e60 <_free_r+0x94>)
 8008de8:	9801      	ldr	r0, [sp, #4]
 8008dea:	6813      	ldr	r3, [r2, #0]
 8008dec:	b933      	cbnz	r3, 8008dfc <_free_r+0x30>
 8008dee:	6063      	str	r3, [r4, #4]
 8008df0:	6014      	str	r4, [r2, #0]
 8008df2:	b003      	add	sp, #12
 8008df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008df8:	f000 b8de 	b.w	8008fb8 <__malloc_unlock>
 8008dfc:	42a3      	cmp	r3, r4
 8008dfe:	d908      	bls.n	8008e12 <_free_r+0x46>
 8008e00:	6825      	ldr	r5, [r4, #0]
 8008e02:	1961      	adds	r1, r4, r5
 8008e04:	428b      	cmp	r3, r1
 8008e06:	bf01      	itttt	eq
 8008e08:	6819      	ldreq	r1, [r3, #0]
 8008e0a:	685b      	ldreq	r3, [r3, #4]
 8008e0c:	1949      	addeq	r1, r1, r5
 8008e0e:	6021      	streq	r1, [r4, #0]
 8008e10:	e7ed      	b.n	8008dee <_free_r+0x22>
 8008e12:	461a      	mov	r2, r3
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	b10b      	cbz	r3, 8008e1c <_free_r+0x50>
 8008e18:	42a3      	cmp	r3, r4
 8008e1a:	d9fa      	bls.n	8008e12 <_free_r+0x46>
 8008e1c:	6811      	ldr	r1, [r2, #0]
 8008e1e:	1855      	adds	r5, r2, r1
 8008e20:	42a5      	cmp	r5, r4
 8008e22:	d10b      	bne.n	8008e3c <_free_r+0x70>
 8008e24:	6824      	ldr	r4, [r4, #0]
 8008e26:	4421      	add	r1, r4
 8008e28:	1854      	adds	r4, r2, r1
 8008e2a:	42a3      	cmp	r3, r4
 8008e2c:	6011      	str	r1, [r2, #0]
 8008e2e:	d1e0      	bne.n	8008df2 <_free_r+0x26>
 8008e30:	681c      	ldr	r4, [r3, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	6053      	str	r3, [r2, #4]
 8008e36:	4421      	add	r1, r4
 8008e38:	6011      	str	r1, [r2, #0]
 8008e3a:	e7da      	b.n	8008df2 <_free_r+0x26>
 8008e3c:	d902      	bls.n	8008e44 <_free_r+0x78>
 8008e3e:	230c      	movs	r3, #12
 8008e40:	6003      	str	r3, [r0, #0]
 8008e42:	e7d6      	b.n	8008df2 <_free_r+0x26>
 8008e44:	6825      	ldr	r5, [r4, #0]
 8008e46:	1961      	adds	r1, r4, r5
 8008e48:	428b      	cmp	r3, r1
 8008e4a:	bf04      	itt	eq
 8008e4c:	6819      	ldreq	r1, [r3, #0]
 8008e4e:	685b      	ldreq	r3, [r3, #4]
 8008e50:	6063      	str	r3, [r4, #4]
 8008e52:	bf04      	itt	eq
 8008e54:	1949      	addeq	r1, r1, r5
 8008e56:	6021      	streq	r1, [r4, #0]
 8008e58:	6054      	str	r4, [r2, #4]
 8008e5a:	e7ca      	b.n	8008df2 <_free_r+0x26>
 8008e5c:	b003      	add	sp, #12
 8008e5e:	bd30      	pop	{r4, r5, pc}
 8008e60:	20000a7c 	.word	0x20000a7c

08008e64 <sbrk_aligned>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	4e0e      	ldr	r6, [pc, #56]	; (8008ea0 <sbrk_aligned+0x3c>)
 8008e68:	460c      	mov	r4, r1
 8008e6a:	6831      	ldr	r1, [r6, #0]
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	b911      	cbnz	r1, 8008e76 <sbrk_aligned+0x12>
 8008e70:	f000 f88c 	bl	8008f8c <_sbrk_r>
 8008e74:	6030      	str	r0, [r6, #0]
 8008e76:	4621      	mov	r1, r4
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f000 f887 	bl	8008f8c <_sbrk_r>
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	d00a      	beq.n	8008e98 <sbrk_aligned+0x34>
 8008e82:	1cc4      	adds	r4, r0, #3
 8008e84:	f024 0403 	bic.w	r4, r4, #3
 8008e88:	42a0      	cmp	r0, r4
 8008e8a:	d007      	beq.n	8008e9c <sbrk_aligned+0x38>
 8008e8c:	1a21      	subs	r1, r4, r0
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f000 f87c 	bl	8008f8c <_sbrk_r>
 8008e94:	3001      	adds	r0, #1
 8008e96:	d101      	bne.n	8008e9c <sbrk_aligned+0x38>
 8008e98:	f04f 34ff 	mov.w	r4, #4294967295
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	20000a80 	.word	0x20000a80

08008ea4 <_malloc_r>:
 8008ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea8:	1ccd      	adds	r5, r1, #3
 8008eaa:	f025 0503 	bic.w	r5, r5, #3
 8008eae:	3508      	adds	r5, #8
 8008eb0:	2d0c      	cmp	r5, #12
 8008eb2:	bf38      	it	cc
 8008eb4:	250c      	movcc	r5, #12
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	4607      	mov	r7, r0
 8008eba:	db01      	blt.n	8008ec0 <_malloc_r+0x1c>
 8008ebc:	42a9      	cmp	r1, r5
 8008ebe:	d905      	bls.n	8008ecc <_malloc_r+0x28>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	2600      	movs	r6, #0
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ecc:	4e2e      	ldr	r6, [pc, #184]	; (8008f88 <_malloc_r+0xe4>)
 8008ece:	f000 f86d 	bl	8008fac <__malloc_lock>
 8008ed2:	6833      	ldr	r3, [r6, #0]
 8008ed4:	461c      	mov	r4, r3
 8008ed6:	bb34      	cbnz	r4, 8008f26 <_malloc_r+0x82>
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4638      	mov	r0, r7
 8008edc:	f7ff ffc2 	bl	8008e64 <sbrk_aligned>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	d14d      	bne.n	8008f82 <_malloc_r+0xde>
 8008ee6:	6834      	ldr	r4, [r6, #0]
 8008ee8:	4626      	mov	r6, r4
 8008eea:	2e00      	cmp	r6, #0
 8008eec:	d140      	bne.n	8008f70 <_malloc_r+0xcc>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	eb04 0803 	add.w	r8, r4, r3
 8008ef8:	f000 f848 	bl	8008f8c <_sbrk_r>
 8008efc:	4580      	cmp	r8, r0
 8008efe:	d13a      	bne.n	8008f76 <_malloc_r+0xd2>
 8008f00:	6821      	ldr	r1, [r4, #0]
 8008f02:	3503      	adds	r5, #3
 8008f04:	1a6d      	subs	r5, r5, r1
 8008f06:	f025 0503 	bic.w	r5, r5, #3
 8008f0a:	3508      	adds	r5, #8
 8008f0c:	2d0c      	cmp	r5, #12
 8008f0e:	bf38      	it	cc
 8008f10:	250c      	movcc	r5, #12
 8008f12:	4629      	mov	r1, r5
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff ffa5 	bl	8008e64 <sbrk_aligned>
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	d02b      	beq.n	8008f76 <_malloc_r+0xd2>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	442b      	add	r3, r5
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	e00e      	b.n	8008f44 <_malloc_r+0xa0>
 8008f26:	6822      	ldr	r2, [r4, #0]
 8008f28:	1b52      	subs	r2, r2, r5
 8008f2a:	d41e      	bmi.n	8008f6a <_malloc_r+0xc6>
 8008f2c:	2a0b      	cmp	r2, #11
 8008f2e:	d916      	bls.n	8008f5e <_malloc_r+0xba>
 8008f30:	1961      	adds	r1, r4, r5
 8008f32:	42a3      	cmp	r3, r4
 8008f34:	6025      	str	r5, [r4, #0]
 8008f36:	bf18      	it	ne
 8008f38:	6059      	strne	r1, [r3, #4]
 8008f3a:	6863      	ldr	r3, [r4, #4]
 8008f3c:	bf08      	it	eq
 8008f3e:	6031      	streq	r1, [r6, #0]
 8008f40:	5162      	str	r2, [r4, r5]
 8008f42:	604b      	str	r3, [r1, #4]
 8008f44:	4638      	mov	r0, r7
 8008f46:	f104 060b 	add.w	r6, r4, #11
 8008f4a:	f000 f835 	bl	8008fb8 <__malloc_unlock>
 8008f4e:	f026 0607 	bic.w	r6, r6, #7
 8008f52:	1d23      	adds	r3, r4, #4
 8008f54:	1af2      	subs	r2, r6, r3
 8008f56:	d0b6      	beq.n	8008ec6 <_malloc_r+0x22>
 8008f58:	1b9b      	subs	r3, r3, r6
 8008f5a:	50a3      	str	r3, [r4, r2]
 8008f5c:	e7b3      	b.n	8008ec6 <_malloc_r+0x22>
 8008f5e:	6862      	ldr	r2, [r4, #4]
 8008f60:	42a3      	cmp	r3, r4
 8008f62:	bf0c      	ite	eq
 8008f64:	6032      	streq	r2, [r6, #0]
 8008f66:	605a      	strne	r2, [r3, #4]
 8008f68:	e7ec      	b.n	8008f44 <_malloc_r+0xa0>
 8008f6a:	4623      	mov	r3, r4
 8008f6c:	6864      	ldr	r4, [r4, #4]
 8008f6e:	e7b2      	b.n	8008ed6 <_malloc_r+0x32>
 8008f70:	4634      	mov	r4, r6
 8008f72:	6876      	ldr	r6, [r6, #4]
 8008f74:	e7b9      	b.n	8008eea <_malloc_r+0x46>
 8008f76:	230c      	movs	r3, #12
 8008f78:	603b      	str	r3, [r7, #0]
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	f000 f81c 	bl	8008fb8 <__malloc_unlock>
 8008f80:	e7a1      	b.n	8008ec6 <_malloc_r+0x22>
 8008f82:	6025      	str	r5, [r4, #0]
 8008f84:	e7de      	b.n	8008f44 <_malloc_r+0xa0>
 8008f86:	bf00      	nop
 8008f88:	20000a7c 	.word	0x20000a7c

08008f8c <_sbrk_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d06      	ldr	r5, [pc, #24]	; (8008fa8 <_sbrk_r+0x1c>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	f7f8 f8f6 	bl	8001188 <_sbrk>
 8008f9c:	1c43      	adds	r3, r0, #1
 8008f9e:	d102      	bne.n	8008fa6 <_sbrk_r+0x1a>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	b103      	cbz	r3, 8008fa6 <_sbrk_r+0x1a>
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	20000a84 	.word	0x20000a84

08008fac <__malloc_lock>:
 8008fac:	4801      	ldr	r0, [pc, #4]	; (8008fb4 <__malloc_lock+0x8>)
 8008fae:	f000 b809 	b.w	8008fc4 <__retarget_lock_acquire_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	20000a88 	.word	0x20000a88

08008fb8 <__malloc_unlock>:
 8008fb8:	4801      	ldr	r0, [pc, #4]	; (8008fc0 <__malloc_unlock+0x8>)
 8008fba:	f000 b804 	b.w	8008fc6 <__retarget_lock_release_recursive>
 8008fbe:	bf00      	nop
 8008fc0:	20000a88 	.word	0x20000a88

08008fc4 <__retarget_lock_acquire_recursive>:
 8008fc4:	4770      	bx	lr

08008fc6 <__retarget_lock_release_recursive>:
 8008fc6:	4770      	bx	lr

08008fc8 <_init>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	bf00      	nop
 8008fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fce:	bc08      	pop	{r3}
 8008fd0:	469e      	mov	lr, r3
 8008fd2:	4770      	bx	lr

08008fd4 <_fini>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	bf00      	nop
 8008fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fda:	bc08      	pop	{r3}
 8008fdc:	469e      	mov	lr, r3
 8008fde:	4770      	bx	lr
