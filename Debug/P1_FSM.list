
P1_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008950  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008ad8  08008ad8  00018ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af4  08008af4  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08008af4  08008af4  00018af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008afc  08008afc  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b00  08008b00  00018b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08008b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          000008a4  20000204  20000204  00020204  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000aa8  20000aa8  00020204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c791  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004594  00000000  00000000  0003c9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  00040f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001608  00000000  00000000  00042758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ba3  00000000  00000000  00043d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f43c  00000000  00000000  00069903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3e9f  00000000  00000000  00088d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015cbde  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000665c  00000000  00000000  0015cc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000204 	.word	0x20000204
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ac0 	.word	0x08008ac0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000208 	.word	0x20000208
 80001c4:	08008ac0 	.word	0x08008ac0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <fsm_new>:
#include <stdlib.h>
#include "fsm.h"

fsm_t*
fsm_new (fsm_trans_t* tt)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 80004d4:	2008      	movs	r0, #8
 80004d6:	f008 f9dd 	bl	8008894 <malloc>
 80004da:	4603      	mov	r3, r0
 80004dc:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f000 f805 	bl	80004f0 <fsm_init>
  return this;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <fsm_init>:

void
fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  this->current_state=0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
  this->tt = tt;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	605a      	str	r2, [r3, #4]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <fsm_fire>:

void
fsm_fire (fsm_t* this)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b084      	sub	sp, #16
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e01c      	b.n	800055c <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	429a      	cmp	r2, r3
 800052c:	d113      	bne.n	8000556 <fsm_fire+0x44>
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	4798      	blx	r3
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d00c      	beq.n	8000556 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00c      	beq.n	8000566 <fsm_fire+0x54>
        t->out(this);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	4798      	blx	r3
      break;
 8000554:	e007      	b.n	8000566 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3310      	adds	r3, #16
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	dade      	bge.n	8000522 <fsm_fire+0x10>
    }
  }
}
 8000564:	e000      	b.n	8000568 <fsm_fire+0x56>
      break;
 8000566:	bf00      	nop
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	4b7c      	ldr	r3, [pc, #496]	; (800077c <MX_GPIO_Init+0x20c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a7b      	ldr	r2, [pc, #492]	; (800077c <MX_GPIO_Init+0x20c>)
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b79      	ldr	r3, [pc, #484]	; (800077c <MX_GPIO_Init+0x20c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0310 	and.w	r3, r3, #16
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	4b75      	ldr	r3, [pc, #468]	; (800077c <MX_GPIO_Init+0x20c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a74      	ldr	r2, [pc, #464]	; (800077c <MX_GPIO_Init+0x20c>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b72      	ldr	r3, [pc, #456]	; (800077c <MX_GPIO_Init+0x20c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b6e      	ldr	r3, [pc, #440]	; (800077c <MX_GPIO_Init+0x20c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a6d      	ldr	r2, [pc, #436]	; (800077c <MX_GPIO_Init+0x20c>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b6b      	ldr	r3, [pc, #428]	; (800077c <MX_GPIO_Init+0x20c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b67      	ldr	r3, [pc, #412]	; (800077c <MX_GPIO_Init+0x20c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a66      	ldr	r2, [pc, #408]	; (800077c <MX_GPIO_Init+0x20c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b64      	ldr	r3, [pc, #400]	; (800077c <MX_GPIO_Init+0x20c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b60      	ldr	r3, [pc, #384]	; (800077c <MX_GPIO_Init+0x20c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a5f      	ldr	r2, [pc, #380]	; (800077c <MX_GPIO_Init+0x20c>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b5d      	ldr	r3, [pc, #372]	; (800077c <MX_GPIO_Init+0x20c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b59      	ldr	r3, [pc, #356]	; (800077c <MX_GPIO_Init+0x20c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a58      	ldr	r2, [pc, #352]	; (800077c <MX_GPIO_Init+0x20c>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b56      	ldr	r3, [pc, #344]	; (800077c <MX_GPIO_Init+0x20c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	4853      	ldr	r0, [pc, #332]	; (8000780 <MX_GPIO_Init+0x210>)
 8000634:	f001 fa6c 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	4851      	ldr	r0, [pc, #324]	; (8000784 <MX_GPIO_Init+0x214>)
 800063e:	f001 fa67 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	2200      	movs	r2, #0
 8000644:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000648:	484f      	ldr	r0, [pc, #316]	; (8000788 <MX_GPIO_Init+0x218>)
 800064a:	f001 fa61 	bl	8001b10 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800064e:	2308      	movs	r3, #8
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4846      	ldr	r0, [pc, #280]	; (8000780 <MX_GPIO_Init+0x210>)
 8000666:	f001 f89f 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800066a:	2301      	movs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4840      	ldr	r0, [pc, #256]	; (8000784 <MX_GPIO_Init+0x214>)
 8000682:	f001 f891 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000686:	2308      	movs	r3, #8
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000696:	2305      	movs	r3, #5
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4838      	ldr	r0, [pc, #224]	; (8000784 <MX_GPIO_Init+0x214>)
 80006a2:	f001 f881 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4834      	ldr	r0, [pc, #208]	; (800078c <MX_GPIO_Init+0x21c>)
 80006bc:	f001 f874 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006c0:	230e      	movs	r3, #14
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	482e      	ldr	r0, [pc, #184]	; (800078c <MX_GPIO_Init+0x21c>)
 80006d4:	f001 f868 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006d8:	2304      	movs	r3, #4
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4829      	ldr	r0, [pc, #164]	; (8000790 <MX_GPIO_Init+0x220>)
 80006ec:	f001 f85c 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000702:	2305      	movs	r3, #5
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4820      	ldr	r0, [pc, #128]	; (8000790 <MX_GPIO_Init+0x220>)
 800070e:	f001 f84b 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000712:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000716:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4817      	ldr	r0, [pc, #92]	; (8000788 <MX_GPIO_Init+0x218>)
 800072c:	f001 f83c 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000730:	2320      	movs	r3, #32
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_GPIO_Init+0x218>)
 8000744:	f001 f830 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800074c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <MX_GPIO_Init+0x210>)
 800075e:	f001 f823 	bl	80017a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2006      	movs	r0, #6
 8000768:	f000 ffe7 	bl	800173a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800076c:	2006      	movs	r0, #6
 800076e:	f001 f800 	bl	8001772 <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	; 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40021000 	.word	0x40021000
 8000784:	40020800 	.word	0x40020800
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40020000 	.word	0x40020000
 8000790:	40020400 	.word	0x40020400

08000794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x50>)
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <MX_I2C1_Init+0x54>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_I2C1_Init+0x58>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007d2:	f002 fdd9 	bl	8003388 <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 fc1c 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000220 	.word	0x20000220
 80007e8:	40005400 	.word	0x40005400
 80007ec:	000186a0 	.word	0x000186a0

080007f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <HAL_I2C_MspInit+0x84>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d12c      	bne.n	800086c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_I2C_MspInit+0x88>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800082e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000834:	2312      	movs	r3, #18
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000840:	2304      	movs	r3, #4
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <HAL_I2C_MspInit+0x8c>)
 800084c:	f000 ffac 	bl	80017a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_I2C_MspInit+0x88>)
 800085a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40005400 	.word	0x40005400
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400

08000880 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_I2S3_Init+0x54>)
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <MX_I2S3_Init+0x58>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2S3_Init+0x54>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_I2S3_Init+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <MX_I2S3_Init+0x5c>)
 80008aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008c0:	f002 fea6 	bl	8003610 <HAL_I2S_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ca:	f000 fba5 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000274 	.word	0x20000274
 80008d8:	40003c00 	.word	0x40003c00
 80008dc:	00017700 	.word	0x00017700

080008e0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a31      	ldr	r2, [pc, #196]	; (80009d0 <HAL_I2S_MspInit+0xf0>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d15a      	bne.n	80009c6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000910:	2301      	movs	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000914:	23c0      	movs	r3, #192	; 0xc0
 8000916:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4618      	mov	r0, r3
 8000922:	f003 ff99 	bl	8004858 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800092c:	f000 fb74 	bl	8001018 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a26      	ldr	r2, [pc, #152]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800093a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800093e:	6413      	str	r3, [r2, #64]	; 0x40
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_I2S_MspInit+0xf4>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000984:	2310      	movs	r3, #16
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000994:	2306      	movs	r3, #6
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <HAL_I2S_MspInit+0xf8>)
 80009a0:	f000 ff02 	bl	80017a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b6:	2306      	movs	r3, #6
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	4806      	ldr	r0, [pc, #24]	; (80009dc <HAL_I2S_MspInit+0xfc>)
 80009c2:	f000 fef1 	bl	80017a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009c6:	bf00      	nop
 80009c8:	3738      	adds	r7, #56	; 0x38
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40003c00 	.word	0x40003c00
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020800 	.word	0x40020800

080009e0 <boton_presionado>:

//salidas
static uint8_t faultx, faulty, faultz;

//funciones de transicion
static int boton_presionado (fsm_t* this) { /*if (timer_boton)*/ return boton; /*else return 0;*/ }
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <boton_presionado+0x18>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	200002bc 	.word	0x200002bc

080009fc <boton_no_presionado>:
static int boton_no_presionado (fsm_t* this) {return !boton; }
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <boton_no_presionado+0x24>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bf0c      	ite	eq
 8000a0c:	2301      	moveq	r3, #1
 8000a0e:	2300      	movne	r3, #0
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200002bc 	.word	0x200002bc

08000a24 <sensorx_on>:

static int sensorx_on (fsm_t* this) { return sensorx; }
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <sensorx_on+0x18>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	200002bd 	.word	0x200002bd

08000a40 <sensory_on>:
static int sensory_on (fsm_t* this) { return sensory; }
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <sensory_on+0x18>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	200002be 	.word	0x200002be

08000a5c <sensorz_on>:
static int sensorz_on (fsm_t* this) { return sensorz; }
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <sensorz_on+0x18>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	200002bf 	.word	0x200002bf

08000a78 <sensorx_off>:
static int sensorx_off (fsm_t* this) { return !sensorx; }
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <sensorx_off+0x24>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf0c      	ite	eq
 8000a88:	2301      	moveq	r3, #1
 8000a8a:	2300      	movne	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	200002bd 	.word	0x200002bd

08000aa0 <sensory_off>:
static int sensory_off (fsm_t* this) { return !sensory; }
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <sensory_off+0x24>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf0c      	ite	eq
 8000ab0:	2301      	moveq	r3, #1
 8000ab2:	2300      	movne	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200002be 	.word	0x200002be

08000ac8 <sensorz_off>:
static int sensorz_off (fsm_t* this) { return !sensorz; }
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <sensorz_off+0x24>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200002bf 	.word	0x200002bf

08000af0 <activado_on>:

static int activado_on (fsm_t* this) { if (timer_lectura) return activado; else return 0; }
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <activado_on+0x24>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <activado_on+0x16>
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <activado_on+0x28>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	e000      	b.n	8000b08 <activado_on+0x18>
 8000b06:	2300      	movs	r3, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	200002c1 	.word	0x200002c1
 8000b18:	200002c0 	.word	0x200002c0

08000b1c <activado_off>:
static int activado_off (fsm_t* this) { if (!timer_lectura || !activado) return 1; else return 0; }
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <activado_off+0x2c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <activado_off+0x18>
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <activado_off+0x30>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <activado_off+0x1c>
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <activado_off+0x1e>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200002c1 	.word	0x200002c1
 8000b4c:	200002c0 	.word	0x200002c0

08000b50 <activado_on_led>:
static int activado_on_led (fsm_t* this) { if (timer_led && activado) return 1; else return 0; }
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <activado_on_led+0x2c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d005      	beq.n	8000b6c <activado_on_led+0x1c>
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <activado_on_led+0x30>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <activado_on_led+0x1c>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <activado_on_led+0x1e>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200002c2 	.word	0x200002c2
 8000b80:	200002c0 	.word	0x200002c0

08000b84 <activado_off_led>:
static int activado_off_led (fsm_t* this) { if (!timer_led||!activado) return 1; else return 0; }
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <activado_off_led+0x2c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d003      	beq.n	8000b9c <activado_off_led+0x18>
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <activado_off_led+0x30>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <activado_off_led+0x1c>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <activado_off_led+0x1e>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200002c2 	.word	0x200002c2
 8000bb4:	200002c0 	.word	0x200002c0

08000bb8 <defecto>:

static int defecto (fsm_t* this)  {return 1;}
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <activacion>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void activacion (fsm_t* this)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  activado = 1;
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <activacion+0x1c>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200002c0 	.word	0x200002c0

08000bf0 <desactivacion>:

static void desactivacion (fsm_t* this)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  activado = 0;
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <desactivacion+0x1c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200002c0 	.word	0x200002c0

08000c10 <lectura_x>:

static void lectura_x (fsm_t* this)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  faultx = 1;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <lectura_x+0x24>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <lectura_x+0x28>)
 8000c26:	f000 ff73 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200002c3 	.word	0x200002c3
 8000c38:	40020c00 	.word	0x40020c00

08000c3c <lectura_y>:

static void lectura_y (fsm_t* this)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  faulty = 1;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <lectura_y+0x24>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <lectura_y+0x28>)
 8000c52:	f000 ff5d 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200002c4 	.word	0x200002c4
 8000c64:	40020c00 	.word	0x40020c00

08000c68 <lectura_z>:

static void lectura_z (fsm_t* this)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  faultz = 1;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <lectura_z+0x24>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <lectura_z+0x28>)
 8000c7e:	f000 ff47 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200002c5 	.word	0x200002c5
 8000c90:	40020c00 	.word	0x40020c00

08000c94 <lectura_x_fin>:

static void lectura_x_fin (fsm_t* this)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  faultx = 0;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <lectura_x_fin+0x24>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <lectura_x_fin+0x28>)
 8000caa:	f000 ff31 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200002c3 	.word	0x200002c3
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <lectura_y_fin>:

static void lectura_y_fin (fsm_t* this)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  faulty = 0;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <lectura_y_fin+0x24>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <lectura_y_fin+0x28>)
 8000cd6:	f000 ff1b 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200002c4 	.word	0x200002c4
 8000ce8:	40020c00 	.word	0x40020c00

08000cec <lectura_z_fin>:

static void lectura_z_fin (fsm_t* this)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  faultz = 0;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <lectura_z_fin+0x24>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <lectura_z_fin+0x28>)
 8000d02:	f000 ff05 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200002c5 	.word	0x200002c5
 8000d14:	40020c00 	.word	0x40020c00

08000d18 <lectura_fin>:

static void lectura_fin (fsm_t* this)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  faultx = 0;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <lectura_fin+0x48>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
  faulty = 0;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <lectura_fin+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
  faultz = 0;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <lectura_fin+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <lectura_fin+0x54>)
 8000d3a:	f000 fee9 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <lectura_fin+0x54>)
 8000d46:	f000 fee3 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <lectura_fin+0x54>)
 8000d52:	f000 fedd 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200002c3 	.word	0x200002c3
 8000d64:	200002c4 	.word	0x200002c4
 8000d68:	200002c5 	.word	0x200002c5
 8000d6c:	40020c00 	.word	0x40020c00

08000d70 <led_activado>:

static void led_activado (fsm_t* this)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <led_activado+0x1c>)
 8000d80:	f000 fec6 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40020c00 	.word	0x40020c00

08000d90 <led_no_activado>:

static void led_no_activado (fsm_t* this)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <led_no_activado+0x1c>)
 8000da0:	f000 feb6 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40020c00 	.word	0x40020c00

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db6:	f000 fb4f 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dba:	f000 f875 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dbe:	f7ff fbd7 	bl	8000570 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dc2:	f7ff fce7 	bl	8000794 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dc6:	f7ff fd5b 	bl	8000880 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000dca:	f000 f92b 	bl	8001024 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000dce:	f007 fa2f 	bl	8008230 <MX_USB_HOST_Init>
  MX_TIM6_Init();
 8000dd2:	f000 fa65 	bl	80012a0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000dd6:	f000 fa99 	bl	800130c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //Temporizadores
  HAL_TIM_Base_Start_IT(&htim6);
 8000dda:	4829      	ldr	r0, [pc, #164]	; (8000e80 <main+0xd0>)
 8000ddc:	f003 ff54 	bl	8004c88 <HAL_TIM_Base_Start_IT>

  //Cración de las FSM
  fsm_t* fsm_inicio = fsm_new (inicio);
 8000de0:	4828      	ldr	r0, [pc, #160]	; (8000e84 <main+0xd4>)
 8000de2:	f7ff fb73 	bl	80004cc <fsm_new>
 8000de6:	6178      	str	r0, [r7, #20]
  fsm_t* fsm_lectura_x = fsm_new (lecturax);
 8000de8:	4827      	ldr	r0, [pc, #156]	; (8000e88 <main+0xd8>)
 8000dea:	f7ff fb6f 	bl	80004cc <fsm_new>
 8000dee:	6138      	str	r0, [r7, #16]
  fsm_t* fsm_lectura_y = fsm_new (lecturay);
 8000df0:	4826      	ldr	r0, [pc, #152]	; (8000e8c <main+0xdc>)
 8000df2:	f7ff fb6b 	bl	80004cc <fsm_new>
 8000df6:	60f8      	str	r0, [r7, #12]
  fsm_t* fsm_lectura_z = fsm_new (lecturaz);
 8000df8:	4825      	ldr	r0, [pc, #148]	; (8000e90 <main+0xe0>)
 8000dfa:	f7ff fb67 	bl	80004cc <fsm_new>
 8000dfe:	60b8      	str	r0, [r7, #8]
  fsm_t* fsm_led_activo = fsm_new (led_activo);
 8000e00:	4824      	ldr	r0, [pc, #144]	; (8000e94 <main+0xe4>)
 8000e02:	f7ff fb63 	bl	80004cc <fsm_new>
 8000e06:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e08:	f007 fa38 	bl	800827c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    fsm_fire (fsm_inicio);
 8000e0c:	6978      	ldr	r0, [r7, #20]
 8000e0e:	f7ff fb80 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_x);
 8000e12:	6938      	ldr	r0, [r7, #16]
 8000e14:	f7ff fb7d 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_y);
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f7ff fb7a 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_z);
 8000e1e:	68b8      	ldr	r0, [r7, #8]
 8000e20:	f7ff fb77 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_led_activo);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fb74 	bl	8000512 <fsm_fire>

    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	481a      	ldr	r0, [pc, #104]	; (8000e98 <main+0xe8>)
 8000e2e:	f000 fe57 	bl	8001ae0 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <main+0x90>
    	sensorx = 1;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <main+0xec>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e002      	b.n	8000e46 <main+0x96>
    else
    	sensorx = 0;
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <main+0xec>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000e46:	2104      	movs	r1, #4
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <main+0xe8>)
 8000e4a:	f000 fe49 	bl	8001ae0 <HAL_GPIO_ReadPin>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <main+0xac>
       	sensory = 1;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <main+0xf0>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e002      	b.n	8000e62 <main+0xb2>
    else
		sensory = 0;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <main+0xf0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000e62:	2108      	movs	r1, #8
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <main+0xe8>)
 8000e66:	f000 fe3b 	bl	8001ae0 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <main+0xc8>
       	sensorz = 1;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <main+0xf4>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e7c7      	b.n	8000e08 <main+0x58>
    else
		sensorz = 0;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <main+0xf4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000e7e:	e7c3      	b.n	8000e08 <main+0x58>
 8000e80:	20000324 	.word	0x20000324
 8000e84:	20000004 	.word	0x20000004
 8000e88:	20000044 	.word	0x20000044
 8000e8c:	20000094 	.word	0x20000094
 8000e90:	200000e4 	.word	0x200000e4
 8000e94:	20000134 	.word	0x20000134
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	200002bd 	.word	0x200002bd
 8000ea0:	200002be 	.word	0x200002be
 8000ea4:	200002bf 	.word	0x200002bf

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	2230      	movs	r2, #48	; 0x30
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f007 fcfc 	bl	80088b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <SystemClock_Config+0xd0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <SystemClock_Config+0xd0>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <SystemClock_Config+0xd0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f04:	2301      	movs	r3, #1
 8000f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f26:	2307      	movs	r3, #7
 8000f28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 f80e 	bl	8003f50 <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f3a:	f000 f86d 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2302      	movs	r3, #2
 8000f44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000f4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fa6f 	bl	8004440 <HAL_RCC_ClockConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f68:	f000 f856 	bl	8001018 <Error_Handler>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3750      	adds	r7, #80	; 0x50
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_0 && timer_boton==1){
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d10f      	bne.n	8000fac <HAL_GPIO_EXTI_Callback+0x30>
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d10b      	bne.n	8000fac <HAL_GPIO_EXTI_Callback+0x30>
		boton=~boton;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f9e:	701a      	strb	r2, [r3, #0]
		timer_boton=0;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim7);
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x40>)
 8000fa8:	f003 fe6e 	bl	8004c88 <HAL_TIM_Base_Start_IT>

	}
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	200002bc 	.word	0x200002bc
 8000fbc:	2000036c 	.word	0x2000036c

08000fc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM6)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d105      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		timer_led=~timer_led;
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fdc:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance==TIM7)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d109      	bne.n	8000ffc <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		timer_boton=1;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim7);
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ff0:	f003 feba 	bl	8004d68 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim7,0);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40001000 	.word	0x40001000
 8001008:	200002c2 	.word	0x200002c2
 800100c:	40001400 	.word	0x40001400
 8001010:	20000000 	.word	0x20000000
 8001014:	2000036c 	.word	0x2000036c

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_SPI1_Init+0x64>)
 800102a:	4a18      	ldr	r2, [pc, #96]	; (800108c <MX_SPI1_Init+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_SPI1_Init+0x64>)
 8001030:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001034:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_SPI1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_SPI1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_SPI1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_SPI1_Init+0x64>)
 8001050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001054:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_SPI1_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_SPI1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_SPI1_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_SPI1_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_SPI1_Init+0x64>)
 8001070:	220a      	movs	r2, #10
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_SPI1_Init+0x64>)
 8001076:	f003 fd2f 	bl	8004ad8 <HAL_SPI_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001080:	f7ff ffca 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200002c8 	.word	0x200002c8
 800108c:	40013000 	.word	0x40013000

08001090 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a19      	ldr	r2, [pc, #100]	; (8001114 <HAL_SPI_MspInit+0x84>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d12b      	bne.n	800110a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_SPI_MspInit+0x88>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_SPI_MspInit+0x88>)
 80010bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_SPI_MspInit+0x88>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_SPI_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <HAL_SPI_MspInit+0x88>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_SPI_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010ea:	23e0      	movs	r3, #224	; 0xe0
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010fa:	2305      	movs	r3, #5
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_SPI_MspInit+0x8c>)
 8001106:	f000 fb4f 	bl	80017a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40013000 	.word	0x40013000
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_MspInit+0x4c>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_MspInit+0x4c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x4c>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800115e:	2007      	movs	r0, #7
 8001160:	f000 fae0 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f99e 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f000 fcbb 	bl	8001b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <TIM6_DAC_IRQHandler+0x10>)
 80011da:	f003 fdf4 	bl	8004dc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000324 	.word	0x20000324

080011e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <TIM7_IRQHandler+0x10>)
 80011ee:	f003 fdea 	bl	8004dc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000036c 	.word	0x2000036c

080011fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <OTG_FS_IRQHandler+0x10>)
 8001202:	f000 ff21 	bl	8002048 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000794 	.word	0x20000794

08001210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <_sbrk+0x5c>)
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <_sbrk+0x60>)
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <_sbrk+0x64>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <_sbrk+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	429a      	cmp	r2, r3
 800123e:	d207      	bcs.n	8001250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001240:	f007 fafe 	bl	8008840 <__errno>
 8001244:	4603      	mov	r3, r0
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	e009      	b.n	8001264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <_sbrk+0x64>)
 8001260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20020000 	.word	0x20020000
 8001270:	00000400 	.word	0x00000400
 8001274:	20000320 	.word	0x20000320
 8001278:	20000aa8 	.word	0x20000aa8

0800127c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <SystemInit+0x20>)
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <SystemInit+0x20>)
 8001288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800128c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_TIM6_Init+0x64>)
 80012b0:	4a15      	ldr	r2, [pc, #84]	; (8001308 <MX_TIM6_Init+0x68>)
 80012b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_TIM6_Init+0x64>)
 80012b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_TIM6_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 41999;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_TIM6_Init+0x64>)
 80012c4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80012c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_TIM6_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <MX_TIM6_Init+0x64>)
 80012d2:	f003 fc8a 	bl	8004bea <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012dc:	f7ff fe9c 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_TIM6_Init+0x64>)
 80012ee:	f003 ff3b 	bl	8005168 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012f8:	f7ff fe8e 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000324 	.word	0x20000324
 8001308:	40001000 	.word	0x40001000

0800130c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001312:	463b      	mov	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM7_Init+0x64>)
 800131c:	4a15      	ldr	r2, [pc, #84]	; (8001374 <MX_TIM7_Init+0x68>)
 800131e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1999;
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_TIM7_Init+0x64>)
 8001322:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001326:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_TIM7_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 41999;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_TIM7_Init+0x64>)
 8001330:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001334:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_TIM7_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_TIM7_Init+0x64>)
 800133e:	f003 fc54 	bl	8004bea <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001348:	f7ff fe66 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_TIM7_Init+0x64>)
 800135a:	f003 ff05 	bl	8005168 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001364:	f7ff fe58 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000036c 	.word	0x2000036c
 8001374:	40001400 	.word	0x40001400

08001378 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <HAL_TIM_Base_MspInit+0x80>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d116      	bne.n	80013b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_TIM_Base_MspInit+0x84>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <HAL_TIM_Base_MspInit+0x84>)
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_TIM_Base_MspInit+0x84>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2036      	movs	r0, #54	; 0x36
 80013ac:	f000 f9c5 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013b0:	2036      	movs	r0, #54	; 0x36
 80013b2:	f000 f9de 	bl	8001772 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80013b6:	e01a      	b.n	80013ee <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_TIM_Base_MspInit+0x88>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d115      	bne.n	80013ee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_TIM_Base_MspInit+0x84>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_TIM_Base_MspInit+0x84>)
 80013cc:	f043 0320 	orr.w	r3, r3, #32
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_TIM_Base_MspInit+0x84>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 0320 	and.w	r3, r3, #32
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2037      	movs	r0, #55	; 0x37
 80013e4:	f000 f9a9 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013e8:	2037      	movs	r0, #55	; 0x37
 80013ea:	f000 f9c2 	bl	8001772 <HAL_NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40001000 	.word	0x40001000
 80013fc:	40023800 	.word	0x40023800
 8001400:	40001400 	.word	0x40001400

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800140a:	490e      	ldr	r1, [pc, #56]	; (8001444 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800140c:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001420:	4c0b      	ldr	r4, [pc, #44]	; (8001450 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800142e:	f7ff ff25 	bl	800127c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001432:	f007 fa0b 	bl	800884c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fcbb 	bl	8000db0 <main>
  bx  lr    
 800143a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800143c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001448:	08008b04 	.word	0x08008b04
  ldr r2, =_sbss
 800144c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001450:	20000aa8 	.word	0x20000aa8

08001454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <HAL_Init+0x40>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_Init+0x40>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_Init+0x40>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f94f 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	2000      	movs	r0, #0
 8001488:	f000 f808 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fe48 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x54>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f967 	bl	800178e <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 f92f 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <HAL_InitTick+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000174 	.word	0x20000174
 80014f4:	2000017c 	.word	0x2000017c
 80014f8:	20000178 	.word	0x20000178

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	2000017c 	.word	0x2000017c
 8001520:	200003b4 	.word	0x200003b4

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200003b4 	.word	0x200003b4

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000017c 	.word	0x2000017c

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4907      	ldr	r1, [pc, #28]	; (8001620 <__NVIC_EnableIRQ+0x38>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff29 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff3e 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff8e 	bl	8001678 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5d 	bl	8001624 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff31 	bl	80015e8 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e16b      	b.n	8001a9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 815a 	bne.w	8001a96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d005      	beq.n	80017fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d130      	bne.n	800185c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b03      	cmp	r3, #3
 8001866:	d017      	beq.n	8001898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80b4 	beq.w	8001a96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b60      	ldr	r3, [pc, #384]	; (8001ab4 <HAL_GPIO_Init+0x30c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a5f      	ldr	r2, [pc, #380]	; (8001ab4 <HAL_GPIO_Init+0x30c>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_GPIO_Init+0x30c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194a:	4a5b      	ldr	r2, [pc, #364]	; (8001ab8 <HAL_GPIO_Init+0x310>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a52      	ldr	r2, [pc, #328]	; (8001abc <HAL_GPIO_Init+0x314>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d02b      	beq.n	80019ce <HAL_GPIO_Init+0x226>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a51      	ldr	r2, [pc, #324]	; (8001ac0 <HAL_GPIO_Init+0x318>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d025      	beq.n	80019ca <HAL_GPIO_Init+0x222>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a50      	ldr	r2, [pc, #320]	; (8001ac4 <HAL_GPIO_Init+0x31c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d01f      	beq.n	80019c6 <HAL_GPIO_Init+0x21e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4f      	ldr	r2, [pc, #316]	; (8001ac8 <HAL_GPIO_Init+0x320>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d019      	beq.n	80019c2 <HAL_GPIO_Init+0x21a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4e      	ldr	r2, [pc, #312]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0x216>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4d      	ldr	r2, [pc, #308]	; (8001ad0 <HAL_GPIO_Init+0x328>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00d      	beq.n	80019ba <HAL_GPIO_Init+0x212>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <HAL_GPIO_Init+0x32c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <HAL_GPIO_Init+0x20e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_GPIO_Init+0x20a>
 80019ae:	2307      	movs	r3, #7
 80019b0:	e00e      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019b2:	2308      	movs	r3, #8
 80019b4:	e00c      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019b6:	2306      	movs	r3, #6
 80019b8:	e00a      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e008      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019be:	2304      	movs	r3, #4
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019c2:	2303      	movs	r3, #3
 80019c4:	e004      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019ce:	2300      	movs	r3, #0
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f002 0203 	and.w	r2, r2, #3
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	4093      	lsls	r3, r2
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e0:	4935      	ldr	r1, [pc, #212]	; (8001ab8 <HAL_GPIO_Init+0x310>)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3302      	adds	r3, #2
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_GPIO_Init+0x334>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a12:	4a32      	ldr	r2, [pc, #200]	; (8001adc <HAL_GPIO_Init+0x334>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a18:	4b30      	ldr	r3, [pc, #192]	; (8001adc <HAL_GPIO_Init+0x334>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a3c:	4a27      	ldr	r2, [pc, #156]	; (8001adc <HAL_GPIO_Init+0x334>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_GPIO_Init+0x334>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a66:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <HAL_GPIO_Init+0x334>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_GPIO_Init+0x334>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <HAL_GPIO_Init+0x334>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b0f      	cmp	r3, #15
 8001aa0:	f67f ae90 	bls.w	80017c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40013800 	.word	0x40013800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40021400 	.word	0x40021400
 8001ad4:	40021800 	.word	0x40021800
 8001ad8:	40021c00 	.word	0x40021c00
 8001adc:	40013c00 	.word	0x40013c00

08001ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	887b      	ldrh	r3, [r7, #2]
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	e001      	b.n	8001b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	619a      	str	r2, [r3, #24]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fa0a 	bl	8000f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40013c00 	.word	0x40013c00

08001b74 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b76:	b08f      	sub	sp, #60	; 0x3c
 8001b78:	af0a      	add	r7, sp, #40	; 0x28
 8001b7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e054      	b.n	8001c30 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d106      	bne.n	8001ba6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f006 fba3 	bl	80082ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fbd1 	bl	800536c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	687e      	ldr	r6, [r7, #4]
 8001bd2:	466d      	mov	r5, sp
 8001bd4:	f106 0410 	add.w	r4, r6, #16
 8001bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001be4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001be8:	1d33      	adds	r3, r6, #4
 8001bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bec:	6838      	ldr	r0, [r7, #0]
 8001bee:	f003 fb4b 	bl	8005288 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 fbc8 	bl	800538e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	687e      	ldr	r6, [r7, #4]
 8001c06:	466d      	mov	r5, sp
 8001c08:	f106 0410 	add.w	r4, r6, #16
 8001c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c18:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c1c:	1d33      	adds	r3, r6, #4
 8001c1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c20:	6838      	ldr	r0, [r7, #0]
 8001c22:	f003 fd51 	bl	80056c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c38 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af04      	add	r7, sp, #16
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	70fb      	strb	r3, [r7, #3]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	70bb      	strb	r3, [r7, #2]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_HCD_HC_Init+0x28>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e076      	b.n	8001d4e <HAL_HCD_HC_Init+0x116>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	333d      	adds	r3, #61	; 0x3d
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	212c      	movs	r1, #44	; 0x2c
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	3338      	adds	r3, #56	; 0x38
 8001c88:	787a      	ldrb	r2, [r7, #1]
 8001c8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3340      	adds	r3, #64	; 0x40
 8001c9a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c9c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	212c      	movs	r1, #44	; 0x2c
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	3339      	adds	r3, #57	; 0x39
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	212c      	movs	r1, #44	; 0x2c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	333f      	adds	r3, #63	; 0x3f
 8001cbe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001cc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	78ba      	ldrb	r2, [r7, #2]
 8001cc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ccc:	b2d0      	uxtb	r0, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	212c      	movs	r1, #44	; 0x2c
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	333a      	adds	r3, #58	; 0x3a
 8001cda:	4602      	mov	r2, r0
 8001cdc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001cde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da09      	bge.n	8001cfa <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	333b      	adds	r3, #59	; 0x3b
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e008      	b.n	8001d0c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	212c      	movs	r1, #44	; 0x2c
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	333b      	adds	r3, #59	; 0x3b
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	212c      	movs	r1, #44	; 0x2c
 8001d12:	fb01 f303 	mul.w	r3, r1, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	333c      	adds	r3, #60	; 0x3c
 8001d1a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d1e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	787c      	ldrb	r4, [r7, #1]
 8001d26:	78ba      	ldrb	r2, [r7, #2]
 8001d28:	78f9      	ldrb	r1, [r7, #3]
 8001d2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	f003 fe4a 	bl	80059d4 <USB_HC_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}

08001d56 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_HCD_HC_Halt+0x1e>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e00f      	b.n	8001d94 <HAL_HCD_HC_Halt+0x3e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 f89a 	bl	8005ebe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4603      	mov	r3, r0
 8001dac:	70fb      	strb	r3, [r7, #3]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70bb      	strb	r3, [r7, #2]
 8001db2:	4613      	mov	r3, r2
 8001db4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	333b      	adds	r3, #59	; 0x3b
 8001dc4:	78ba      	ldrb	r2, [r7, #2]
 8001dc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	333f      	adds	r3, #63	; 0x3f
 8001dd6:	787a      	ldrb	r2, [r7, #1]
 8001dd8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001dda:	7c3b      	ldrb	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d112      	bne.n	8001e06 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	212c      	movs	r1, #44	; 0x2c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	3342      	adds	r3, #66	; 0x42
 8001dee:	2203      	movs	r2, #3
 8001df0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	333d      	adds	r3, #61	; 0x3d
 8001e00:	7f3a      	ldrb	r2, [r7, #28]
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e008      	b.n	8001e18 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	212c      	movs	r1, #44	; 0x2c
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	3342      	adds	r3, #66	; 0x42
 8001e14:	2202      	movs	r2, #2
 8001e16:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	f200 80c6 	bhi.w	8001fac <HAL_HCD_HC_SubmitRequest+0x210>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001f99 	.word	0x08001f99
 8001e30:	08001e9d 	.word	0x08001e9d
 8001e34:	08001f1b 	.word	0x08001f1b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001e38:	7c3b      	ldrb	r3, [r7, #16]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	f040 80b8 	bne.w	8001fb0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001e40:	78bb      	ldrb	r3, [r7, #2]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 80b4 	bne.w	8001fb0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001e48:	8b3b      	ldrh	r3, [r7, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d108      	bne.n	8001e60 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	212c      	movs	r1, #44	; 0x2c
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3355      	adds	r3, #85	; 0x55
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	212c      	movs	r1, #44	; 0x2c
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3355      	adds	r3, #85	; 0x55
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	3342      	adds	r3, #66	; 0x42
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e86:	e093      	b.n	8001fb0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	212c      	movs	r1, #44	; 0x2c
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	3342      	adds	r3, #66	; 0x42
 8001e96:	2202      	movs	r2, #2
 8001e98:	701a      	strb	r2, [r3, #0]
      break;
 8001e9a:	e089      	b.n	8001fb0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e9c:	78bb      	ldrb	r3, [r7, #2]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d11d      	bne.n	8001ede <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	3355      	adds	r3, #85	; 0x55
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	212c      	movs	r1, #44	; 0x2c
 8001ebc:	fb01 f303 	mul.w	r3, r1, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3342      	adds	r3, #66	; 0x42
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ec8:	e073      	b.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3342      	adds	r3, #66	; 0x42
 8001ed8:	2202      	movs	r2, #2
 8001eda:	701a      	strb	r2, [r3, #0]
      break;
 8001edc:	e069      	b.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3354      	adds	r3, #84	; 0x54
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3342      	adds	r3, #66	; 0x42
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
      break;
 8001f04:	e055      	b.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	212c      	movs	r1, #44	; 0x2c
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	3342      	adds	r3, #66	; 0x42
 8001f14:	2202      	movs	r2, #2
 8001f16:	701a      	strb	r2, [r3, #0]
      break;
 8001f18:	e04b      	b.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f1a:	78bb      	ldrb	r3, [r7, #2]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d11d      	bne.n	8001f5c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	212c      	movs	r1, #44	; 0x2c
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3355      	adds	r3, #85	; 0x55
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	3342      	adds	r3, #66	; 0x42
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f46:	e034      	b.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	212c      	movs	r1, #44	; 0x2c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	3342      	adds	r3, #66	; 0x42
 8001f56:	2202      	movs	r2, #2
 8001f58:	701a      	strb	r2, [r3, #0]
      break;
 8001f5a:	e02a      	b.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	212c      	movs	r1, #44	; 0x2c
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	3354      	adds	r3, #84	; 0x54
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d109      	bne.n	8001f84 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	212c      	movs	r1, #44	; 0x2c
 8001f76:	fb01 f303 	mul.w	r3, r1, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3342      	adds	r3, #66	; 0x42
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
      break;
 8001f82:	e016      	b.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3342      	adds	r3, #66	; 0x42
 8001f92:	2202      	movs	r2, #2
 8001f94:	701a      	strb	r2, [r3, #0]
      break;
 8001f96:	e00c      	b.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	212c      	movs	r1, #44	; 0x2c
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3342      	adds	r3, #66	; 0x42
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001fac:	bf00      	nop
 8001fae:	e000      	b.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001fb0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3344      	adds	r3, #68	; 0x44
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	8b3a      	ldrh	r2, [r7, #24]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	202c      	movs	r0, #44	; 0x2c
 8001fcc:	fb00 f303 	mul.w	r3, r0, r3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	334c      	adds	r3, #76	; 0x4c
 8001fd4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	212c      	movs	r1, #44	; 0x2c
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3360      	adds	r3, #96	; 0x60
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3350      	adds	r3, #80	; 0x50
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	4413      	add	r3, r2
 8002006:	3339      	adds	r3, #57	; 0x39
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	3361      	adds	r3, #97	; 0x61
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	222c      	movs	r2, #44	; 0x2c
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	3338      	adds	r3, #56	; 0x38
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	18d1      	adds	r1, r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	f003 fdee 	bl	8005c18 <USB_HC_StartXfer>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop

08002048 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f003 faef 	bl	8005642 <USB_GetMode>
 8002064:	4603      	mov	r3, r0
 8002066:	2b01      	cmp	r3, #1
 8002068:	f040 80f6 	bne.w	8002258 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fad3 	bl	800561c <USB_ReadInterrupts>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80ec 	beq.w	8002256 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f003 faca 	bl	800561c <USB_ReadInterrupts>
 8002088:	4603      	mov	r3, r0
 800208a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002092:	d104      	bne.n	800209e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800209c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 faba 	bl	800561c <USB_ReadInterrupts>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020b2:	d104      	bne.n	80020be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f003 faaa 	bl	800561c <USB_ReadInterrupts>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020d2:	d104      	bne.n	80020de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 fa9a 	bl	800561c <USB_ReadInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d103      	bne.n	80020fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 fa8c 	bl	800561c <USB_ReadInterrupts>
 8002104:	4603      	mov	r3, r0
 8002106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800210a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800210e:	d11c      	bne.n	800214a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002118:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10f      	bne.n	800214a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800212a:	2110      	movs	r1, #16
 800212c:	6938      	ldr	r0, [r7, #16]
 800212e:	f003 f97b 	bl	8005428 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002132:	6938      	ldr	r0, [r7, #16]
 8002134:	f003 f9ac 	bl	8005490 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	4618      	mov	r0, r3
 8002140:	f003 fb82 	bl	8005848 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f006 f94f 	bl	80083e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fa64 	bl	800561c <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800215a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215e:	d102      	bne.n	8002166 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f001 f89e 	bl	80032a2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f003 fa56 	bl	800561c <USB_ReadInterrupts>
 8002170:	4603      	mov	r3, r0
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b08      	cmp	r3, #8
 8002178:	d106      	bne.n	8002188 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f006 f918 	bl	80083b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2208      	movs	r2, #8
 8002186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fa45 	bl	800561c <USB_ReadInterrupts>
 8002192:	4603      	mov	r3, r0
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b10      	cmp	r3, #16
 800219a:	d101      	bne.n	80021a0 <HAL_HCD_IRQHandler+0x158>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_HCD_IRQHandler+0x15a>
 80021a0:	2300      	movs	r3, #0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d012      	beq.n	80021cc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0210 	bic.w	r2, r2, #16
 80021b4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 ffa1 	bl	80030fe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0210 	orr.w	r2, r2, #16
 80021ca:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 fa23 	bl	800561c <USB_ReadInterrupts>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021e0:	d13a      	bne.n	8002258 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fe58 	bl	8005e9c <USB_HC_ReadInterrupt>
 80021ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e025      	b.n	8002240 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d018      	beq.n	800223a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800221e:	d106      	bne.n	800222e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4619      	mov	r1, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f8ab 	bl	8002382 <HCD_HC_IN_IRQHandler>
 800222c:	e005      	b.n	800223a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4619      	mov	r1, r3
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fbf9 	bl	8002a2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3301      	adds	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	429a      	cmp	r2, r3
 8002248:	d3d4      	bcc.n	80021f4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002252:	615a      	str	r2, [r3, #20]
 8002254:	e000      	b.n	8002258 <HAL_HCD_IRQHandler+0x210>
      return;
 8002256:	bf00      	nop
    }
  }
}
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_HCD_Start+0x16>
 8002270:	2302      	movs	r3, #2
 8002272:	e013      	b.n	800229c <HAL_HCD_Start+0x3e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fb44 	bl	8005910 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f003 f85c 	bl	800534a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_HCD_Stop+0x16>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e00d      	b.n	80022d6 <HAL_HCD_Stop+0x32>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 ff32 	bl	8006130 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 fae6 	bl	80058bc <USB_ResetPort>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	3360      	adds	r3, #96	; 0x60
 8002314:	781b      	ldrb	r3, [r3, #0]
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3350      	adds	r3, #80	; 0x50
 800233c:	681b      	ldr	r3, [r3, #0]
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fb2a 	bl	80059b0 <USB_GetCurrentFrame>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fb05 	bl	8005982 <USB_GetHostSpeed>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d11a      	bne.n	80023e8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	461a      	mov	r2, r3
 80023c0:	2304      	movs	r3, #4
 80023c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	3361      	adds	r3, #97	; 0x61
 80023d2:	2206      	movs	r2, #6
 80023d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f003 fd6c 	bl	8005ebe <USB_HC_Halt>
 80023e6:	e0af      	b.n	8002548 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fe:	d11b      	bne.n	8002438 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	461a      	mov	r2, r3
 800240e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002412:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	3361      	adds	r3, #97	; 0x61
 8002422:	2207      	movs	r2, #7
 8002424:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f003 fd44 	bl	8005ebe <USB_HC_Halt>
 8002436:	e087      	b.n	8002548 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b20      	cmp	r3, #32
 800244c:	d109      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	461a      	mov	r2, r3
 800245c:	2320      	movs	r3, #32
 800245e:	6093      	str	r3, [r2, #8]
 8002460:	e072      	b.n	8002548 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b08      	cmp	r3, #8
 8002476:	d11a      	bne.n	80024ae <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	2308      	movs	r3, #8
 8002488:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	3361      	adds	r3, #97	; 0x61
 8002498:	2205      	movs	r2, #5
 800249a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 fd09 	bl	8005ebe <USB_HC_Halt>
 80024ac:	e04c      	b.n	8002548 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c4:	d11b      	bne.n	80024fe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	461a      	mov	r2, r3
 80024d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3361      	adds	r3, #97	; 0x61
 80024e8:	2208      	movs	r2, #8
 80024ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fce1 	bl	8005ebe <USB_HC_Halt>
 80024fc:	e024      	b.n	8002548 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b80      	cmp	r3, #128	; 0x80
 8002512:	d119      	bne.n	8002548 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3361      	adds	r3, #97	; 0x61
 8002534:	2206      	movs	r2, #6
 8002536:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f003 fcbb 	bl	8005ebe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255e:	d112      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f003 fca7 	bl	8005ebe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	461a      	mov	r2, r3
 800257e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002582:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002584:	e24e      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	f040 80df 	bne.w	800275c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d019      	beq.n	80025da <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3348      	adds	r3, #72	; 0x48
 80025b4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	0159      	lsls	r1, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	440b      	add	r3, r1
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80025c8:	1ad2      	subs	r2, r2, r3
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	202c      	movs	r0, #44	; 0x2c
 80025d0:	fb00 f303 	mul.w	r3, r0, r3
 80025d4:	440b      	add	r3, r1
 80025d6:	3350      	adds	r3, #80	; 0x50
 80025d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3361      	adds	r3, #97	; 0x61
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	335c      	adds	r3, #92	; 0x5c
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	461a      	mov	r2, r3
 800260c:	2301      	movs	r3, #1
 800260e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	333f      	adds	r3, #63	; 0x3f
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	333f      	adds	r3, #63	; 0x3f
 8002632:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002634:	2b02      	cmp	r3, #2
 8002636:	d111      	bne.n	800265c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fc3b 	bl	8005ebe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	461a      	mov	r2, r3
 8002656:	2310      	movs	r3, #16
 8002658:	6093      	str	r3, [r2, #8]
 800265a:	e03a      	b.n	80026d2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	333f      	adds	r3, #63	; 0x3f
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d009      	beq.n	8002684 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	333f      	adds	r3, #63	; 0x3f
 800267e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002680:	2b01      	cmp	r3, #1
 8002682:	d126      	bne.n	80026d2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	0151      	lsls	r1, r2, #5
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	440a      	add	r2, r1
 800269a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800269e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	3360      	adds	r3, #96	; 0x60
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	b2d9      	uxtb	r1, r3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	202c      	movs	r0, #44	; 0x2c
 80026c0:	fb00 f303 	mul.w	r3, r0, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3360      	adds	r3, #96	; 0x60
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f005 fe99 	bl	8008404 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d12b      	bne.n	8002732 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	3348      	adds	r3, #72	; 0x48
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	202c      	movs	r0, #44	; 0x2c
 80026f0:	fb00 f202 	mul.w	r2, r0, r2
 80026f4:	440a      	add	r2, r1
 80026f6:	3240      	adds	r2, #64	; 0x40
 80026f8:	8812      	ldrh	r2, [r2, #0]
 80026fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 818e 	beq.w	8002a24 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	3354      	adds	r3, #84	; 0x54
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	f083 0301 	eor.w	r3, r3, #1
 800271c:	b2d8      	uxtb	r0, r3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3354      	adds	r3, #84	; 0x54
 800272c:	4602      	mov	r2, r0
 800272e:	701a      	strb	r2, [r3, #0]
}
 8002730:	e178      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	3354      	adds	r3, #84	; 0x54
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	f083 0301 	eor.w	r3, r3, #1
 8002746:	b2d8      	uxtb	r0, r3
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	3354      	adds	r3, #84	; 0x54
 8002756:	4602      	mov	r2, r0
 8002758:	701a      	strb	r2, [r3, #0]
}
 800275a:	e163      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b02      	cmp	r3, #2
 8002770:	f040 80f6 	bne.w	8002960 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3361      	adds	r3, #97	; 0x61
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d109      	bne.n	800279c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3360      	adds	r3, #96	; 0x60
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e0c9      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3361      	adds	r3, #97	; 0x61
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d109      	bne.n	80027c4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3360      	adds	r3, #96	; 0x60
 80027be:	2205      	movs	r2, #5
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e0b5      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3361      	adds	r3, #97	; 0x61
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b06      	cmp	r3, #6
 80027d6:	d009      	beq.n	80027ec <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	3361      	adds	r3, #97	; 0x61
 80027e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d150      	bne.n	800288e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	335c      	adds	r3, #92	; 0x5c
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	202c      	movs	r0, #44	; 0x2c
 8002804:	fb00 f303 	mul.w	r3, r0, r3
 8002808:	440b      	add	r3, r1
 800280a:	335c      	adds	r3, #92	; 0x5c
 800280c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	335c      	adds	r3, #92	; 0x5c
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d912      	bls.n	8002848 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	335c      	adds	r3, #92	; 0x5c
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3360      	adds	r3, #96	; 0x60
 8002842:	2204      	movs	r2, #4
 8002844:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002846:	e073      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	3360      	adds	r3, #96	; 0x60
 8002856:	2202      	movs	r2, #2
 8002858:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002870:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002878:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800288c:	e050      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	3361      	adds	r3, #97	; 0x61
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d122      	bne.n	80028e8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3360      	adds	r3, #96	; 0x60
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028ca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028d2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	461a      	mov	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e023      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3361      	adds	r3, #97	; 0x61
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b07      	cmp	r3, #7
 80028fa:	d119      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	335c      	adds	r3, #92	; 0x5c
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	202c      	movs	r0, #44	; 0x2c
 8002914:	fb00 f303 	mul.w	r3, r0, r3
 8002918:	440b      	add	r3, r1
 800291a:	335c      	adds	r3, #92	; 0x5c
 800291c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	212c      	movs	r1, #44	; 0x2c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	3360      	adds	r3, #96	; 0x60
 800292c:	2204      	movs	r2, #4
 800292e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	461a      	mov	r2, r3
 800293e:	2302      	movs	r3, #2
 8002940:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	b2d9      	uxtb	r1, r3
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	202c      	movs	r0, #44	; 0x2c
 800294c:	fb00 f303 	mul.w	r3, r0, r3
 8002950:	4413      	add	r3, r2
 8002952:	3360      	adds	r3, #96	; 0x60
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f005 fd53 	bl	8008404 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800295e:	e061      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b10      	cmp	r3, #16
 8002974:	d156      	bne.n	8002a24 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	333f      	adds	r3, #63	; 0x3f
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d111      	bne.n	80029ae <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	335c      	adds	r3, #92	; 0x5c
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 fa89 	bl	8005ebe <USB_HC_Halt>
 80029ac:	e031      	b.n	8002a12 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	333f      	adds	r3, #63	; 0x3f
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	333f      	adds	r3, #63	; 0x3f
 80029d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d11d      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	335c      	adds	r3, #92	; 0x5c
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d110      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3361      	adds	r3, #97	; 0x61
 80029fe:	2203      	movs	r2, #3
 8002a00:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 fa56 	bl	8005ebe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2310      	movs	r3, #16
 8002a22:	6093      	str	r3, [r2, #8]
}
 8002a24:	bf00      	nop
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d11a      	bne.n	8002a92 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2304      	movs	r3, #4
 8002a6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3361      	adds	r3, #97	; 0x61
 8002a7c:	2206      	movs	r2, #6
 8002a7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 fa17 	bl	8005ebe <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002a90:	e331      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d12e      	bne.n	8002b06 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	333d      	adds	r3, #61	; 0x3d
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	f040 8313 	bne.w	80030f6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	333d      	adds	r3, #61	; 0x3d
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3360      	adds	r3, #96	; 0x60
 8002af0:	2202      	movs	r2, #2
 8002af2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 f9dd 	bl	8005ebe <USB_HC_Halt>
}
 8002b04:	e2f7      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b1c:	d112      	bne.n	8002b44 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b30:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 f9be 	bl	8005ebe <USB_HC_Halt>
}
 8002b42:	e2d8      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d140      	bne.n	8002bdc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	335c      	adds	r3, #92	; 0x5c
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d111      	bne.n	8002ba6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	333d      	adds	r3, #61	; 0x3d
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2340      	movs	r3, #64	; 0x40
 8002ba4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3361      	adds	r3, #97	; 0x61
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 f972 	bl	8005ebe <USB_HC_Halt>
}
 8002bda:	e28c      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d12c      	bne.n	8002c4c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3361      	adds	r3, #97	; 0x61
 8002c00:	2204      	movs	r2, #4
 8002c02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	333d      	adds	r3, #61	; 0x3d
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	335c      	adds	r3, #92	; 0x5c
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 f943 	bl	8005ebe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	2340      	movs	r3, #64	; 0x40
 8002c48:	6093      	str	r3, [r2, #8]
}
 8002c4a:	e254      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d11a      	bne.n	8002c98 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2308      	movs	r3, #8
 8002c72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3361      	adds	r3, #97	; 0x61
 8002c82:	2205      	movs	r2, #5
 8002c84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 f914 	bl	8005ebe <USB_HC_Halt>
}
 8002c96:	e22e      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d140      	bne.n	8002d30 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	335c      	adds	r3, #92	; 0x5c
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3361      	adds	r3, #97	; 0x61
 8002cce:	2203      	movs	r2, #3
 8002cd0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	333d      	adds	r3, #61	; 0x3d
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d112      	bne.n	8002d0c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	333c      	adds	r3, #60	; 0x3c
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	333d      	adds	r3, #61	; 0x3d
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 f8d1 	bl	8005ebe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2310      	movs	r3, #16
 8002d2c:	6093      	str	r3, [r2, #8]
}
 8002d2e:	e1e2      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d42:	2b80      	cmp	r3, #128	; 0x80
 8002d44:	d164      	bne.n	8002e10 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d111      	bne.n	8002d72 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3361      	adds	r3, #97	; 0x61
 8002d5c:	2206      	movs	r2, #6
 8002d5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 f8a7 	bl	8005ebe <USB_HC_Halt>
 8002d70:	e044      	b.n	8002dfc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	335c      	adds	r3, #92	; 0x5c
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	202c      	movs	r0, #44	; 0x2c
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	440b      	add	r3, r1
 8002d90:	335c      	adds	r3, #92	; 0x5c
 8002d92:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	335c      	adds	r3, #92	; 0x5c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d920      	bls.n	8002dea <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	335c      	adds	r3, #92	; 0x5c
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3360      	adds	r3, #96	; 0x60
 8002dc8:	2204      	movs	r2, #4
 8002dca:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	b2d9      	uxtb	r1, r3
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	202c      	movs	r0, #44	; 0x2c
 8002dd6:	fb00 f303 	mul.w	r3, r0, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3360      	adds	r3, #96	; 0x60
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f005 fb0e 	bl	8008404 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002de8:	e008      	b.n	8002dfc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3360      	adds	r3, #96	; 0x60
 8002df8:	2202      	movs	r2, #2
 8002dfa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	6093      	str	r3, [r2, #8]
}
 8002e0e:	e172      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e26:	d11b      	bne.n	8002e60 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3361      	adds	r3, #97	; 0x61
 8002e36:	2208      	movs	r2, #8
 8002e38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 f83a 	bl	8005ebe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	461a      	mov	r2, r3
 8002e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e5c:	6093      	str	r3, [r2, #8]
}
 8002e5e:	e14a      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	f040 813f 	bne.w	80030f6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3361      	adds	r3, #97	; 0x61
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d17d      	bne.n	8002f88 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	212c      	movs	r1, #44	; 0x2c
 8002e92:	fb01 f303 	mul.w	r3, r1, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	3360      	adds	r3, #96	; 0x60
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	333f      	adds	r3, #63	; 0x3f
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d00a      	beq.n	8002ec8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	333f      	adds	r3, #63	; 0x3f
 8002ec0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	f040 8100 	bne.w	80030c8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d113      	bne.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3355      	adds	r3, #85	; 0x55
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	f083 0301 	eor.w	r3, r3, #1
 8002ee4:	b2d8      	uxtb	r0, r3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3355      	adds	r3, #85	; 0x55
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	f040 80e3 	bne.w	80030c8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	334c      	adds	r3, #76	; 0x4c
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80d8 	beq.w	80030c8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	334c      	adds	r3, #76	; 0x4c
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	202c      	movs	r0, #44	; 0x2c
 8002f2e:	fb00 f202 	mul.w	r2, r0, r2
 8002f32:	440a      	add	r2, r1
 8002f34:	3240      	adds	r2, #64	; 0x40
 8002f36:	8812      	ldrh	r2, [r2, #0]
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	202c      	movs	r0, #44	; 0x2c
 8002f42:	fb00 f202 	mul.w	r2, r0, r2
 8002f46:	440a      	add	r2, r1
 8002f48:	3240      	adds	r2, #64	; 0x40
 8002f4a:	8812      	ldrh	r2, [r2, #0]
 8002f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80b5 	beq.w	80030c8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	212c      	movs	r1, #44	; 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3355      	adds	r3, #85	; 0x55
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	f083 0301 	eor.w	r3, r3, #1
 8002f72:	b2d8      	uxtb	r0, r3
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3355      	adds	r3, #85	; 0x55
 8002f82:	4602      	mov	r2, r0
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e09f      	b.n	80030c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3361      	adds	r3, #97	; 0x61
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d109      	bne.n	8002fb0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3360      	adds	r3, #96	; 0x60
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	e08b      	b.n	80030c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3361      	adds	r3, #97	; 0x61
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d109      	bne.n	8002fd8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3360      	adds	r3, #96	; 0x60
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e077      	b.n	80030c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3361      	adds	r3, #97	; 0x61
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d109      	bne.n	8003000 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3360      	adds	r3, #96	; 0x60
 8002ffa:	2205      	movs	r2, #5
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e063      	b.n	80030c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3361      	adds	r3, #97	; 0x61
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b06      	cmp	r3, #6
 8003012:	d009      	beq.n	8003028 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3361      	adds	r3, #97	; 0x61
 8003022:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003024:	2b08      	cmp	r3, #8
 8003026:	d14f      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	335c      	adds	r3, #92	; 0x5c
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	202c      	movs	r0, #44	; 0x2c
 8003040:	fb00 f303 	mul.w	r3, r0, r3
 8003044:	440b      	add	r3, r1
 8003046:	335c      	adds	r3, #92	; 0x5c
 8003048:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	212c      	movs	r1, #44	; 0x2c
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	335c      	adds	r3, #92	; 0x5c
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d912      	bls.n	8003084 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	335c      	adds	r3, #92	; 0x5c
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	4413      	add	r3, r2
 800307c:	3360      	adds	r3, #96	; 0x60
 800307e:	2204      	movs	r2, #4
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	e021      	b.n	80030c8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	3360      	adds	r3, #96	; 0x60
 8003092:	2202      	movs	r2, #2
 8003094:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4413      	add	r3, r2
 800309e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030ac:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030b4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	461a      	mov	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	461a      	mov	r2, r3
 80030d6:	2302      	movs	r3, #2
 80030d8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	b2d9      	uxtb	r1, r3
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	202c      	movs	r0, #44	; 0x2c
 80030e4:	fb00 f303 	mul.w	r3, r0, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	3360      	adds	r3, #96	; 0x60
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f005 f987 	bl	8008404 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030f6:	bf00      	nop
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b08a      	sub	sp, #40	; 0x28
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	0c5b      	lsrs	r3, r3, #17
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003132:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d004      	beq.n	8003144 <HCD_RXQLVL_IRQHandler+0x46>
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b05      	cmp	r3, #5
 800313e:	f000 80a9 	beq.w	8003294 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003142:	e0aa      	b.n	800329a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80a6 	beq.w	8003298 <HCD_RXQLVL_IRQHandler+0x19a>
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3344      	adds	r3, #68	; 0x44
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 809b 	beq.w	8003298 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3350      	adds	r3, #80	; 0x50
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	441a      	add	r2, r3
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	202c      	movs	r0, #44	; 0x2c
 800317c:	fb00 f303 	mul.w	r3, r0, r3
 8003180:	440b      	add	r3, r1
 8003182:	334c      	adds	r3, #76	; 0x4c
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d87a      	bhi.n	8003280 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	212c      	movs	r1, #44	; 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	3344      	adds	r3, #68	; 0x44
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	b292      	uxth	r2, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	f002 f9e2 	bl	800556c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3344      	adds	r3, #68	; 0x44
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	441a      	add	r2, r3
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	202c      	movs	r0, #44	; 0x2c
 80031c2:	fb00 f303 	mul.w	r3, r0, r3
 80031c6:	440b      	add	r3, r1
 80031c8:	3344      	adds	r3, #68	; 0x44
 80031ca:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3350      	adds	r3, #80	; 0x50
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	441a      	add	r2, r3
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	202c      	movs	r0, #44	; 0x2c
 80031e6:	fb00 f303 	mul.w	r3, r0, r3
 80031ea:	440b      	add	r3, r1
 80031ec:	3350      	adds	r3, #80	; 0x50
 80031ee:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	0cdb      	lsrs	r3, r3, #19
 8003200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003204:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3340      	adds	r3, #64	; 0x40
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4293      	cmp	r3, r2
 800321c:	d13c      	bne.n	8003298 <HCD_RXQLVL_IRQHandler+0x19a>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d039      	beq.n	8003298 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800323a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003242:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	4413      	add	r3, r2
 800324c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003250:	461a      	mov	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3354      	adds	r3, #84	; 0x54
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	f083 0301 	eor.w	r3, r3, #1
 800326a:	b2d8      	uxtb	r0, r3
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	3354      	adds	r3, #84	; 0x54
 800327a:	4602      	mov	r2, r0
 800327c:	701a      	strb	r2, [r3, #0]
      break;
 800327e:	e00b      	b.n	8003298 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3360      	adds	r3, #96	; 0x60
 800328e:	2204      	movs	r2, #4
 8003290:	701a      	strb	r2, [r3, #0]
      break;
 8003292:	e001      	b.n	8003298 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003294:	bf00      	nop
 8003296:	e000      	b.n	800329a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003298:	bf00      	nop
  }
}
 800329a:	bf00      	nop
 800329c:	3728      	adds	r7, #40	; 0x28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032ce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d10b      	bne.n	80032f2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d102      	bne.n	80032ea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f005 f871 	bl	80083cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d132      	bne.n	8003362 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f043 0308 	orr.w	r3, r3, #8
 8003302:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d126      	bne.n	800335c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d113      	bne.n	800333e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800331c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003320:	d106      	bne.n	8003330 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2102      	movs	r1, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f002 fa8d 	bl	8005848 <USB_InitFSLSPClkSel>
 800332e:	e011      	b.n	8003354 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f002 fa86 	bl	8005848 <USB_InitFSLSPClkSel>
 800333c:	e00a      	b.n	8003354 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d106      	bne.n	8003354 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800334c:	461a      	mov	r2, r3
 800334e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003352:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f005 f863 	bl	8008420 <HAL_HCD_PortEnabled_Callback>
 800335a:	e002      	b.n	8003362 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f005 f86d 	bl	800843c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b20      	cmp	r3, #32
 800336a:	d103      	bne.n	8003374 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f043 0320 	orr.w	r3, r3, #32
 8003372:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800337a:	461a      	mov	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	6013      	str	r3, [r2, #0]
}
 8003380:	bf00      	nop
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e12b      	b.n	80035f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd fa1e 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	; 0x24
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033ec:	f001 fa20 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 80033f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4a81      	ldr	r2, [pc, #516]	; (80035fc <HAL_I2C_Init+0x274>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d807      	bhi.n	800340c <HAL_I2C_Init+0x84>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a80      	ldr	r2, [pc, #512]	; (8003600 <HAL_I2C_Init+0x278>)
 8003400:	4293      	cmp	r3, r2
 8003402:	bf94      	ite	ls
 8003404:	2301      	movls	r3, #1
 8003406:	2300      	movhi	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e006      	b.n	800341a <HAL_I2C_Init+0x92>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a7d      	ldr	r2, [pc, #500]	; (8003604 <HAL_I2C_Init+0x27c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	bf94      	ite	ls
 8003414:	2301      	movls	r3, #1
 8003416:	2300      	movhi	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0e7      	b.n	80035f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a78      	ldr	r2, [pc, #480]	; (8003608 <HAL_I2C_Init+0x280>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	0c9b      	lsrs	r3, r3, #18
 800342c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a6a      	ldr	r2, [pc, #424]	; (80035fc <HAL_I2C_Init+0x274>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d802      	bhi.n	800345c <HAL_I2C_Init+0xd4>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3301      	adds	r3, #1
 800345a:	e009      	b.n	8003470 <HAL_I2C_Init+0xe8>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	4a69      	ldr	r2, [pc, #420]	; (800360c <HAL_I2C_Init+0x284>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	3301      	adds	r3, #1
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	430b      	orrs	r3, r1
 8003476:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003482:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	495c      	ldr	r1, [pc, #368]	; (80035fc <HAL_I2C_Init+0x274>)
 800348c:	428b      	cmp	r3, r1
 800348e:	d819      	bhi.n	80034c4 <HAL_I2C_Init+0x13c>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e59      	subs	r1, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fbb1 f3f3 	udiv	r3, r1, r3
 800349e:	1c59      	adds	r1, r3, #1
 80034a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034a4:	400b      	ands	r3, r1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_I2C_Init+0x138>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1e59      	subs	r1, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034be:	e051      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 80034c0:	2304      	movs	r3, #4
 80034c2:	e04f      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d111      	bne.n	80034f0 <HAL_I2C_Init+0x168>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	440b      	add	r3, r1
 80034da:	fbb0 f3f3 	udiv	r3, r0, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e012      	b.n	8003516 <HAL_I2C_Init+0x18e>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e58      	subs	r0, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	0099      	lsls	r1, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	fbb0 f3f3 	udiv	r3, r0, r3
 8003506:	3301      	adds	r3, #1
 8003508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_Init+0x196>
 800351a:	2301      	movs	r3, #1
 800351c:	e022      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10e      	bne.n	8003544 <HAL_I2C_Init+0x1bc>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1e58      	subs	r0, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6859      	ldr	r1, [r3, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	440b      	add	r3, r1
 8003534:	fbb0 f3f3 	udiv	r3, r0, r3
 8003538:	3301      	adds	r3, #1
 800353a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003542:	e00f      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1e58      	subs	r0, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	0099      	lsls	r1, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	fbb0 f3f3 	udiv	r3, r0, r3
 800355a:	3301      	adds	r3, #1
 800355c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003560:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	6809      	ldr	r1, [r1, #0]
 8003568:	4313      	orrs	r3, r2
 800356a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003592:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6911      	ldr	r1, [r2, #16]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68d2      	ldr	r2, [r2, #12]
 800359e:	4311      	orrs	r1, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	000186a0 	.word	0x000186a0
 8003600:	001e847f 	.word	0x001e847f
 8003604:	003d08ff 	.word	0x003d08ff
 8003608:	431bde83 	.word	0x431bde83
 800360c:	10624dd3 	.word	0x10624dd3

08003610 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e128      	b.n	8003874 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a90      	ldr	r2, [pc, #576]	; (800387c <HAL_I2S_Init+0x26c>)
 800363a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fd f94f 	bl	80008e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003658:	f023 030f 	bic.w	r3, r3, #15
 800365c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2202      	movs	r2, #2
 8003664:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d060      	beq.n	8003730 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003676:	2310      	movs	r3, #16
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	e001      	b.n	8003680 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800367c:	2320      	movs	r3, #32
 800367e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b20      	cmp	r3, #32
 8003686:	d802      	bhi.n	800368e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800368e:	2001      	movs	r0, #1
 8003690:	f001 f9c4 	bl	8004a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8003694:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369e:	d125      	bne.n	80036ec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d010      	beq.n	80036ca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	461a      	mov	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	3305      	adds	r3, #5
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	e01f      	b.n	800370a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	461a      	mov	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	3305      	adds	r3, #5
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	e00e      	b.n	800370a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	461a      	mov	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	fbb2 f3f3 	udiv	r3, r2, r3
 8003706:	3305      	adds	r3, #5
 8003708:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4a5c      	ldr	r2, [pc, #368]	; (8003880 <HAL_I2S_Init+0x270>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	08db      	lsrs	r3, r3, #3
 8003714:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	e003      	b.n	8003738 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003730:	2302      	movs	r3, #2
 8003732:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d902      	bls.n	8003744 <HAL_I2S_Init+0x134>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	2bff      	cmp	r3, #255	; 0xff
 8003742:	d907      	bls.n	8003754 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	f043 0210 	orr.w	r2, r3, #16
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e08f      	b.n	8003874 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	ea42 0103 	orr.w	r1, r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	430a      	orrs	r2, r1
 8003766:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003772:	f023 030f 	bic.w	r3, r3, #15
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6851      	ldr	r1, [r2, #4]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6892      	ldr	r2, [r2, #8]
 800377e:	4311      	orrs	r1, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	68d2      	ldr	r2, [r2, #12]
 8003784:	4311      	orrs	r1, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6992      	ldr	r2, [r2, #24]
 800378a:	430a      	orrs	r2, r1
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003796:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d161      	bne.n	8003864 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a38      	ldr	r2, [pc, #224]	; (8003884 <HAL_I2S_Init+0x274>)
 80037a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a37      	ldr	r2, [pc, #220]	; (8003888 <HAL_I2S_Init+0x278>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <HAL_I2S_Init+0x1a4>
 80037b0:	4b36      	ldr	r3, [pc, #216]	; (800388c <HAL_I2S_Init+0x27c>)
 80037b2:	e001      	b.n	80037b8 <HAL_I2S_Init+0x1a8>
 80037b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	4932      	ldr	r1, [pc, #200]	; (8003888 <HAL_I2S_Init+0x278>)
 80037c0:	428a      	cmp	r2, r1
 80037c2:	d101      	bne.n	80037c8 <HAL_I2S_Init+0x1b8>
 80037c4:	4a31      	ldr	r2, [pc, #196]	; (800388c <HAL_I2S_Init+0x27c>)
 80037c6:	e001      	b.n	80037cc <HAL_I2S_Init+0x1bc>
 80037c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80037cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037d0:	f023 030f 	bic.w	r3, r3, #15
 80037d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2b      	ldr	r2, [pc, #172]	; (8003888 <HAL_I2S_Init+0x278>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_I2S_Init+0x1d4>
 80037e0:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_I2S_Init+0x27c>)
 80037e2:	e001      	b.n	80037e8 <HAL_I2S_Init+0x1d8>
 80037e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e8:	2202      	movs	r2, #2
 80037ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a25      	ldr	r2, [pc, #148]	; (8003888 <HAL_I2S_Init+0x278>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d101      	bne.n	80037fa <HAL_I2S_Init+0x1ea>
 80037f6:	4b25      	ldr	r3, [pc, #148]	; (800388c <HAL_I2S_Init+0x27c>)
 80037f8:	e001      	b.n	80037fe <HAL_I2S_Init+0x1ee>
 80037fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380a:	d003      	beq.n	8003814 <HAL_I2S_Init+0x204>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d103      	bne.n	800381c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	e001      	b.n	8003820 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800382a:	4313      	orrs	r3, r2
 800382c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003834:	4313      	orrs	r3, r2
 8003836:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800383e:	4313      	orrs	r3, r2
 8003840:	b29a      	uxth	r2, r3
 8003842:	897b      	ldrh	r3, [r7, #10]
 8003844:	4313      	orrs	r3, r2
 8003846:	b29b      	uxth	r3, r3
 8003848:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800384c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a0d      	ldr	r2, [pc, #52]	; (8003888 <HAL_I2S_Init+0x278>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <HAL_I2S_Init+0x24c>
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_I2S_Init+0x27c>)
 800385a:	e001      	b.n	8003860 <HAL_I2S_Init+0x250>
 800385c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003860:	897a      	ldrh	r2, [r7, #10]
 8003862:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	08003987 	.word	0x08003987
 8003880:	cccccccd 	.word	0xcccccccd
 8003884:	08003a9d 	.word	0x08003a9d
 8003888:	40003800 	.word	0x40003800
 800388c:	40003400 	.word	0x40003400

08003890 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	881a      	ldrh	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	1c9a      	adds	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10e      	bne.n	8003920 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003910:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ffb8 	bl	8003890 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	b292      	uxth	r2, r2
 800393c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	1c9a      	adds	r2, r3, #2
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10e      	bne.n	800397e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800396e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff93 	bl	80038a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d13a      	bne.n	8003a18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d109      	bne.n	80039c0 <I2S_IRQHandler+0x3a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d102      	bne.n	80039c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffb4 	bl	8003928 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d126      	bne.n	8003a18 <I2S_IRQHandler+0x92>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d11f      	bne.n	8003a18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f043 0202 	orr.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ff50 	bl	80038b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d136      	bne.n	8003a92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d109      	bne.n	8003a42 <I2S_IRQHandler+0xbc>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	2b80      	cmp	r3, #128	; 0x80
 8003a3a:	d102      	bne.n	8003a42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ff45 	bl	80038cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d122      	bne.n	8003a92 <I2S_IRQHandler+0x10c>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d11b      	bne.n	8003a92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	f043 0204 	orr.w	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff13 	bl	80038b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a92      	ldr	r2, [pc, #584]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ab6:	4b92      	ldr	r3, [pc, #584]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ab8:	e001      	b.n	8003abe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003aba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a8b      	ldr	r2, [pc, #556]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d101      	bne.n	8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ad4:	4b8a      	ldr	r3, [pc, #552]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ad6:	e001      	b.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ad8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae8:	d004      	beq.n	8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 8099 	bne.w	8003c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d107      	bne.n	8003b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f925 	bl	8003d58 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d107      	bne.n	8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f9c8 	bl	8003eb8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d13a      	bne.n	8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d035      	beq.n	8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6e      	ldr	r2, [pc, #440]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003b46:	4b6e      	ldr	r3, [pc, #440]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b48:	e001      	b.n	8003b4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4969      	ldr	r1, [pc, #420]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b56:	428b      	cmp	r3, r1
 8003b58:	d101      	bne.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003b5a:	4b69      	ldr	r3, [pc, #420]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b5c:	e001      	b.n	8003b62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f043 0202 	orr.w	r2, r3, #2
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fe88 	bl	80038b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	f040 80c3 	bne.w	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 80bd 	beq.w	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a49      	ldr	r2, [pc, #292]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d101      	bne.n	8003bde <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003bda:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bdc:	e001      	b.n	8003be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003bde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4944      	ldr	r1, [pc, #272]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bea:	428b      	cmp	r3, r1
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003bee:	4b44      	ldr	r3, [pc, #272]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bf0:	e001      	b.n	8003bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003bf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bfa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	f043 0204 	orr.w	r2, r3, #4
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fe4a 	bl	80038b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c24:	e089      	b.n	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d107      	bne.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8be 	bl	8003dbc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d107      	bne.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f8fd 	bl	8003e54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d12f      	bne.n	8003cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d02a      	beq.n	8003cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c7c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d101      	bne.n	8003c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c88:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c8a:	e001      	b.n	8003c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4919      	ldr	r1, [pc, #100]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c9c:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c9e:	e001      	b.n	8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ca8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f043 0202 	orr.w	r2, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fdfa 	bl	80038b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d136      	bne.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d031      	beq.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ce4:	e001      	b.n	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ce6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4902      	ldr	r1, [pc, #8]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cf2:	428b      	cmp	r3, r1
 8003cf4:	d106      	bne.n	8003d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003cf6:	4b02      	ldr	r3, [pc, #8]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cf8:	e006      	b.n	8003d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003cfa:	bf00      	nop
 8003cfc:	40003800 	.word	0x40003800
 8003d00:	40003400 	.word	0x40003400
 8003d04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d0c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f043 0204 	orr.w	r2, r3, #4
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fdc0 	bl	80038b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d38:	e000      	b.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d3a:	bf00      	nop
}
 8003d3c:	bf00      	nop
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	1c99      	adds	r1, r3, #2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6251      	str	r1, [r2, #36]	; 0x24
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d113      	bne.n	8003db2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ffc9 	bl	8003d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	1c99      	adds	r1, r3, #2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6251      	str	r1, [r2, #36]	; 0x24
 8003dce:	8819      	ldrh	r1, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1d      	ldr	r2, [pc, #116]	; (8003e4c <I2SEx_TxISR_I2SExt+0x90>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <I2SEx_TxISR_I2SExt+0x22>
 8003dda:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <I2SEx_TxISR_I2SExt+0x94>)
 8003ddc:	e001      	b.n	8003de2 <I2SEx_TxISR_I2SExt+0x26>
 8003dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de2:	460a      	mov	r2, r1
 8003de4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d121      	bne.n	8003e42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <I2SEx_TxISR_I2SExt+0x90>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d101      	bne.n	8003e0c <I2SEx_TxISR_I2SExt+0x50>
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <I2SEx_TxISR_I2SExt+0x94>)
 8003e0a:	e001      	b.n	8003e10 <I2SEx_TxISR_I2SExt+0x54>
 8003e0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	490d      	ldr	r1, [pc, #52]	; (8003e4c <I2SEx_TxISR_I2SExt+0x90>)
 8003e18:	428b      	cmp	r3, r1
 8003e1a:	d101      	bne.n	8003e20 <I2SEx_TxISR_I2SExt+0x64>
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <I2SEx_TxISR_I2SExt+0x94>)
 8003e1e:	e001      	b.n	8003e24 <I2SEx_TxISR_I2SExt+0x68>
 8003e20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d106      	bne.n	8003e42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff81 	bl	8003d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40003800 	.word	0x40003800
 8003e50:	40003400 	.word	0x40003400

08003e54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68d8      	ldr	r0, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	1c99      	adds	r1, r3, #2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e6c:	b282      	uxth	r2, r0
 8003e6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d113      	bne.n	8003eb0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff ff4a 	bl	8003d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <I2SEx_RxISR_I2SExt+0x90>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d101      	bne.n	8003ece <I2SEx_RxISR_I2SExt+0x16>
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <I2SEx_RxISR_I2SExt+0x94>)
 8003ecc:	e001      	b.n	8003ed2 <I2SEx_RxISR_I2SExt+0x1a>
 8003ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed2:	68d8      	ldr	r0, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	1c99      	adds	r1, r3, #2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ede:	b282      	uxth	r2, r0
 8003ee0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d121      	bne.n	8003f3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <I2SEx_RxISR_I2SExt+0x90>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <I2SEx_RxISR_I2SExt+0x50>
 8003f04:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <I2SEx_RxISR_I2SExt+0x94>)
 8003f06:	e001      	b.n	8003f0c <I2SEx_RxISR_I2SExt+0x54>
 8003f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	490d      	ldr	r1, [pc, #52]	; (8003f48 <I2SEx_RxISR_I2SExt+0x90>)
 8003f14:	428b      	cmp	r3, r1
 8003f16:	d101      	bne.n	8003f1c <I2SEx_RxISR_I2SExt+0x64>
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <I2SEx_RxISR_I2SExt+0x94>)
 8003f1a:	e001      	b.n	8003f20 <I2SEx_RxISR_I2SExt+0x68>
 8003f1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff03 	bl	8003d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40003800 	.word	0x40003800
 8003f4c:	40003400 	.word	0x40003400

08003f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e267      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d075      	beq.n	800405a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f6e:	4b88      	ldr	r3, [pc, #544]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d00c      	beq.n	8003f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7a:	4b85      	ldr	r3, [pc, #532]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d112      	bne.n	8003fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f86:	4b82      	ldr	r3, [pc, #520]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f92:	d10b      	bne.n	8003fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f94:	4b7e      	ldr	r3, [pc, #504]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d05b      	beq.n	8004058 <HAL_RCC_OscConfig+0x108>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d157      	bne.n	8004058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e242      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb4:	d106      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x74>
 8003fb6:	4b76      	ldr	r3, [pc, #472]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a75      	ldr	r2, [pc, #468]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e01d      	b.n	8004000 <HAL_RCC_OscConfig+0xb0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x98>
 8003fce:	4b70      	ldr	r3, [pc, #448]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6f      	ldr	r2, [pc, #444]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b6d      	ldr	r3, [pc, #436]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6c      	ldr	r2, [pc, #432]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0xb0>
 8003fe8:	4b69      	ldr	r3, [pc, #420]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a68      	ldr	r2, [pc, #416]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b66      	ldr	r3, [pc, #408]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a65      	ldr	r2, [pc, #404]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fd fa8c 	bl	8001524 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004010:	f7fd fa88 	bl	8001524 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e207      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b5b      	ldr	r3, [pc, #364]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0xc0>
 800402e:	e014      	b.n	800405a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fd fa78 	bl	8001524 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004038:	f7fd fa74 	bl	8001524 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e1f3      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	4b51      	ldr	r3, [pc, #324]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0xe8>
 8004056:	e000      	b.n	800405a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d063      	beq.n	800412e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004066:	4b4a      	ldr	r3, [pc, #296]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004072:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407a:	2b08      	cmp	r3, #8
 800407c:	d11c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407e:	4b44      	ldr	r3, [pc, #272]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d116      	bne.n	80040b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408a:	4b41      	ldr	r3, [pc, #260]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_RCC_OscConfig+0x152>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e1c7      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a2:	4b3b      	ldr	r3, [pc, #236]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4937      	ldr	r1, [pc, #220]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	e03a      	b.n	800412e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c0:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_RCC_OscConfig+0x244>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fd fa2d 	bl	8001524 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ce:	f7fd fa29 	bl	8001524 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e1a8      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	4b28      	ldr	r3, [pc, #160]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4925      	ldr	r1, [pc, #148]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]
 8004100:	e015      	b.n	800412e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <HAL_RCC_OscConfig+0x244>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fd fa0c 	bl	8001524 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004110:	f7fd fa08 	bl	8001524 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e187      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d036      	beq.n	80041a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <HAL_RCC_OscConfig+0x248>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fd f9ec 	bl	8001524 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004150:	f7fd f9e8 	bl	8001524 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e167      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x200>
 800416e:	e01b      	b.n	80041a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_OscConfig+0x248>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004176:	f7fd f9d5 	bl	8001524 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417c:	e00e      	b.n	800419c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417e:	f7fd f9d1 	bl	8001524 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d907      	bls.n	800419c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e150      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
 8004190:	40023800 	.word	0x40023800
 8004194:	42470000 	.word	0x42470000
 8004198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800419c:	4b88      	ldr	r3, [pc, #544]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800419e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ea      	bne.n	800417e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8097 	beq.w	80042e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ba:	4b81      	ldr	r3, [pc, #516]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10f      	bne.n	80041e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	4b7d      	ldr	r3, [pc, #500]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4a7c      	ldr	r2, [pc, #496]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6413      	str	r3, [r2, #64]	; 0x40
 80041d6:	4b7a      	ldr	r3, [pc, #488]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	4b77      	ldr	r3, [pc, #476]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d118      	bne.n	8004224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f2:	4b74      	ldr	r3, [pc, #464]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a73      	ldr	r2, [pc, #460]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fe:	f7fd f991 	bl	8001524 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004206:	f7fd f98d 	bl	8001524 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e10c      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	4b6a      	ldr	r3, [pc, #424]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d106      	bne.n	800423a <HAL_RCC_OscConfig+0x2ea>
 800422c:	4b64      	ldr	r3, [pc, #400]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a63      	ldr	r2, [pc, #396]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	e01c      	b.n	8004274 <HAL_RCC_OscConfig+0x324>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b05      	cmp	r3, #5
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x30c>
 8004242:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a5e      	ldr	r2, [pc, #376]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	4b5c      	ldr	r3, [pc, #368]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a5b      	ldr	r2, [pc, #364]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0x324>
 800425c:	4b58      	ldr	r3, [pc, #352]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a57      	ldr	r2, [pc, #348]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	4b55      	ldr	r3, [pc, #340]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a54      	ldr	r2, [pc, #336]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800426e:	f023 0304 	bic.w	r3, r3, #4
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d015      	beq.n	80042a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fd f952 	bl	8001524 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004282:	e00a      	b.n	800429a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fd f94e 	bl	8001524 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0cb      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429a:	4b49      	ldr	r3, [pc, #292]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ee      	beq.n	8004284 <HAL_RCC_OscConfig+0x334>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a8:	f7fd f93c 	bl	8001524 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fd f938 	bl	8001524 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0b5      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c6:	4b3e      	ldr	r3, [pc, #248]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ee      	bne.n	80042b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d8:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	4a38      	ldr	r2, [pc, #224]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80a1 	beq.w	8004430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ee:	4b34      	ldr	r3, [pc, #208]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d05c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d141      	bne.n	8004386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <HAL_RCC_OscConfig+0x478>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fd f90c 	bl	8001524 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004310:	f7fd f908 	bl	8001524 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e087      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	019b      	lsls	r3, r3, #6
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	3b01      	subs	r3, #1
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	061b      	lsls	r3, r3, #24
 8004352:	491b      	ldr	r1, [pc, #108]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004358:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <HAL_RCC_OscConfig+0x478>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fd f8e1 	bl	8001524 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004366:	f7fd f8dd 	bl	8001524 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e05c      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x416>
 8004384:	e054      	b.n	8004430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <HAL_RCC_OscConfig+0x478>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438c:	f7fd f8ca 	bl	8001524 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004394:	f7fd f8c6 	bl	8001524 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e045      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x444>
 80043b2:	e03d      	b.n	8004430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e038      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000
 80043c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <HAL_RCC_OscConfig+0x4ec>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d028      	beq.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d121      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d11a      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043fc:	4013      	ands	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004404:	4293      	cmp	r3, r2
 8004406:	d111      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	3b01      	subs	r3, #1
 8004416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d107      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800

08004440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0cc      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004454:	4b68      	ldr	r3, [pc, #416]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d90c      	bls.n	800447c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b65      	ldr	r3, [pc, #404]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800446a:	4b63      	ldr	r3, [pc, #396]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0b8      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d020      	beq.n	80044ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004494:	4b59      	ldr	r3, [pc, #356]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4a58      	ldr	r2, [pc, #352]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800449e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044ac:	4b53      	ldr	r3, [pc, #332]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4a52      	ldr	r2, [pc, #328]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b8:	4b50      	ldr	r3, [pc, #320]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	494d      	ldr	r1, [pc, #308]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d044      	beq.n	8004560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d107      	bne.n	80044ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	4b47      	ldr	r3, [pc, #284]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d119      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e07f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d003      	beq.n	80044fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fe:	4b3f      	ldr	r3, [pc, #252]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e06f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450e:	4b3b      	ldr	r3, [pc, #236]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e067      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451e:	4b37      	ldr	r3, [pc, #220]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 0203 	bic.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4934      	ldr	r1, [pc, #208]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004530:	f7fc fff8 	bl	8001524 <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	e00a      	b.n	800454e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004538:	f7fc fff4 	bl	8001524 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	; 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e04f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 020c 	and.w	r2, r3, #12
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	429a      	cmp	r2, r3
 800455e:	d1eb      	bne.n	8004538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d20c      	bcs.n	8004588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b22      	ldr	r3, [pc, #136]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e032      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004594:	4b19      	ldr	r3, [pc, #100]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4916      	ldr	r1, [pc, #88]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	490e      	ldr	r1, [pc, #56]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045c6:	f000 f821 	bl	800460c <HAL_RCC_GetSysClockFreq>
 80045ca:	4602      	mov	r2, r0
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	490a      	ldr	r1, [pc, #40]	; (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 80045d8:	5ccb      	ldrb	r3, [r1, r3]
 80045da:	fa22 f303 	lsr.w	r3, r2, r3
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fc ff58 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40023c00 	.word	0x40023c00
 80045fc:	40023800 	.word	0x40023800
 8004600:	08008adc 	.word	0x08008adc
 8004604:	20000174 	.word	0x20000174
 8004608:	20000178 	.word	0x20000178

0800460c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800460c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004610:	b094      	sub	sp, #80	; 0x50
 8004612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	647b      	str	r3, [r7, #68]	; 0x44
 8004618:	2300      	movs	r3, #0
 800461a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800461c:	2300      	movs	r3, #0
 800461e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004624:	4b79      	ldr	r3, [pc, #484]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d00d      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0x40>
 8004630:	2b08      	cmp	r3, #8
 8004632:	f200 80e1 	bhi.w	80047f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x34>
 800463a:	2b04      	cmp	r3, #4
 800463c:	d003      	beq.n	8004646 <HAL_RCC_GetSysClockFreq+0x3a>
 800463e:	e0db      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4b73      	ldr	r3, [pc, #460]	; (8004810 <HAL_RCC_GetSysClockFreq+0x204>)
 8004642:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004644:	e0db      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004646:	4b73      	ldr	r3, [pc, #460]	; (8004814 <HAL_RCC_GetSysClockFreq+0x208>)
 8004648:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800464a:	e0d8      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800464c:	4b6f      	ldr	r3, [pc, #444]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004654:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004656:	4b6d      	ldr	r3, [pc, #436]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d063      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004662:	4b6a      	ldr	r3, [pc, #424]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	099b      	lsrs	r3, r3, #6
 8004668:	2200      	movs	r2, #0
 800466a:	63bb      	str	r3, [r7, #56]	; 0x38
 800466c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004674:	633b      	str	r3, [r7, #48]	; 0x30
 8004676:	2300      	movs	r3, #0
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
 800467a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800467e:	4622      	mov	r2, r4
 8004680:	462b      	mov	r3, r5
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f04f 0100 	mov.w	r1, #0
 800468a:	0159      	lsls	r1, r3, #5
 800468c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004690:	0150      	lsls	r0, r2, #5
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4621      	mov	r1, r4
 8004698:	1a51      	subs	r1, r2, r1
 800469a:	6139      	str	r1, [r7, #16]
 800469c:	4629      	mov	r1, r5
 800469e:	eb63 0301 	sbc.w	r3, r3, r1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046b0:	4659      	mov	r1, fp
 80046b2:	018b      	lsls	r3, r1, #6
 80046b4:	4651      	mov	r1, sl
 80046b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ba:	4651      	mov	r1, sl
 80046bc:	018a      	lsls	r2, r1, #6
 80046be:	4651      	mov	r1, sl
 80046c0:	ebb2 0801 	subs.w	r8, r2, r1
 80046c4:	4659      	mov	r1, fp
 80046c6:	eb63 0901 	sbc.w	r9, r3, r1
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046de:	4690      	mov	r8, r2
 80046e0:	4699      	mov	r9, r3
 80046e2:	4623      	mov	r3, r4
 80046e4:	eb18 0303 	adds.w	r3, r8, r3
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	462b      	mov	r3, r5
 80046ec:	eb49 0303 	adc.w	r3, r9, r3
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046fe:	4629      	mov	r1, r5
 8004700:	024b      	lsls	r3, r1, #9
 8004702:	4621      	mov	r1, r4
 8004704:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004708:	4621      	mov	r1, r4
 800470a:	024a      	lsls	r2, r1, #9
 800470c:	4610      	mov	r0, r2
 800470e:	4619      	mov	r1, r3
 8004710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004712:	2200      	movs	r2, #0
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
 8004716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004718:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800471c:	f7fb fd54 	bl	80001c8 <__aeabi_uldivmod>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4613      	mov	r3, r2
 8004726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004728:	e058      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800472a:	4b38      	ldr	r3, [pc, #224]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	099b      	lsrs	r3, r3, #6
 8004730:	2200      	movs	r2, #0
 8004732:	4618      	mov	r0, r3
 8004734:	4611      	mov	r1, r2
 8004736:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	2300      	movs	r3, #0
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
 8004740:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004744:	4642      	mov	r2, r8
 8004746:	464b      	mov	r3, r9
 8004748:	f04f 0000 	mov.w	r0, #0
 800474c:	f04f 0100 	mov.w	r1, #0
 8004750:	0159      	lsls	r1, r3, #5
 8004752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004756:	0150      	lsls	r0, r2, #5
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4641      	mov	r1, r8
 800475e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004762:	4649      	mov	r1, r9
 8004764:	eb63 0b01 	sbc.w	fp, r3, r1
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004774:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004778:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800477c:	ebb2 040a 	subs.w	r4, r2, sl
 8004780:	eb63 050b 	sbc.w	r5, r3, fp
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	00eb      	lsls	r3, r5, #3
 800478e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004792:	00e2      	lsls	r2, r4, #3
 8004794:	4614      	mov	r4, r2
 8004796:	461d      	mov	r5, r3
 8004798:	4643      	mov	r3, r8
 800479a:	18e3      	adds	r3, r4, r3
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	464b      	mov	r3, r9
 80047a0:	eb45 0303 	adc.w	r3, r5, r3
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047b2:	4629      	mov	r1, r5
 80047b4:	028b      	lsls	r3, r1, #10
 80047b6:	4621      	mov	r1, r4
 80047b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047bc:	4621      	mov	r1, r4
 80047be:	028a      	lsls	r2, r1, #10
 80047c0:	4610      	mov	r0, r2
 80047c2:	4619      	mov	r1, r3
 80047c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c6:	2200      	movs	r2, #0
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	61fa      	str	r2, [r7, #28]
 80047cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d0:	f7fb fcfa 	bl	80001c8 <__aeabi_uldivmod>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4613      	mov	r3, r2
 80047da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	3301      	adds	r3, #1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f6:	e002      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetSysClockFreq+0x204>)
 80047fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004800:	4618      	mov	r0, r3
 8004802:	3750      	adds	r7, #80	; 0x50
 8004804:	46bd      	mov	sp, r7
 8004806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800
 8004810:	00f42400 	.word	0x00f42400
 8004814:	007a1200 	.word	0x007a1200

08004818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <HAL_RCC_GetHCLKFreq+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000174 	.word	0x20000174

08004830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004834:	f7ff fff0 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	0a9b      	lsrs	r3, r3, #10
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4903      	ldr	r1, [pc, #12]	; (8004854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40023800 	.word	0x40023800
 8004854:	08008aec 	.word	0x08008aec

08004858 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800487c:	2b00      	cmp	r3, #0
 800487e:	d035      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004880:	4b62      	ldr	r3, [pc, #392]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004886:	f7fc fe4d 	bl	8001524 <HAL_GetTick>
 800488a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800488c:	e008      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800488e:	f7fc fe49 	bl	8001524 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e0b0      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a0:	4b5b      	ldr	r3, [pc, #364]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f0      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	019a      	lsls	r2, r3, #6
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	071b      	lsls	r3, r3, #28
 80048b8:	4955      	ldr	r1, [pc, #340]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048c0:	4b52      	ldr	r3, [pc, #328]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048c6:	f7fc fe2d 	bl	8001524 <HAL_GetTick>
 80048ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048cc:	e008      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048ce:	f7fc fe29 	bl	8001524 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e090      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048e0:	4b4b      	ldr	r3, [pc, #300]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8083 	beq.w	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	4b44      	ldr	r3, [pc, #272]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	4a43      	ldr	r2, [pc, #268]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004908:	6413      	str	r3, [r2, #64]	; 0x40
 800490a:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004916:	4b3f      	ldr	r3, [pc, #252]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a3e      	ldr	r2, [pc, #248]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800491c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004920:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004922:	f7fc fdff 	bl	8001524 <HAL_GetTick>
 8004926:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800492a:	f7fc fdfb 	bl	8001524 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e062      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800493c:	4b35      	ldr	r3, [pc, #212]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004948:	4b31      	ldr	r3, [pc, #196]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004950:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d02f      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	429a      	cmp	r2, r3
 8004964:	d028      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004966:	4b2a      	ldr	r3, [pc, #168]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004970:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004976:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800497c:	4a24      	ldr	r2, [pc, #144]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004982:	4b23      	ldr	r3, [pc, #140]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b01      	cmp	r3, #1
 800498c:	d114      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800498e:	f7fc fdc9 	bl	8001524 <HAL_GetTick>
 8004992:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004994:	e00a      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fc fdc5 	bl	8001524 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e02a      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ac:	4b18      	ldr	r3, [pc, #96]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0ee      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049c4:	d10d      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80049c6:	4b12      	ldr	r3, [pc, #72]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049da:	490d      	ldr	r1, [pc, #52]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	608b      	str	r3, [r1, #8]
 80049e0:	e005      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049ec:	6093      	str	r3, [r2, #8]
 80049ee:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049fa:	4905      	ldr	r1, [pc, #20]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	42470068 	.word	0x42470068
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40007000 	.word	0x40007000
 8004a18:	42470e40 	.word	0x42470e40

08004a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d13e      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d12f      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a50:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a52:	617b      	str	r3, [r7, #20]
          break;
 8004a54:	e02f      	b.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a56:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a62:	d108      	bne.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a64:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6c:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	e007      	b.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a76:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a8c:	099b      	lsrs	r3, r3, #6
 8004a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	fb02 f303 	mul.w	r3, r2, r3
 8004a98:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa0:	0f1b      	lsrs	r3, r3, #28
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	617b      	str	r3, [r7, #20]
          break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
          break;
 8004ab4:	bf00      	nop
        }
      }
      break;
 8004ab6:	bf00      	nop
    }
  }
  return frequency;
 8004ab8:	697b      	ldr	r3, [r7, #20]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	00bb8000 	.word	0x00bb8000
 8004ad0:	007a1200 	.word	0x007a1200
 8004ad4:	00f42400 	.word	0x00f42400

08004ad8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e07b      	b.n	8004be2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004afa:	d009      	beq.n	8004b10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	61da      	str	r2, [r3, #28]
 8004b02:	e005      	b.n	8004b10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fc fab0 	bl	8001090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	ea42 0103 	orr.w	r1, r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	0c1b      	lsrs	r3, r3, #16
 8004bae:	f003 0104 	and.w	r1, r3, #4
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	f003 0210 	and.w	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e041      	b.n	8004c80 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7fc fbb1 	bl	8001378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3304      	adds	r3, #4
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f000 f9fd 	bl	8005028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d001      	beq.n	8004ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e04e      	b.n	8004d3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a23      	ldr	r2, [pc, #140]	; (8004d4c <HAL_TIM_Base_Start_IT+0xc4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d022      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x80>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cca:	d01d      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x80>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1f      	ldr	r2, [pc, #124]	; (8004d50 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d018      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x80>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d013      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x80>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00e      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x80>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <HAL_TIM_Base_Start_IT+0xd4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d009      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x80>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a19      	ldr	r2, [pc, #100]	; (8004d60 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x80>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d111      	bne.n	8004d2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d010      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2a:	e007      	b.n	8004d3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40010400 	.word	0x40010400
 8004d60:	40014000 	.word	0x40014000
 8004d64:	40001800 	.word	0x40001800

08004d68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a1a      	ldr	r2, [r3, #32]
 8004d86:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10f      	bne.n	8004db0 <HAL_TIM_Base_Stop_IT+0x48>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	f240 4344 	movw	r3, #1092	; 0x444
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_Base_Stop_IT+0x48>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d122      	bne.n	8004e22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d11b      	bne.n	8004e22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f06f 0202 	mvn.w	r2, #2
 8004df2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f8ee 	bl	8004fea <HAL_TIM_IC_CaptureCallback>
 8004e0e:	e005      	b.n	8004e1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f8e0 	bl	8004fd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8f1 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d122      	bne.n	8004e76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d11b      	bne.n	8004e76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f06f 0204 	mvn.w	r2, #4
 8004e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f8c4 	bl	8004fea <HAL_TIM_IC_CaptureCallback>
 8004e62:	e005      	b.n	8004e70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f8b6 	bl	8004fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f8c7 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d122      	bne.n	8004eca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d11b      	bne.n	8004eca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f06f 0208 	mvn.w	r2, #8
 8004e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f89a 	bl	8004fea <HAL_TIM_IC_CaptureCallback>
 8004eb6:	e005      	b.n	8004ec4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f88c 	bl	8004fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f89d 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d122      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d11b      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f06f 0210 	mvn.w	r2, #16
 8004eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f870 	bl	8004fea <HAL_TIM_IC_CaptureCallback>
 8004f0a:	e005      	b.n	8004f18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f862 	bl	8004fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f873 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d10e      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d107      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f06f 0201 	mvn.w	r2, #1
 8004f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7fc f83b 	bl	8000fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d10e      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d107      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f97f 	bl	8005274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	d10e      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d107      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f838 	bl	8005012 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d10e      	bne.n	8004fce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d107      	bne.n	8004fce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f06f 0220 	mvn.w	r2, #32
 8004fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f949 	bl	8005260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a40      	ldr	r2, [pc, #256]	; (800513c <TIM_Base_SetConfig+0x114>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005046:	d00f      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3d      	ldr	r2, [pc, #244]	; (8005140 <TIM_Base_SetConfig+0x118>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a3c      	ldr	r2, [pc, #240]	; (8005144 <TIM_Base_SetConfig+0x11c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3b      	ldr	r2, [pc, #236]	; (8005148 <TIM_Base_SetConfig+0x120>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3a      	ldr	r2, [pc, #232]	; (800514c <TIM_Base_SetConfig+0x124>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d108      	bne.n	800507a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2f      	ldr	r2, [pc, #188]	; (800513c <TIM_Base_SetConfig+0x114>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d02b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d027      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2c      	ldr	r2, [pc, #176]	; (8005140 <TIM_Base_SetConfig+0x118>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d023      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2b      	ldr	r2, [pc, #172]	; (8005144 <TIM_Base_SetConfig+0x11c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01f      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a2a      	ldr	r2, [pc, #168]	; (8005148 <TIM_Base_SetConfig+0x120>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a29      	ldr	r2, [pc, #164]	; (800514c <TIM_Base_SetConfig+0x124>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d017      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a28      	ldr	r2, [pc, #160]	; (8005150 <TIM_Base_SetConfig+0x128>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a27      	ldr	r2, [pc, #156]	; (8005154 <TIM_Base_SetConfig+0x12c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00f      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a26      	ldr	r2, [pc, #152]	; (8005158 <TIM_Base_SetConfig+0x130>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a25      	ldr	r2, [pc, #148]	; (800515c <TIM_Base_SetConfig+0x134>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d007      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a24      	ldr	r2, [pc, #144]	; (8005160 <TIM_Base_SetConfig+0x138>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a23      	ldr	r2, [pc, #140]	; (8005164 <TIM_Base_SetConfig+0x13c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d108      	bne.n	80050ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a0a      	ldr	r2, [pc, #40]	; (800513c <TIM_Base_SetConfig+0x114>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_Base_SetConfig+0xf8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a0c      	ldr	r2, [pc, #48]	; (800514c <TIM_Base_SetConfig+0x124>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d103      	bne.n	8005128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	615a      	str	r2, [r3, #20]
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40010400 	.word	0x40010400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800
 800515c:	40001800 	.word	0x40001800
 8005160:	40001c00 	.word	0x40001c00
 8005164:	40002000 	.word	0x40002000

08005168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800517c:	2302      	movs	r3, #2
 800517e:	e05a      	b.n	8005236 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a21      	ldr	r2, [pc, #132]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d022      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d01d      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d018      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1b      	ldr	r2, [pc, #108]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d013      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1a      	ldr	r2, [pc, #104]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00e      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a18      	ldr	r2, [pc, #96]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a17      	ldr	r2, [pc, #92]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d004      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a15      	ldr	r2, [pc, #84]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d10c      	bne.n	8005224 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	4313      	orrs	r3, r2
 800521a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40000c00 	.word	0x40000c00
 8005254:	40010400 	.word	0x40010400
 8005258:	40014000 	.word	0x40014000
 800525c:	40001800 	.word	0x40001800

08005260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005288:	b084      	sub	sp, #16
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	f107 001c 	add.w	r0, r7, #28
 8005296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	2b01      	cmp	r3, #1
 800529e:	d122      	bne.n	80052e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d105      	bne.n	80052da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f9c0 	bl	8005660 <USB_CoreReset>
 80052e0:	4603      	mov	r3, r0
 80052e2:	73fb      	strb	r3, [r7, #15]
 80052e4:	e01a      	b.n	800531c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f9b4 	bl	8005660 <USB_CoreReset>
 80052f8:	4603      	mov	r3, r0
 80052fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	639a      	str	r2, [r3, #56]	; 0x38
 800530e:	e005      	b.n	800531c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	2b01      	cmp	r3, #1
 8005320:	d10b      	bne.n	800533a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f043 0206 	orr.w	r2, r3, #6
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f043 0220 	orr.w	r2, r3, #32
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800533a:	7bfb      	ldrb	r3, [r7, #15]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005346:	b004      	add	sp, #16
 8005348:	4770      	bx	lr

0800534a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f043 0201 	orr.w	r2, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f023 0201 	bic.w	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	460b      	mov	r3, r1
 8005398:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d115      	bne.n	80053dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053bc:	2001      	movs	r0, #1
 80053be:	f7fc f8bd 	bl	800153c <HAL_Delay>
      ms++;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3301      	adds	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f93a 	bl	8005642 <USB_GetMode>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d01e      	beq.n	8005412 <USB_SetCurrentMode+0x84>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b31      	cmp	r3, #49	; 0x31
 80053d8:	d9f0      	bls.n	80053bc <USB_SetCurrentMode+0x2e>
 80053da:	e01a      	b.n	8005412 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d115      	bne.n	800540e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053ee:	2001      	movs	r0, #1
 80053f0:	f7fc f8a4 	bl	800153c <HAL_Delay>
      ms++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3301      	adds	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f921 	bl	8005642 <USB_GetMode>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <USB_SetCurrentMode+0x84>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b31      	cmp	r3, #49	; 0x31
 800540a:	d9f0      	bls.n	80053ee <USB_SetCurrentMode+0x60>
 800540c:	e001      	b.n	8005412 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e005      	b.n	800541e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b32      	cmp	r3, #50	; 0x32
 8005416:	d101      	bne.n	800541c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a13      	ldr	r2, [pc, #76]	; (800548c <USB_FlushTxFifo+0x64>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e01b      	b.n	8005480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	daf2      	bge.n	8005436 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	019b      	lsls	r3, r3, #6
 8005458:	f043 0220 	orr.w	r2, r3, #32
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a08      	ldr	r2, [pc, #32]	; (800548c <USB_FlushTxFifo+0x64>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e006      	b.n	8005480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b20      	cmp	r3, #32
 800547c:	d0f0      	beq.n	8005460 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	00030d40 	.word	0x00030d40

08005490 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a11      	ldr	r2, [pc, #68]	; (80054ec <USB_FlushRxFifo+0x5c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e018      	b.n	80054e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	daf2      	bge.n	800549c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2210      	movs	r2, #16
 80054be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <USB_FlushRxFifo+0x5c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e006      	b.n	80054e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d0f0      	beq.n	80054c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	00030d40 	.word	0x00030d40

080054f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b089      	sub	sp, #36	; 0x24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4611      	mov	r1, r2
 80054fc:	461a      	mov	r2, r3
 80054fe:	460b      	mov	r3, r1
 8005500:	71fb      	strb	r3, [r7, #7]
 8005502:	4613      	mov	r3, r2
 8005504:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800550e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005512:	2b00      	cmp	r3, #0
 8005514:	d123      	bne.n	800555e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005516:	88bb      	ldrh	r3, [r7, #4]
 8005518:	3303      	adds	r3, #3
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e018      	b.n	8005556 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	031a      	lsls	r2, r3, #12
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005530:	461a      	mov	r2, r3
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	3301      	adds	r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	3301      	adds	r3, #1
 8005542:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	3301      	adds	r3, #1
 8005548:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3301      	adds	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	3301      	adds	r3, #1
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	429a      	cmp	r2, r3
 800555c:	d3e2      	bcc.n	8005524 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3724      	adds	r7, #36	; 0x24
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800556c:	b480      	push	{r7}
 800556e:	b08b      	sub	sp, #44	; 0x2c
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	b29b      	uxth	r3, r3
 8005588:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005592:	2300      	movs	r3, #0
 8005594:	623b      	str	r3, [r7, #32]
 8005596:	e014      	b.n	80055c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	3301      	adds	r3, #1
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	3301      	adds	r3, #1
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	3301      	adds	r3, #1
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	3301      	adds	r3, #1
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	3301      	adds	r3, #1
 80055c0:	623b      	str	r3, [r7, #32]
 80055c2:	6a3a      	ldr	r2, [r7, #32]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d3e6      	bcc.n	8005598 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055ca:	8bfb      	ldrh	r3, [r7, #30]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01e      	beq.n	800560e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055da:	461a      	mov	r2, r3
 80055dc:	f107 0310 	add.w	r3, r7, #16
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	701a      	strb	r2, [r3, #0]
      i++;
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	3301      	adds	r3, #1
 80055fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	3301      	adds	r3, #1
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005602:	8bfb      	ldrh	r3, [r7, #30]
 8005604:	3b01      	subs	r3, #1
 8005606:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005608:	8bfb      	ldrh	r3, [r7, #30]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ea      	bne.n	80055e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005610:	4618      	mov	r0, r3
 8005612:	372c      	adds	r7, #44	; 0x2c
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4013      	ands	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005634:	68fb      	ldr	r3, [r7, #12]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0301 	and.w	r3, r3, #1
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3301      	adds	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <USB_CoreReset+0x64>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d901      	bls.n	800567e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e01b      	b.n	80056b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	daf2      	bge.n	800566c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f043 0201 	orr.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3301      	adds	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <USB_CoreReset+0x64>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e006      	b.n	80056b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d0f0      	beq.n	8005696 <USB_CoreReset+0x36>

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	00030d40 	.word	0x00030d40

080056c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c8:	b084      	sub	sp, #16
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b086      	sub	sp, #24
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056e8:	461a      	mov	r2, r3
 80056ea:	2300      	movs	r3, #0
 80056ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d018      	beq.n	8005750 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d10a      	bne.n	800573a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005732:	f043 0304 	orr.w	r3, r3, #4
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	e014      	b.n	8005764 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005748:	f023 0304 	bic.w	r3, r3, #4
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	e009      	b.n	8005764 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800575e:	f023 0304 	bic.w	r3, r3, #4
 8005762:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005764:	2110      	movs	r1, #16
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff fe5e 	bl	8005428 <USB_FlushTxFifo>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fe8a 	bl	8005490 <USB_FlushRxFifo>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	e015      	b.n	80057b8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	461a      	mov	r2, r3
 800579a:	f04f 33ff 	mov.w	r3, #4294967295
 800579e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	461a      	mov	r2, r3
 80057ae:	2300      	movs	r3, #0
 80057b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	3301      	adds	r3, #1
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d3e5      	bcc.n	800578c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a13      	ldr	r2, [pc, #76]	; (8005834 <USB_HostInit+0x16c>)
 80057e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a13      	ldr	r2, [pc, #76]	; (8005838 <USB_HostInit+0x170>)
 80057ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80057f0:	e009      	b.n	8005806 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2280      	movs	r2, #128	; 0x80
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a10      	ldr	r2, [pc, #64]	; (800583c <USB_HostInit+0x174>)
 80057fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a0f      	ldr	r2, [pc, #60]	; (8005840 <USB_HostInit+0x178>)
 8005802:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f043 0210 	orr.w	r2, r3, #16
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	4b09      	ldr	r3, [pc, #36]	; (8005844 <USB_HostInit+0x17c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005824:	7dfb      	ldrb	r3, [r7, #23]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005830:	b004      	add	sp, #16
 8005832:	4770      	bx	lr
 8005834:	01000200 	.word	0x01000200
 8005838:	00e00300 	.word	0x00e00300
 800583c:	00600080 	.word	0x00600080
 8005840:	004000e0 	.word	0x004000e0
 8005844:	a3200008 	.word	0xa3200008

08005848 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	68f9      	ldr	r1, [r7, #12]
 800587c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005880:	4313      	orrs	r3, r2
 8005882:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d107      	bne.n	800589a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005890:	461a      	mov	r2, r3
 8005892:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005896:	6053      	str	r3, [r2, #4]
 8005898:	e009      	b.n	80058ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d106      	bne.n	80058ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a6:	461a      	mov	r2, r3
 80058a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80058ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058ec:	2064      	movs	r0, #100	; 0x64
 80058ee:	f7fb fe25 	bl	800153c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005900:	200a      	movs	r0, #10
 8005902:	f7fb fe1b 	bl	800153c <HAL_Delay>

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005934:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d109      	bne.n	8005954 <USB_DriveVbus+0x44>
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d106      	bne.n	8005954 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800594e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005952:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800595a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595e:	d109      	bne.n	8005974 <USB_DriveVbus+0x64>
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800596e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005972:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005982:	b480      	push	{r7}
 8005984:	b085      	sub	sp, #20
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	0c5b      	lsrs	r3, r3, #17
 80059a0:	f003 0303 	and.w	r3, r3, #3
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	b29b      	uxth	r3, r3
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
	...

080059d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	4608      	mov	r0, r1
 80059de:	4611      	mov	r1, r2
 80059e0:	461a      	mov	r2, r3
 80059e2:	4603      	mov	r3, r0
 80059e4:	70fb      	strb	r3, [r7, #3]
 80059e6:	460b      	mov	r3, r1
 80059e8:	70bb      	strb	r3, [r7, #2]
 80059ea:	4613      	mov	r3, r2
 80059ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a02:	461a      	mov	r2, r3
 8005a04:	f04f 33ff 	mov.w	r3, #4294967295
 8005a08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d87e      	bhi.n	8005b10 <USB_HC_Init+0x13c>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <USB_HC_Init+0x44>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a29 	.word	0x08005a29
 8005a1c:	08005ad3 	.word	0x08005ad3
 8005a20:	08005a29 	.word	0x08005a29
 8005a24:	08005a95 	.word	0x08005a95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a34:	461a      	mov	r2, r3
 8005a36:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	da10      	bge.n	8005a66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	78fa      	ldrb	r2, [r7, #3]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a62:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005a64:	e057      	b.n	8005b16 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d051      	beq.n	8005b16 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	78fa      	ldrb	r2, [r7, #3]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a90:	60d3      	str	r3, [r2, #12]
      break;
 8005a92:	e040      	b.n	8005b16 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f240 639d 	movw	r3, #1693	; 0x69d
 8005aa6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005aa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	da34      	bge.n	8005b1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ace:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ad0:	e023      	b.n	8005b1a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f240 2325 	movw	r3, #549	; 0x225
 8005ae4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ae6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	da17      	bge.n	8005b1e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	78fa      	ldrb	r2, [r7, #3]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b08:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b0e:	e006      	b.n	8005b1e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	77fb      	strb	r3, [r7, #31]
      break;
 8005b14:	e004      	b.n	8005b20 <USB_HC_Init+0x14c>
      break;
 8005b16:	bf00      	nop
 8005b18:	e002      	b.n	8005b20 <USB_HC_Init+0x14c>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <USB_HC_Init+0x14c>
      break;
 8005b1e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	78fa      	ldrb	r2, [r7, #3]
 8005b30:	0151      	lsls	r1, r2, #5
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	440a      	add	r2, r1
 8005b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b3a:	f043 0302 	orr.w	r3, r3, #2
 8005b3e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	2101      	movs	r1, #1
 8005b50:	fa01 f303 	lsl.w	r3, r1, r3
 8005b54:	6939      	ldr	r1, [r7, #16]
 8005b56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da03      	bge.n	8005b7a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	e001      	b.n	8005b7e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff feff 	bl	8005982 <USB_GetHostSpeed>
 8005b84:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d106      	bne.n	8005b9c <USB_HC_Init+0x1c8>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d003      	beq.n	8005b9c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	e001      	b.n	8005ba0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ba0:	787b      	ldrb	r3, [r7, #1]
 8005ba2:	059b      	lsls	r3, r3, #22
 8005ba4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ba8:	78bb      	ldrb	r3, [r7, #2]
 8005baa:	02db      	lsls	r3, r3, #11
 8005bac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bb0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bb6:	049b      	lsls	r3, r3, #18
 8005bb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bbe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005bc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bc4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	0159      	lsls	r1, r3, #5
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	440b      	add	r3, r1
 8005bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bdc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005bde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d003      	beq.n	8005bee <USB_HC_Init+0x21a>
 8005be6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d10f      	bne.n	8005c0e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c0c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3720      	adds	r7, #32
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08c      	sub	sp, #48	; 0x30
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c34:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d02d      	beq.n	8005c9e <USB_HC_StartXfer+0x86>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	791b      	ldrb	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d129      	bne.n	8005c9e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d117      	bne.n	8005c80 <USB_HC_StartXfer+0x68>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	79db      	ldrb	r3, [r3, #7]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <USB_HC_StartXfer+0x48>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	79db      	ldrb	r3, [r3, #7]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d10f      	bne.n	8005c80 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	0151      	lsls	r1, r2, #5
 8005c72:	6a3a      	ldr	r2, [r7, #32]
 8005c74:	440a      	add	r2, r1
 8005c76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005c80:	79fb      	ldrb	r3, [r7, #7]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10b      	bne.n	8005c9e <USB_HC_StartXfer+0x86>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	795b      	ldrb	r3, [r3, #5]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d107      	bne.n	8005c9e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	4619      	mov	r1, r3
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 fa0f 	bl	80060b8 <USB_DoPing>
      return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e0f8      	b.n	8005e90 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d018      	beq.n	8005cd8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	8912      	ldrh	r2, [r2, #8]
 8005cae:	4413      	add	r3, r2
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	8912      	ldrh	r2, [r2, #8]
 8005cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005cbc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cbe:	8b7b      	ldrh	r3, [r7, #26]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d90b      	bls.n	8005cdc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005cc4:	8b7b      	ldrh	r3, [r7, #26]
 8005cc6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	8912      	ldrh	r2, [r2, #8]
 8005cce:	fb03 f202 	mul.w	r2, r3, r2
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	611a      	str	r2, [r3, #16]
 8005cd6:	e001      	b.n	8005cdc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	78db      	ldrb	r3, [r3, #3]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	8912      	ldrh	r2, [r2, #8]
 8005cea:	fb03 f202 	mul.w	r2, r3, r2
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	611a      	str	r2, [r3, #16]
 8005cf2:	e003      	b.n	8005cfc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d06:	04d9      	lsls	r1, r3, #19
 8005d08:	4b63      	ldr	r3, [pc, #396]	; (8005e98 <USB_HC_StartXfer+0x280>)
 8005d0a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d0c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	7a9b      	ldrb	r3, [r3, #10]
 8005d12:	075b      	lsls	r3, r3, #29
 8005d14:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d18:	69f9      	ldr	r1, [r7, #28]
 8005d1a:	0148      	lsls	r0, r1, #5
 8005d1c:	6a39      	ldr	r1, [r7, #32]
 8005d1e:	4401      	add	r1, r0
 8005d20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d24:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d26:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d009      	beq.n	8005d42 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	68d9      	ldr	r1, [r3, #12]
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3e:	460a      	mov	r2, r1
 8005d40:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf0c      	ite	eq
 8005d52:	2301      	moveq	r3, #1
 8005d54:	2300      	movne	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	6a3a      	ldr	r2, [r7, #32]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d78:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	7e7b      	ldrb	r3, [r7, #25]
 8005d8a:	075b      	lsls	r3, r3, #29
 8005d8c:	69f9      	ldr	r1, [r7, #28]
 8005d8e:	0148      	lsls	r0, r1, #5
 8005d90:	6a39      	ldr	r1, [r7, #32]
 8005d92:	4401      	add	r1, r0
 8005d94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005db2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	78db      	ldrb	r3, [r3, #3]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	e003      	b.n	8005dce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dcc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dd4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de2:	461a      	mov	r2, r3
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e04e      	b.n	8005e90 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	78db      	ldrb	r3, [r3, #3]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d149      	bne.n	8005e8e <USB_HC_StartXfer+0x276>
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d045      	beq.n	8005e8e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	79db      	ldrb	r3, [r3, #7]
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d830      	bhi.n	8005e6c <USB_HC_StartXfer+0x254>
 8005e0a:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <USB_HC_StartXfer+0x1f8>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e45 	.word	0x08005e45
 8005e18:	08005e21 	.word	0x08005e21
 8005e1c:	08005e45 	.word	0x08005e45
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	3303      	adds	r3, #3
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e2a:	8afa      	ldrh	r2, [r7, #22]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d91c      	bls.n	8005e70 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f043 0220 	orr.w	r2, r3, #32
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e42:	e015      	b.n	8005e70 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	3303      	adds	r3, #3
 8005e4a:	089b      	lsrs	r3, r3, #2
 8005e4c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e4e:	8afa      	ldrh	r2, [r7, #22]
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d90a      	bls.n	8005e74 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e6a:	e003      	b.n	8005e74 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e6c:	bf00      	nop
 8005e6e:	e002      	b.n	8005e76 <USB_HC_StartXfer+0x25e>
        break;
 8005e70:	bf00      	nop
 8005e72:	e000      	b.n	8005e76 <USB_HC_StartXfer+0x25e>
        break;
 8005e74:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	68d9      	ldr	r1, [r3, #12]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	785a      	ldrb	r2, [r3, #1]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2000      	movs	r0, #0
 8005e86:	9000      	str	r0, [sp, #0]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f7ff fb31 	bl	80054f0 <USB_WritePacket>
  }

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3728      	adds	r7, #40	; 0x28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	1ff80000 	.word	0x1ff80000

08005e9c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	b29b      	uxth	r3, r3
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b089      	sub	sp, #36	; 0x24
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	0c9b      	lsrs	r3, r3, #18
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	0fdb      	lsrs	r3, r3, #31
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d104      	bne.n	8005f18 <USB_HC_Halt+0x5a>
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	e0c8      	b.n	80060aa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <USB_HC_Halt+0x66>
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d163      	bne.n	8005fec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f42:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f040 80ab 	bne.w	80060a8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d133      	bne.n	8005fc6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f7c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f9c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005faa:	d81d      	bhi.n	8005fe8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc2:	d0ec      	beq.n	8005f9e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fc4:	e070      	b.n	80060a8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fe4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fe6:	e05f      	b.n	80060a8 <USB_HC_Halt+0x1ea>
            break;
 8005fe8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fea:	e05d      	b.n	80060a8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	440a      	add	r2, r1
 8006002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006006:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800600a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d133      	bne.n	8006084 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	440a      	add	r2, r1
 8006032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800603a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	440a      	add	r2, r1
 8006052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006056:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800605a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006068:	d81d      	bhi.n	80060a6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800607c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006080:	d0ec      	beq.n	800605c <USB_HC_Halt+0x19e>
 8006082:	e011      	b.n	80060a8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	440a      	add	r2, r1
 800609a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800609e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	e000      	b.n	80060a8 <USB_HC_Halt+0x1ea>
          break;
 80060a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3724      	adds	r7, #36	; 0x24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060cc:	2301      	movs	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	04da      	lsls	r2, r3, #19
 80060d4:	4b15      	ldr	r3, [pc, #84]	; (800612c <USB_DoPing+0x74>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006100:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006108:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	461a      	mov	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	1ff80000 	.word	0x1ff80000

08006130 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff f911 	bl	800536c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800614a:	2110      	movs	r1, #16
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff f96b 	bl	8005428 <USB_FlushTxFifo>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff f997 	bl	8005490 <USB_FlushRxFifo>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800616c:	2300      	movs	r3, #0
 800616e:	61bb      	str	r3, [r7, #24]
 8006170:	e01f      	b.n	80061b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4413      	add	r3, r2
 800617a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006188:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006190:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006198:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a6:	461a      	mov	r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	3301      	adds	r3, #1
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	2b0f      	cmp	r3, #15
 80061b6:	d9dc      	bls.n	8006172 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061b8:	2300      	movs	r3, #0
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	e034      	b.n	8006228 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f2:	461a      	mov	r2, r3
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3301      	adds	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006204:	d80c      	bhi.n	8006220 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800621c:	d0ec      	beq.n	80061f8 <USB_StopHost+0xc8>
 800621e:	e000      	b.n	8006222 <USB_StopHost+0xf2>
        break;
 8006220:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	3301      	adds	r3, #1
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b0f      	cmp	r3, #15
 800622c:	d9c7      	bls.n	80061be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006234:	461a      	mov	r2, r3
 8006236:	f04f 33ff 	mov.w	r3, #4294967295
 800623a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f04f 32ff 	mov.w	r2, #4294967295
 8006242:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff f880 	bl	800534a <USB_EnableGlobalInt>

  return ret;
 800624a:	7ffb      	ldrb	r3, [r7, #31]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006254:	b590      	push	{r4, r7, lr}
 8006256:	b089      	sub	sp, #36	; 0x24
 8006258:	af04      	add	r7, sp, #16
 800625a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800625c:	2301      	movs	r3, #1
 800625e:	2202      	movs	r2, #2
 8006260:	2102      	movs	r1, #2
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fc66 	bl	8006b34 <USBH_FindInterface>
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2bff      	cmp	r3, #255	; 0xff
 8006270:	d002      	beq.n	8006278 <USBH_CDC_InterfaceInit+0x24>
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d901      	bls.n	800627c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006278:	2302      	movs	r3, #2
 800627a:	e13d      	b.n	80064f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fc3b 	bl	8006afc <USBH_SelectInterface>
 8006286:	4603      	mov	r3, r0
 8006288:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006290:	2302      	movs	r3, #2
 8006292:	e131      	b.n	80064f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800629a:	2050      	movs	r0, #80	; 0x50
 800629c:	f002 fafa 	bl	8008894 <malloc>
 80062a0:	4603      	mov	r3, r0
 80062a2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80062b4:	2302      	movs	r3, #2
 80062b6:	e11f      	b.n	80064f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80062b8:	2250      	movs	r2, #80	; 0x50
 80062ba:	2100      	movs	r1, #0
 80062bc:	68b8      	ldr	r0, [r7, #8]
 80062be:	f002 faf9 	bl	80088b4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	211a      	movs	r1, #26
 80062c8:	fb01 f303 	mul.w	r3, r1, r3
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	b25b      	sxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	da15      	bge.n	8006306 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	211a      	movs	r1, #26
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	4413      	add	r3, r2
 80062e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062ea:	781a      	ldrb	r2, [r3, #0]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	211a      	movs	r1, #26
 80062f6:	fb01 f303 	mul.w	r3, r1, r3
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006300:	881a      	ldrh	r2, [r3, #0]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 ff2c 	bl	800816a <USBH_AllocPipe>
 8006312:	4603      	mov	r3, r0
 8006314:	461a      	mov	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	7819      	ldrb	r1, [r3, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	7858      	ldrb	r0, [r3, #1]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	8952      	ldrh	r2, [r2, #10]
 8006332:	9202      	str	r2, [sp, #8]
 8006334:	2203      	movs	r2, #3
 8006336:	9201      	str	r2, [sp, #4]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	4623      	mov	r3, r4
 800633c:	4602      	mov	r2, r0
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fee4 	bl	800810c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2200      	movs	r2, #0
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f002 f9f3 	bl	8008738 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006352:	2300      	movs	r3, #0
 8006354:	2200      	movs	r2, #0
 8006356:	210a      	movs	r1, #10
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fbeb 	bl	8006b34 <USBH_FindInterface>
 800635e:	4603      	mov	r3, r0
 8006360:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	2bff      	cmp	r3, #255	; 0xff
 8006366:	d002      	beq.n	800636e <USBH_CDC_InterfaceInit+0x11a>
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d901      	bls.n	8006372 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800636e:	2302      	movs	r3, #2
 8006370:	e0c2      	b.n	80064f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	211a      	movs	r1, #26
 8006378:	fb01 f303 	mul.w	r3, r1, r3
 800637c:	4413      	add	r3, r2
 800637e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	b25b      	sxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	da16      	bge.n	80063b8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	211a      	movs	r1, #26
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	4413      	add	r3, r2
 8006396:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800639a:	781a      	ldrb	r2, [r3, #0]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	211a      	movs	r1, #26
 80063a6:	fb01 f303 	mul.w	r3, r1, r3
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063b0:	881a      	ldrh	r2, [r3, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	835a      	strh	r2, [r3, #26]
 80063b6:	e015      	b.n	80063e4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	211a      	movs	r1, #26
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063c8:	781a      	ldrb	r2, [r3, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	211a      	movs	r1, #26
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	4413      	add	r3, r2
 80063da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063de:	881a      	ldrh	r2, [r3, #0]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	211a      	movs	r1, #26
 80063ea:	fb01 f303 	mul.w	r3, r1, r3
 80063ee:	4413      	add	r3, r2
 80063f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	b25b      	sxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	da16      	bge.n	800642a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	211a      	movs	r1, #26
 8006402:	fb01 f303 	mul.w	r3, r1, r3
 8006406:	4413      	add	r3, r2
 8006408:	f203 3356 	addw	r3, r3, #854	; 0x356
 800640c:	781a      	ldrb	r2, [r3, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	211a      	movs	r1, #26
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	4413      	add	r3, r2
 800641e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006422:	881a      	ldrh	r2, [r3, #0]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	835a      	strh	r2, [r3, #26]
 8006428:	e015      	b.n	8006456 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	211a      	movs	r1, #26
 8006430:	fb01 f303 	mul.w	r3, r1, r3
 8006434:	4413      	add	r3, r2
 8006436:	f203 3356 	addw	r3, r3, #854	; 0x356
 800643a:	781a      	ldrb	r2, [r3, #0]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	211a      	movs	r1, #26
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	4413      	add	r3, r2
 800644c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006450:	881a      	ldrh	r2, [r3, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	7b9b      	ldrb	r3, [r3, #14]
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fe84 	bl	800816a <USBH_AllocPipe>
 8006462:	4603      	mov	r3, r0
 8006464:	461a      	mov	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	7bdb      	ldrb	r3, [r3, #15]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 fe7a 	bl	800816a <USBH_AllocPipe>
 8006476:	4603      	mov	r3, r0
 8006478:	461a      	mov	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	7b59      	ldrb	r1, [r3, #13]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	7b98      	ldrb	r0, [r3, #14]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	8b12      	ldrh	r2, [r2, #24]
 8006496:	9202      	str	r2, [sp, #8]
 8006498:	2202      	movs	r2, #2
 800649a:	9201      	str	r2, [sp, #4]
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	4623      	mov	r3, r4
 80064a0:	4602      	mov	r2, r0
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 fe32 	bl	800810c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	7b19      	ldrb	r1, [r3, #12]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	7bd8      	ldrb	r0, [r3, #15]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	8b52      	ldrh	r2, [r2, #26]
 80064c0:	9202      	str	r2, [sp, #8]
 80064c2:	2202      	movs	r2, #2
 80064c4:	9201      	str	r2, [sp, #4]
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	4623      	mov	r3, r4
 80064ca:	4602      	mov	r2, r0
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 fe1d 	bl	800810c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	7b5b      	ldrb	r3, [r3, #13]
 80064de:	2200      	movs	r2, #0
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f002 f928 	bl	8008738 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	7b1b      	ldrb	r3, [r3, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f002 f921 	bl	8008738 <USBH_LL_SetToggle>

  return USBH_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd90      	pop	{r4, r7, pc}

08006500 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00e      	beq.n	8006538 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f001 fe12 	bl	800814a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fe3d 	bl	80081ac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	7b1b      	ldrb	r3, [r3, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	7b1b      	ldrb	r3, [r3, #12]
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 fdff 	bl	800814a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	7b1b      	ldrb	r3, [r3, #12]
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 fe2a 	bl	80081ac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	7b5b      	ldrb	r3, [r3, #13]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00e      	beq.n	8006584 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	7b5b      	ldrb	r3, [r3, #13]
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 fdec 	bl	800814a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	7b5b      	ldrb	r3, [r3, #13]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fe17 	bl	80081ac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00b      	beq.n	80065a8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	4618      	mov	r0, r3
 800659a:	f002 f983 	bl	80088a4 <free>
    phost->pActiveClass->pData = 0U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065a4:	2200      	movs	r2, #0
 80065a6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3340      	adds	r3, #64	; 0x40
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f8b1 	bl	8006732 <GetLineCoding>
 80065d0:	4603      	mov	r3, r0
 80065d2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065d4:	7afb      	ldrb	r3, [r7, #11]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d105      	bne.n	80065e6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065e0:	2102      	movs	r1, #2
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065e6:	7afb      	ldrb	r3, [r7, #11]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065f8:	2301      	movs	r3, #1
 80065fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006610:	2b04      	cmp	r3, #4
 8006612:	d877      	bhi.n	8006704 <USBH_CDC_Process+0x114>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <USBH_CDC_Process+0x2c>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006631 	.word	0x08006631
 8006620:	08006637 	.word	0x08006637
 8006624:	08006667 	.word	0x08006667
 8006628:	080066db 	.word	0x080066db
 800662c:	080066e9 	.word	0x080066e9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]
      break;
 8006634:	e06d      	b.n	8006712 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f897 	bl	8006770 <SetLineCoding>
 8006642:	4603      	mov	r3, r0
 8006644:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006654:	e058      	b.n	8006708 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d055      	beq.n	8006708 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2204      	movs	r2, #4
 8006660:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006664:	e050      	b.n	8006708 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	3340      	adds	r3, #64	; 0x40
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f860 	bl	8006732 <GetLineCoding>
 8006672:	4603      	mov	r3, r0
 8006674:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d126      	bne.n	80066ca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800668e:	791b      	ldrb	r3, [r3, #4]
 8006690:	429a      	cmp	r2, r3
 8006692:	d13b      	bne.n	800670c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d133      	bne.n	800670c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d12b      	bne.n	800670c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066bc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066be:	429a      	cmp	r2, r3
 80066c0:	d124      	bne.n	800670c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f958 	bl	8006978 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066c8:	e020      	b.n	800670c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066ca:	7bbb      	ldrb	r3, [r7, #14]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d01d      	beq.n	800670c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2204      	movs	r2, #4
 80066d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066d8:	e018      	b.n	800670c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f867 	bl	80067ae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f8da 	bl	800689a <CDC_ProcessReception>
      break;
 80066e6:	e014      	b.n	8006712 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066e8:	2100      	movs	r1, #0
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 ffef 	bl	80076ce <USBH_ClrFeature>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10a      	bne.n	8006710 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006702:	e005      	b.n	8006710 <USBH_CDC_Process+0x120>

    default:
      break;
 8006704:	bf00      	nop
 8006706:	e004      	b.n	8006712 <USBH_CDC_Process+0x122>
      break;
 8006708:	bf00      	nop
 800670a:	e002      	b.n	8006712 <USBH_CDC_Process+0x122>
      break;
 800670c:	bf00      	nop
 800670e:	e000      	b.n	8006712 <USBH_CDC_Process+0x122>
      break;
 8006710:	bf00      	nop

  }

  return status;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	22a1      	movs	r2, #161	; 0xa1
 8006740:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2221      	movs	r2, #33	; 0x21
 8006746:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2207      	movs	r2, #7
 8006758:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2207      	movs	r2, #7
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fa81 	bl	8007c68 <USBH_CtlReq>
 8006766:	4603      	mov	r3, r0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2221      	movs	r2, #33	; 0x21
 800677e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2207      	movs	r2, #7
 8006796:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2207      	movs	r2, #7
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 fa62 	bl	8007c68 <USBH_CtlReq>
 80067a4:	4603      	mov	r3, r0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b086      	sub	sp, #24
 80067b2:	af02      	add	r7, sp, #8
 80067b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d002      	beq.n	80067d4 <CDC_ProcessTransmission+0x26>
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d023      	beq.n	800681a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067d2:	e05e      	b.n	8006892 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	8b12      	ldrh	r2, [r2, #24]
 80067dc:	4293      	cmp	r3, r2
 80067de:	d90b      	bls.n	80067f8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	69d9      	ldr	r1, [r3, #28]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8b1a      	ldrh	r2, [r3, #24]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	7b5b      	ldrb	r3, [r3, #13]
 80067ec:	2001      	movs	r0, #1
 80067ee:	9000      	str	r0, [sp, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 fc48 	bl	8008086 <USBH_BulkSendData>
 80067f6:	e00b      	b.n	8006810 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	7b5b      	ldrb	r3, [r3, #13]
 8006806:	2001      	movs	r0, #1
 8006808:	9000      	str	r0, [sp, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fc3b 	bl	8008086 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006818:	e03b      	b.n	8006892 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	7b5b      	ldrb	r3, [r3, #13]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 ff5f 	bl	80086e4 <USBH_LL_GetURBState>
 8006826:	4603      	mov	r3, r0
 8006828:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800682a:	7afb      	ldrb	r3, [r7, #11]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d128      	bne.n	8006882 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	8b12      	ldrh	r2, [r2, #24]
 8006838:	4293      	cmp	r3, r2
 800683a:	d90e      	bls.n	800685a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	8b12      	ldrh	r2, [r2, #24]
 8006844:	1a9a      	subs	r2, r3, r2
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	8b12      	ldrh	r2, [r2, #24]
 8006852:	441a      	add	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	61da      	str	r2, [r3, #28]
 8006858:	e002      	b.n	8006860 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006870:	e00e      	b.n	8006890 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f868 	bl	8006950 <USBH_CDC_TransmitCallback>
      break;
 8006880:	e006      	b.n	8006890 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006882:	7afb      	ldrb	r3, [r7, #11]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d103      	bne.n	8006890 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006890:	bf00      	nop
  }
}
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b086      	sub	sp, #24
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d002      	beq.n	80068c0 <CDC_ProcessReception+0x26>
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d00e      	beq.n	80068dc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80068be:	e043      	b.n	8006948 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	6a19      	ldr	r1, [r3, #32]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	8b5a      	ldrh	r2, [r3, #26]
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	7b1b      	ldrb	r3, [r3, #12]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fbff 	bl	80080d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2204      	movs	r2, #4
 80068d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068da:	e035      	b.n	8006948 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	7b1b      	ldrb	r3, [r3, #12]
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 fefe 	bl	80086e4 <USBH_LL_GetURBState>
 80068e8:	4603      	mov	r3, r0
 80068ea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068ec:	7cfb      	ldrb	r3, [r7, #19]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d129      	bne.n	8006946 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	7b1b      	ldrb	r3, [r3, #12]
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fe61 	bl	80085c0 <USBH_LL_GetLastXferSize>
 80068fe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	429a      	cmp	r2, r3
 8006908:	d016      	beq.n	8006938 <CDC_ProcessReception+0x9e>
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	8b5b      	ldrh	r3, [r3, #26]
 800690e:	461a      	mov	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4293      	cmp	r3, r2
 8006914:	d910      	bls.n	8006938 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	1ad2      	subs	r2, r2, r3
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	6a1a      	ldr	r2, [r3, #32]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	441a      	add	r2, r3
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2203      	movs	r2, #3
 8006932:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006936:	e006      	b.n	8006946 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f80f 	bl	8006964 <USBH_CDC_ReceiveCallback>
      break;
 8006946:	bf00      	nop
  }
}
 8006948:	bf00      	nop
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	4613      	mov	r3, r2
 8006998:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80069a0:	2302      	movs	r3, #2
 80069a2:	e029      	b.n	80069f8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	79fa      	ldrb	r2, [r7, #7]
 80069a8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f81f 	bl	8006a00 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f001 fd31 	bl	8008458 <USBH_LL_Init>

  return USBH_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e009      	b.n	8006a26 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	33e0      	adds	r3, #224	; 0xe0
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3301      	adds	r3, #1
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b0f      	cmp	r3, #15
 8006a2a:	d9f2      	bls.n	8006a12 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	e009      	b.n	8006a46 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4c:	d3f1      	bcc.n	8006a32 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2240      	movs	r2, #64	; 0x40
 8006a72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d016      	beq.n	8006aea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10e      	bne.n	8006ae4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006acc:	1c59      	adds	r1, r3, #1
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	33de      	adds	r3, #222	; 0xde
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
 8006ae2:	e004      	b.n	8006aee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	73fb      	strb	r3, [r7, #15]
 8006ae8:	e001      	b.n	8006aee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006aea:	2302      	movs	r3, #2
 8006aec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d204      	bcs.n	8006b22 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	78fa      	ldrb	r2, [r7, #3]
 8006b1c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006b20:	e001      	b.n	8006b26 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b22:	2302      	movs	r3, #2
 8006b24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	4611      	mov	r1, r2
 8006b40:	461a      	mov	r2, r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	70fb      	strb	r3, [r7, #3]
 8006b46:	460b      	mov	r3, r1
 8006b48:	70bb      	strb	r3, [r7, #2]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b5c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b5e:	e025      	b.n	8006bac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	221a      	movs	r2, #26
 8006b64:	fb02 f303 	mul.w	r3, r2, r3
 8006b68:	3308      	adds	r3, #8
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3302      	adds	r3, #2
 8006b70:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	795b      	ldrb	r3, [r3, #5]
 8006b76:	78fa      	ldrb	r2, [r7, #3]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d002      	beq.n	8006b82 <USBH_FindInterface+0x4e>
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	2bff      	cmp	r3, #255	; 0xff
 8006b80:	d111      	bne.n	8006ba6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b86:	78ba      	ldrb	r2, [r7, #2]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d002      	beq.n	8006b92 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b8c:	78bb      	ldrb	r3, [r7, #2]
 8006b8e:	2bff      	cmp	r3, #255	; 0xff
 8006b90:	d109      	bne.n	8006ba6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b96:	787a      	ldrb	r2, [r7, #1]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d002      	beq.n	8006ba2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b9c:	787b      	ldrb	r3, [r7, #1]
 8006b9e:	2bff      	cmp	r3, #255	; 0xff
 8006ba0:	d101      	bne.n	8006ba6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	e006      	b.n	8006bb4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d9d6      	bls.n	8006b60 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bb2:	23ff      	movs	r3, #255	; 0xff
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 fc81 	bl	80084d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006bce:	2101      	movs	r1, #1
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 fd9a 	bl	800870a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af04      	add	r7, sp, #16
 8006be6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006be8:	2302      	movs	r3, #2
 8006bea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d102      	bne.n	8006c02 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2203      	movs	r2, #3
 8006c00:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b0b      	cmp	r3, #11
 8006c0a:	f200 81be 	bhi.w	8006f8a <USBH_Process+0x3aa>
 8006c0e:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <USBH_Process+0x34>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c45 	.word	0x08006c45
 8006c18:	08006c77 	.word	0x08006c77
 8006c1c:	08006cdf 	.word	0x08006cdf
 8006c20:	08006f25 	.word	0x08006f25
 8006c24:	08006f8b 	.word	0x08006f8b
 8006c28:	08006d83 	.word	0x08006d83
 8006c2c:	08006ecb 	.word	0x08006ecb
 8006c30:	08006db9 	.word	0x08006db9
 8006c34:	08006dd9 	.word	0x08006dd9
 8006c38:	08006df9 	.word	0x08006df9
 8006c3c:	08006e3d 	.word	0x08006e3d
 8006c40:	08006f0d 	.word	0x08006f0d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 819e 	beq.w	8006f8e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c58:	20c8      	movs	r0, #200	; 0xc8
 8006c5a:	f001 fd9d 	bl	8008798 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 fc93 	bl	800858a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c74:	e18b      	b.n	8006f8e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d107      	bne.n	8006c90 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c8e:	e18d      	b.n	8006fac <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c9a:	d914      	bls.n	8006cc6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d903      	bls.n	8006cbe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	220d      	movs	r2, #13
 8006cba:	701a      	strb	r2, [r3, #0]
      break;
 8006cbc:	e176      	b.n	8006fac <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
      break;
 8006cc4:	e172      	b.n	8006fac <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ccc:	f103 020a 	add.w	r2, r3, #10
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006cd6:	200a      	movs	r0, #10
 8006cd8:	f001 fd5e 	bl	8008798 <USBH_Delay>
      break;
 8006cdc:	e166      	b.n	8006fac <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cee:	2104      	movs	r1, #4
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006cf4:	2064      	movs	r0, #100	; 0x64
 8006cf6:	f001 fd4f 	bl	8008798 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 fc1e 	bl	800853c <USBH_LL_GetSpeed>
 8006d00:	4603      	mov	r3, r0
 8006d02:	461a      	mov	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2205      	movs	r2, #5
 8006d0e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d10:	2100      	movs	r1, #0
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fa29 	bl	800816a <USBH_AllocPipe>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d20:	2180      	movs	r1, #128	; 0x80
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 fa21 	bl	800816a <USBH_AllocPipe>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	7919      	ldrb	r1, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d44:	b292      	uxth	r2, r2
 8006d46:	9202      	str	r2, [sp, #8]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	9201      	str	r2, [sp, #4]
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2280      	movs	r2, #128	; 0x80
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 f9da 	bl	800810c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	7959      	ldrb	r1, [r3, #5]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d6c:	b292      	uxth	r2, r2
 8006d6e:	9202      	str	r2, [sp, #8]
 8006d70:	2200      	movs	r2, #0
 8006d72:	9201      	str	r2, [sp, #4]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	4603      	mov	r3, r0
 8006d78:	2200      	movs	r2, #0
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 f9c6 	bl	800810c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d80:	e114      	b.n	8006fac <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f918 	bl	8006fb8 <USBH_HandleEnum>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f040 80fe 	bne.w	8006f92 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d103      	bne.n	8006db0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2208      	movs	r2, #8
 8006dac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006dae:	e0f0      	b.n	8006f92 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2207      	movs	r2, #7
 8006db4:	701a      	strb	r2, [r3, #0]
      break;
 8006db6:	e0ec      	b.n	8006f92 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80e9 	beq.w	8006f96 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dca:	2101      	movs	r1, #1
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2208      	movs	r2, #8
 8006dd4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006dd6:	e0de      	b.n	8006f96 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fc2c 	bl	8007640 <USBH_SetCfg>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f040 80d5 	bne.w	8006f9a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2209      	movs	r2, #9
 8006df4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006df6:	e0d0      	b.n	8006f9a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d016      	beq.n	8006e34 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006e06:	2101      	movs	r1, #1
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc3c 	bl	8007686 <USBH_SetFeature>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d103      	bne.n	8006e22 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	220a      	movs	r2, #10
 8006e1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e20:	e0bd      	b.n	8006f9e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	f040 80b9 	bne.w	8006f9e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	220a      	movs	r2, #10
 8006e30:	701a      	strb	r2, [r3, #0]
      break;
 8006e32:	e0b4      	b.n	8006f9e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	220a      	movs	r2, #10
 8006e38:	701a      	strb	r2, [r3, #0]
      break;
 8006e3a:	e0b0      	b.n	8006f9e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 80ad 	beq.w	8006fa2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]
 8006e54:	e016      	b.n	8006e84 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e56:	7bfa      	ldrb	r2, [r7, #15]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	32de      	adds	r2, #222	; 0xde
 8006e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e60:	791a      	ldrb	r2, [r3, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d108      	bne.n	8006e7e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e6c:	7bfa      	ldrb	r2, [r7, #15]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	32de      	adds	r2, #222	; 0xde
 8006e72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006e7c:	e005      	b.n	8006e8a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	3301      	adds	r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0e5      	beq.n	8006e56 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d016      	beq.n	8006ec2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d109      	bne.n	8006eba <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2206      	movs	r2, #6
 8006eaa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eb2:	2103      	movs	r1, #3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006eb8:	e073      	b.n	8006fa2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	220d      	movs	r2, #13
 8006ebe:	701a      	strb	r2, [r3, #0]
      break;
 8006ec0:	e06f      	b.n	8006fa2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	220d      	movs	r2, #13
 8006ec6:	701a      	strb	r2, [r3, #0]
      break;
 8006ec8:	e06b      	b.n	8006fa2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d017      	beq.n	8006f04 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	4798      	blx	r3
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d103      	bne.n	8006ef4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	220b      	movs	r2, #11
 8006ef0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ef2:	e058      	b.n	8006fa6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d154      	bne.n	8006fa6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	220d      	movs	r2, #13
 8006f00:	701a      	strb	r2, [r3, #0]
      break;
 8006f02:	e050      	b.n	8006fa6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	220d      	movs	r2, #13
 8006f08:	701a      	strb	r2, [r3, #0]
      break;
 8006f0a:	e04c      	b.n	8006fa6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d049      	beq.n	8006faa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
      }
      break;
 8006f22:	e042      	b.n	8006faa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff fd67 	bl	8006a00 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d009      	beq.n	8006f50 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d005      	beq.n	8006f66 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f60:	2105      	movs	r1, #5
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d107      	bne.n	8006f82 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff fe20 	bl	8006bc0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f80:	e014      	b.n	8006fac <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 faa4 	bl	80084d0 <USBH_LL_Start>
      break;
 8006f88:	e010      	b.n	8006fac <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f8a:	bf00      	nop
 8006f8c:	e00e      	b.n	8006fac <USBH_Process+0x3cc>
      break;
 8006f8e:	bf00      	nop
 8006f90:	e00c      	b.n	8006fac <USBH_Process+0x3cc>
      break;
 8006f92:	bf00      	nop
 8006f94:	e00a      	b.n	8006fac <USBH_Process+0x3cc>
    break;
 8006f96:	bf00      	nop
 8006f98:	e008      	b.n	8006fac <USBH_Process+0x3cc>
      break;
 8006f9a:	bf00      	nop
 8006f9c:	e006      	b.n	8006fac <USBH_Process+0x3cc>
      break;
 8006f9e:	bf00      	nop
 8006fa0:	e004      	b.n	8006fac <USBH_Process+0x3cc>
      break;
 8006fa2:	bf00      	nop
 8006fa4:	e002      	b.n	8006fac <USBH_Process+0x3cc>
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e000      	b.n	8006fac <USBH_Process+0x3cc>
      break;
 8006faa:	bf00      	nop
  }
  return USBH_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop

08006fb8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af04      	add	r7, sp, #16
 8006fbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	785b      	ldrb	r3, [r3, #1]
 8006fcc:	2b07      	cmp	r3, #7
 8006fce:	f200 81c1 	bhi.w	8007354 <USBH_HandleEnum+0x39c>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <USBH_HandleEnum+0x20>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08006ff9 	.word	0x08006ff9
 8006fdc:	080070b7 	.word	0x080070b7
 8006fe0:	08007121 	.word	0x08007121
 8006fe4:	080071af 	.word	0x080071af
 8006fe8:	08007219 	.word	0x08007219
 8006fec:	08007289 	.word	0x08007289
 8006ff0:	080072cf 	.word	0x080072cf
 8006ff4:	08007315 	.word	0x08007315
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ff8:	2108      	movs	r1, #8
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa50 	bl	80074a0 <USBH_Get_DevDesc>
 8007000:	4603      	mov	r3, r0
 8007002:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d130      	bne.n	800706c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7919      	ldrb	r1, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800702e:	b292      	uxth	r2, r2
 8007030:	9202      	str	r2, [sp, #8]
 8007032:	2200      	movs	r2, #0
 8007034:	9201      	str	r2, [sp, #4]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	4603      	mov	r3, r0
 800703a:	2280      	movs	r2, #128	; 0x80
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f865 	bl	800810c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	7959      	ldrb	r1, [r3, #5]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007056:	b292      	uxth	r2, r2
 8007058:	9202      	str	r2, [sp, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	9201      	str	r2, [sp, #4]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4603      	mov	r3, r0
 8007062:	2200      	movs	r2, #0
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 f851 	bl	800810c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800706a:	e175      	b.n	8007358 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	2b03      	cmp	r3, #3
 8007070:	f040 8172 	bne.w	8007358 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800707a:	3301      	adds	r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800708a:	2b03      	cmp	r3, #3
 800708c:	d903      	bls.n	8007096 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	220d      	movs	r2, #13
 8007092:	701a      	strb	r2, [r3, #0]
      break;
 8007094:	e160      	b.n	8007358 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	795b      	ldrb	r3, [r3, #5]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f885 	bl	80081ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	791b      	ldrb	r3, [r3, #4]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 f87f 	bl	80081ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
      break;
 80070b4:	e150      	b.n	8007358 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070b6:	2112      	movs	r1, #18
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f9f1 	bl	80074a0 <USBH_Get_DevDesc>
 80070be:	4603      	mov	r3, r0
 80070c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d103      	bne.n	80070d0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070ce:	e145      	b.n	800735c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	f040 8142 	bne.w	800735c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070de:	3301      	adds	r3, #1
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d903      	bls.n	80070fa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	220d      	movs	r2, #13
 80070f6:	701a      	strb	r2, [r3, #0]
      break;
 80070f8:	e130      	b.n	800735c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	795b      	ldrb	r3, [r3, #5]
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 f853 	bl	80081ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	791b      	ldrb	r3, [r3, #4]
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 f84d 	bl	80081ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]
      break;
 800711e:	e11d      	b.n	800735c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007120:	2101      	movs	r1, #1
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa68 	bl	80075f8 <USBH_SetAddress>
 8007128:	4603      	mov	r3, r0
 800712a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d132      	bne.n	8007198 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007132:	2002      	movs	r0, #2
 8007134:	f001 fb30 	bl	8008798 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2203      	movs	r2, #3
 8007144:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	7919      	ldrb	r1, [r3, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800715a:	b292      	uxth	r2, r2
 800715c:	9202      	str	r2, [sp, #8]
 800715e:	2200      	movs	r2, #0
 8007160:	9201      	str	r2, [sp, #4]
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	4603      	mov	r3, r0
 8007166:	2280      	movs	r2, #128	; 0x80
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 ffcf 	bl	800810c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	7959      	ldrb	r1, [r3, #5]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007182:	b292      	uxth	r2, r2
 8007184:	9202      	str	r2, [sp, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	9201      	str	r2, [sp, #4]
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	4603      	mov	r3, r0
 800718e:	2200      	movs	r2, #0
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 ffbb 	bl	800810c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007196:	e0e3      	b.n	8007360 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b03      	cmp	r3, #3
 800719c:	f040 80e0 	bne.w	8007360 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	220d      	movs	r2, #13
 80071a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	705a      	strb	r2, [r3, #1]
      break;
 80071ac:	e0d8      	b.n	8007360 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071ae:	2109      	movs	r1, #9
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f99d 	bl	80074f0 <USBH_Get_CfgDesc>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2204      	movs	r2, #4
 80071c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071c6:	e0cd      	b.n	8007364 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	f040 80ca 	bne.w	8007364 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071d6:	3301      	adds	r3, #1
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d903      	bls.n	80071f2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	220d      	movs	r2, #13
 80071ee:	701a      	strb	r2, [r3, #0]
      break;
 80071f0:	e0b8      	b.n	8007364 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	795b      	ldrb	r3, [r3, #5]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 ffd7 	bl	80081ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	791b      	ldrb	r3, [r3, #4]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 ffd1 	bl	80081ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	701a      	strb	r2, [r3, #0]
      break;
 8007216:	e0a5      	b.n	8007364 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f965 	bl	80074f0 <USBH_Get_CfgDesc>
 8007226:	4603      	mov	r3, r0
 8007228:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2205      	movs	r2, #5
 8007234:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007236:	e097      	b.n	8007368 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2b03      	cmp	r3, #3
 800723c:	f040 8094 	bne.w	8007368 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007246:	3301      	adds	r3, #1
 8007248:	b2da      	uxtb	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007256:	2b03      	cmp	r3, #3
 8007258:	d903      	bls.n	8007262 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	220d      	movs	r2, #13
 800725e:	701a      	strb	r2, [r3, #0]
      break;
 8007260:	e082      	b.n	8007368 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	795b      	ldrb	r3, [r3, #5]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 ff9f 	bl	80081ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	791b      	ldrb	r3, [r3, #4]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 ff99 	bl	80081ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	701a      	strb	r2, [r3, #0]
      break;
 8007286:	e06f      	b.n	8007368 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800728e:	2b00      	cmp	r3, #0
 8007290:	d019      	beq.n	80072c6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800729e:	23ff      	movs	r3, #255	; 0xff
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f949 	bl	8007538 <USBH_Get_StringDesc>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d103      	bne.n	80072b8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2206      	movs	r2, #6
 80072b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072b6:	e059      	b.n	800736c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d156      	bne.n	800736c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2206      	movs	r2, #6
 80072c2:	705a      	strb	r2, [r3, #1]
      break;
 80072c4:	e052      	b.n	800736c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2206      	movs	r2, #6
 80072ca:	705a      	strb	r2, [r3, #1]
      break;
 80072cc:	e04e      	b.n	800736c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d019      	beq.n	800730c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072e4:	23ff      	movs	r3, #255	; 0xff
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f926 	bl	8007538 <USBH_Get_StringDesc>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2207      	movs	r2, #7
 80072fa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072fc:	e038      	b.n	8007370 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b03      	cmp	r3, #3
 8007302:	d135      	bne.n	8007370 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2207      	movs	r2, #7
 8007308:	705a      	strb	r2, [r3, #1]
      break;
 800730a:	e031      	b.n	8007370 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2207      	movs	r2, #7
 8007310:	705a      	strb	r2, [r3, #1]
      break;
 8007312:	e02d      	b.n	8007370 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800731a:	2b00      	cmp	r3, #0
 800731c:	d017      	beq.n	800734e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800732a:	23ff      	movs	r3, #255	; 0xff
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f903 	bl	8007538 <USBH_Get_StringDesc>
 8007332:	4603      	mov	r3, r0
 8007334:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007340:	e018      	b.n	8007374 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	2b03      	cmp	r3, #3
 8007346:	d115      	bne.n	8007374 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
      break;
 800734c:	e012      	b.n	8007374 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
      break;
 8007352:	e00f      	b.n	8007374 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007354:	bf00      	nop
 8007356:	e00e      	b.n	8007376 <USBH_HandleEnum+0x3be>
      break;
 8007358:	bf00      	nop
 800735a:	e00c      	b.n	8007376 <USBH_HandleEnum+0x3be>
      break;
 800735c:	bf00      	nop
 800735e:	e00a      	b.n	8007376 <USBH_HandleEnum+0x3be>
      break;
 8007360:	bf00      	nop
 8007362:	e008      	b.n	8007376 <USBH_HandleEnum+0x3be>
      break;
 8007364:	bf00      	nop
 8007366:	e006      	b.n	8007376 <USBH_HandleEnum+0x3be>
      break;
 8007368:	bf00      	nop
 800736a:	e004      	b.n	8007376 <USBH_HandleEnum+0x3be>
      break;
 800736c:	bf00      	nop
 800736e:	e002      	b.n	8007376 <USBH_HandleEnum+0x3be>
      break;
 8007370:	bf00      	nop
 8007372:	e000      	b.n	8007376 <USBH_HandleEnum+0x3be>
      break;
 8007374:	bf00      	nop
  }
  return Status;
 8007376:	7bfb      	ldrb	r3, [r7, #15]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f804 	bl	80073c2 <USBH_HandleSof>
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b0b      	cmp	r3, #11
 80073d2:	d10a      	bne.n	80073ea <USBH_HandleSof+0x28>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
  }
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007402:	bf00      	nop
}
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800741e:	bf00      	nop
}
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 f844 	bl	8008506 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	791b      	ldrb	r3, [r3, #4]
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fe91 	bl	80081ac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	795b      	ldrb	r3, [r3, #5]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fe8b 	bl	80081ac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	4613      	mov	r3, r2
 80074ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074be:	2100      	movs	r1, #0
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f864 	bl	800758e <USBH_GetDescriptor>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074dc:	78fa      	ldrb	r2, [r7, #3]
 80074de:	b292      	uxth	r2, r2
 80074e0:	4619      	mov	r1, r3
 80074e2:	f000 f918 	bl	8007716 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	331c      	adds	r3, #28
 8007500:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007502:	887b      	ldrh	r3, [r7, #2]
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800750c:	2100      	movs	r1, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f83d 	bl	800758e <USBH_GetDescriptor>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d107      	bne.n	800752e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800751e:	887b      	ldrh	r3, [r7, #2]
 8007520:	461a      	mov	r2, r3
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f987 	bl	8007838 <USBH_ParseCfgDesc>
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800752e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af02      	add	r7, sp, #8
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	607a      	str	r2, [r7, #4]
 8007542:	461a      	mov	r2, r3
 8007544:	460b      	mov	r3, r1
 8007546:	72fb      	strb	r3, [r7, #11]
 8007548:	4613      	mov	r3, r2
 800754a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800754c:	7afb      	ldrb	r3, [r7, #11]
 800754e:	b29b      	uxth	r3, r3
 8007550:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007554:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800755c:	893b      	ldrh	r3, [r7, #8]
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	460b      	mov	r3, r1
 8007562:	2100      	movs	r1, #0
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f812 	bl	800758e <USBH_GetDescriptor>
 800756a:	4603      	mov	r3, r0
 800756c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800756e:	7dfb      	ldrb	r3, [r7, #23]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d107      	bne.n	8007584 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800757a:	893a      	ldrh	r2, [r7, #8]
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fb24 	bl	8007bcc <USBH_ParseStringDesc>
  }

  return status;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	72fb      	strb	r3, [r7, #11]
 800759c:	4613      	mov	r3, r2
 800759e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	789b      	ldrb	r3, [r3, #2]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d11c      	bne.n	80075e2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075a8:	7afb      	ldrb	r3, [r7, #11]
 80075aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2206      	movs	r2, #6
 80075b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	893a      	ldrh	r2, [r7, #8]
 80075be:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075c0:	893b      	ldrh	r3, [r7, #8]
 80075c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ca:	d104      	bne.n	80075d6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f240 4209 	movw	r2, #1033	; 0x409
 80075d2:	829a      	strh	r2, [r3, #20]
 80075d4:	e002      	b.n	80075dc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8b3a      	ldrh	r2, [r7, #24]
 80075e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80075e2:	8b3b      	ldrh	r3, [r7, #24]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 fb3d 	bl	8007c68 <USBH_CtlReq>
 80075ee:	4603      	mov	r3, r0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	789b      	ldrb	r3, [r3, #2]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d10f      	bne.n	800762c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2205      	movs	r2, #5
 8007616:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	b29a      	uxth	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800762c:	2200      	movs	r2, #0
 800762e:	2100      	movs	r1, #0
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fb19 	bl	8007c68 <USBH_CtlReq>
 8007636:	4603      	mov	r3, r0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	789b      	ldrb	r3, [r3, #2]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d10e      	bne.n	8007672 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2209      	movs	r2, #9
 800765e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	887a      	ldrh	r2, [r7, #2]
 8007664:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007672:	2200      	movs	r2, #0
 8007674:	2100      	movs	r1, #0
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 faf6 	bl	8007c68 <USBH_CtlReq>
 800767c:	4603      	mov	r3, r0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	789b      	ldrb	r3, [r3, #2]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d10f      	bne.n	80076ba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2203      	movs	r2, #3
 80076a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076ba:	2200      	movs	r2, #0
 80076bc:	2100      	movs	r1, #0
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fad2 	bl	8007c68 <USBH_CtlReq>
 80076c4:	4603      	mov	r3, r0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	789b      	ldrb	r3, [r3, #2]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d10f      	bne.n	8007702 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2202      	movs	r2, #2
 80076e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007702:	2200      	movs	r2, #0
 8007704:	2100      	movs	r1, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 faae 	bl	8007c68 <USBH_CtlReq>
 800770c:	4603      	mov	r3, r0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	4613      	mov	r3, r2
 8007722:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	781a      	ldrb	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	785a      	ldrb	r2, [r3, #1]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	3302      	adds	r3, #2
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b29a      	uxth	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	3303      	adds	r3, #3
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	b29b      	uxth	r3, r3
 8007744:	021b      	lsls	r3, r3, #8
 8007746:	b29b      	uxth	r3, r3
 8007748:	4313      	orrs	r3, r2
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	791a      	ldrb	r2, [r3, #4]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	795a      	ldrb	r2, [r3, #5]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	799a      	ldrb	r2, [r3, #6]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	79da      	ldrb	r2, [r3, #7]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	79db      	ldrb	r3, [r3, #7]
 8007774:	2b20      	cmp	r3, #32
 8007776:	dc11      	bgt.n	800779c <USBH_ParseDevDesc+0x86>
 8007778:	2b08      	cmp	r3, #8
 800777a:	db16      	blt.n	80077aa <USBH_ParseDevDesc+0x94>
 800777c:	3b08      	subs	r3, #8
 800777e:	2201      	movs	r2, #1
 8007780:	fa02 f303 	lsl.w	r3, r2, r3
 8007784:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800778c:	2b00      	cmp	r3, #0
 800778e:	bf14      	ite	ne
 8007790:	2301      	movne	r3, #1
 8007792:	2300      	moveq	r3, #0
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d102      	bne.n	80077a0 <USBH_ParseDevDesc+0x8a>
 800779a:	e006      	b.n	80077aa <USBH_ParseDevDesc+0x94>
 800779c:	2b40      	cmp	r3, #64	; 0x40
 800779e:	d104      	bne.n	80077aa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	79da      	ldrb	r2, [r3, #7]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	71da      	strb	r2, [r3, #7]
      break;
 80077a8:	e003      	b.n	80077b2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2240      	movs	r2, #64	; 0x40
 80077ae:	71da      	strb	r2, [r3, #7]
      break;
 80077b0:	bf00      	nop
  }

  if (length > 8U)
 80077b2:	88fb      	ldrh	r3, [r7, #6]
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d939      	bls.n	800782c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3308      	adds	r3, #8
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	3309      	adds	r3, #9
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	4313      	orrs	r3, r2
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	330a      	adds	r3, #10
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	330b      	adds	r3, #11
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	021b      	lsls	r3, r3, #8
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4313      	orrs	r3, r2
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	330c      	adds	r3, #12
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	330d      	adds	r3, #13
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	b29b      	uxth	r3, r3
 8007804:	4313      	orrs	r3, r2
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	7b9a      	ldrb	r2, [r3, #14]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	7bda      	ldrb	r2, [r3, #15]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	7c1a      	ldrb	r2, [r3, #16]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	7c5a      	ldrb	r2, [r3, #17]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	745a      	strb	r2, [r3, #17]
  }
}
 800782c:	bf00      	nop
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08c      	sub	sp, #48	; 0x30
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	4613      	mov	r3, r2
 8007844:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800784c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	781a      	ldrb	r2, [r3, #0]
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	785a      	ldrb	r2, [r3, #1]
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	3302      	adds	r3, #2
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b29a      	uxth	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	3303      	adds	r3, #3
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	b29b      	uxth	r3, r3
 800788c:	4313      	orrs	r3, r2
 800788e:	b29b      	uxth	r3, r3
 8007890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007894:	bf28      	it	cs
 8007896:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800789a:	b29a      	uxth	r2, r3
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	791a      	ldrb	r2, [r3, #4]
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	795a      	ldrb	r2, [r3, #5]
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	799a      	ldrb	r2, [r3, #6]
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	79da      	ldrb	r2, [r3, #7]
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	7a1a      	ldrb	r2, [r3, #8]
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b09      	cmp	r3, #9
 80078ce:	d002      	beq.n	80078d6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	2209      	movs	r2, #9
 80078d4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	2b09      	cmp	r3, #9
 80078da:	f240 809d 	bls.w	8007a18 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80078de:	2309      	movs	r3, #9
 80078e0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078e6:	e081      	b.n	80079ec <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078e8:	f107 0316 	add.w	r3, r7, #22
 80078ec:	4619      	mov	r1, r3
 80078ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f0:	f000 f99f 	bl	8007c32 <USBH_GetNextDesc>
 80078f4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d176      	bne.n	80079ec <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b09      	cmp	r3, #9
 8007904:	d002      	beq.n	800790c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	2209      	movs	r2, #9
 800790a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800790c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007910:	221a      	movs	r2, #26
 8007912:	fb02 f303 	mul.w	r3, r2, r3
 8007916:	3308      	adds	r3, #8
 8007918:	6a3a      	ldr	r2, [r7, #32]
 800791a:	4413      	add	r3, r2
 800791c:	3302      	adds	r3, #2
 800791e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007922:	69f8      	ldr	r0, [r7, #28]
 8007924:	f000 f87e 	bl	8007a24 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007932:	e043      	b.n	80079bc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007934:	f107 0316 	add.w	r3, r7, #22
 8007938:	4619      	mov	r1, r3
 800793a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793c:	f000 f979 	bl	8007c32 <USBH_GetNextDesc>
 8007940:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	2b05      	cmp	r3, #5
 8007948:	d138      	bne.n	80079bc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	795b      	ldrb	r3, [r3, #5]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d10f      	bne.n	8007972 <USBH_ParseCfgDesc+0x13a>
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	799b      	ldrb	r3, [r3, #6]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d10b      	bne.n	8007972 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	79db      	ldrb	r3, [r3, #7]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10f      	bne.n	8007982 <USBH_ParseCfgDesc+0x14a>
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b09      	cmp	r3, #9
 8007968:	d00b      	beq.n	8007982 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	2209      	movs	r2, #9
 800796e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007970:	e007      	b.n	8007982 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b07      	cmp	r3, #7
 8007978:	d004      	beq.n	8007984 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	2207      	movs	r2, #7
 800797e:	701a      	strb	r2, [r3, #0]
 8007980:	e000      	b.n	8007984 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007982:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007988:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800798c:	3201      	adds	r2, #1
 800798e:	00d2      	lsls	r2, r2, #3
 8007990:	211a      	movs	r1, #26
 8007992:	fb01 f303 	mul.w	r3, r1, r3
 8007996:	4413      	add	r3, r2
 8007998:	3308      	adds	r3, #8
 800799a:	6a3a      	ldr	r2, [r7, #32]
 800799c:	4413      	add	r3, r2
 800799e:	3304      	adds	r3, #4
 80079a0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80079a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a4:	69b9      	ldr	r1, [r7, #24]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f86b 	bl	8007a82 <USBH_ParseEPDesc>
 80079ac:	4603      	mov	r3, r0
 80079ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80079b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079b6:	3301      	adds	r3, #1
 80079b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	791b      	ldrb	r3, [r3, #4]
 80079c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d204      	bcs.n	80079d2 <USBH_ParseCfgDesc+0x19a>
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	885a      	ldrh	r2, [r3, #2]
 80079cc:	8afb      	ldrh	r3, [r7, #22]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d8b0      	bhi.n	8007934 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	791b      	ldrb	r3, [r3, #4]
 80079d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079da:	429a      	cmp	r2, r3
 80079dc:	d201      	bcs.n	80079e2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80079de:	2303      	movs	r3, #3
 80079e0:	e01c      	b.n	8007a1c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80079e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079e6:	3301      	adds	r3, #1
 80079e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d805      	bhi.n	8007a00 <USBH_ParseCfgDesc+0x1c8>
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	885a      	ldrh	r2, [r3, #2]
 80079f8:	8afb      	ldrh	r3, [r7, #22]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	f63f af74 	bhi.w	80078e8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	791b      	ldrb	r3, [r3, #4]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	bf28      	it	cs
 8007a08:	2302      	movcs	r3, #2
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d201      	bcs.n	8007a18 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e001      	b.n	8007a1c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007a18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3730      	adds	r7, #48	; 0x30
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	785a      	ldrb	r2, [r3, #1]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	789a      	ldrb	r2, [r3, #2]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	78da      	ldrb	r2, [r3, #3]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	791a      	ldrb	r2, [r3, #4]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	795a      	ldrb	r2, [r3, #5]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	799a      	ldrb	r2, [r3, #6]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	79da      	ldrb	r2, [r3, #7]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	7a1a      	ldrb	r2, [r3, #8]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	721a      	strb	r2, [r3, #8]
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b087      	sub	sp, #28
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	781a      	ldrb	r2, [r3, #0]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	785a      	ldrb	r2, [r3, #1]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	789a      	ldrb	r2, [r3, #2]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	78da      	ldrb	r2, [r3, #3]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3305      	adds	r3, #5
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	799a      	ldrb	r2, [r3, #6]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	889b      	ldrh	r3, [r3, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d102      	bne.n	8007ae4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	75fb      	strb	r3, [r7, #23]
 8007ae2:	e033      	b.n	8007b4c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	889b      	ldrh	r3, [r3, #4]
 8007ae8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007aec:	f023 0307 	bic.w	r3, r3, #7
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	889b      	ldrh	r3, [r3, #4]
 8007afa:	b21a      	sxth	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3304      	adds	r3, #4
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b299      	uxth	r1, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3305      	adds	r3, #5
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	430b      	orrs	r3, r1
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d110      	bne.n	8007b3e <USBH_ParseEPDesc+0xbc>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b299      	uxth	r1, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3305      	adds	r3, #5
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	430b      	orrs	r3, r1
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	b21b      	sxth	r3, r3
 8007b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b3a:	b21b      	sxth	r3, r3
 8007b3c:	e001      	b.n	8007b42 <USBH_ParseEPDesc+0xc0>
 8007b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b42:	4313      	orrs	r3, r2
 8007b44:	b21b      	sxth	r3, r3
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d116      	bne.n	8007b84 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	78db      	ldrb	r3, [r3, #3]
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d005      	beq.n	8007b6e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	78db      	ldrb	r3, [r3, #3]
 8007b66:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d127      	bne.n	8007bbe <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	799b      	ldrb	r3, [r3, #6]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <USBH_ParseEPDesc+0xfc>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	799b      	ldrb	r3, [r3, #6]
 8007b7a:	2b10      	cmp	r3, #16
 8007b7c:	d91f      	bls.n	8007bbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	75fb      	strb	r3, [r7, #23]
 8007b82:	e01c      	b.n	8007bbe <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	78db      	ldrb	r3, [r3, #3]
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d10a      	bne.n	8007ba6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	799b      	ldrb	r3, [r3, #6]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <USBH_ParseEPDesc+0x11e>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	799b      	ldrb	r3, [r3, #6]
 8007b9c:	2b10      	cmp	r3, #16
 8007b9e:	d90e      	bls.n	8007bbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	75fb      	strb	r3, [r7, #23]
 8007ba4:	e00b      	b.n	8007bbe <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	78db      	ldrb	r3, [r3, #3]
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d105      	bne.n	8007bbe <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	799b      	ldrb	r3, [r3, #6]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	371c      	adds	r7, #28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b03      	cmp	r3, #3
 8007be2:	d120      	bne.n	8007c26 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	1e9a      	subs	r2, r3, #2
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	4293      	cmp	r3, r2
 8007bee:	bf28      	it	cs
 8007bf0:	4613      	movcs	r3, r2
 8007bf2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3302      	adds	r3, #2
 8007bf8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	82fb      	strh	r3, [r7, #22]
 8007bfe:	e00b      	b.n	8007c18 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c00:	8afb      	ldrh	r3, [r7, #22]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	4413      	add	r3, r2
 8007c06:	781a      	ldrb	r2, [r3, #0]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c12:	8afb      	ldrh	r3, [r7, #22]
 8007c14:	3302      	adds	r3, #2
 8007c16:	82fb      	strh	r3, [r7, #22]
 8007c18:	8afa      	ldrh	r2, [r7, #22]
 8007c1a:	8abb      	ldrh	r3, [r7, #20]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d3ef      	bcc.n	8007c00 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
  }
}
 8007c26:	bf00      	nop
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b085      	sub	sp, #20
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	881a      	ldrh	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	4413      	add	r3, r2
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4413      	add	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	789b      	ldrb	r3, [r3, #2]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d002      	beq.n	8007c88 <USBH_CtlReq+0x20>
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d00f      	beq.n	8007ca6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c86:	e027      	b.n	8007cd8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	88fa      	ldrh	r2, [r7, #6]
 8007c92:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2201      	movs	r2, #1
 8007c98:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ca4:	e018      	b.n	8007cd8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 f81c 	bl	8007ce4 <USBH_HandleControl>
 8007cac:	4603      	mov	r3, r0
 8007cae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <USBH_CtlReq+0x54>
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d106      	bne.n	8007cca <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	761a      	strb	r2, [r3, #24]
      break;
 8007cc8:	e005      	b.n	8007cd6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d102      	bne.n	8007cd6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	709a      	strb	r2, [r3, #2]
      break;
 8007cd6:	bf00      	nop
  }
  return status;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	7e1b      	ldrb	r3, [r3, #24]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	2b0a      	cmp	r3, #10
 8007cfc:	f200 8156 	bhi.w	8007fac <USBH_HandleControl+0x2c8>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <USBH_HandleControl+0x24>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d35 	.word	0x08007d35
 8007d0c:	08007d4f 	.word	0x08007d4f
 8007d10:	08007db9 	.word	0x08007db9
 8007d14:	08007ddf 	.word	0x08007ddf
 8007d18:	08007e17 	.word	0x08007e17
 8007d1c:	08007e41 	.word	0x08007e41
 8007d20:	08007e93 	.word	0x08007e93
 8007d24:	08007eb5 	.word	0x08007eb5
 8007d28:	08007ef1 	.word	0x08007ef1
 8007d2c:	08007f17 	.word	0x08007f17
 8007d30:	08007f55 	.word	0x08007f55
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f103 0110 	add.w	r1, r3, #16
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	795b      	ldrb	r3, [r3, #5]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f943 	bl	8007fcc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	761a      	strb	r2, [r3, #24]
      break;
 8007d4c:	e139      	b.n	8007fc2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	795b      	ldrb	r3, [r3, #5]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fcc5 	bl	80086e4 <USBH_LL_GetURBState>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d11e      	bne.n	8007da2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	7c1b      	ldrb	r3, [r3, #16]
 8007d68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d6c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	8adb      	ldrh	r3, [r3, #22]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d76:	7b7b      	ldrb	r3, [r7, #13]
 8007d78:	2b80      	cmp	r3, #128	; 0x80
 8007d7a:	d103      	bne.n	8007d84 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2203      	movs	r2, #3
 8007d80:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d82:	e115      	b.n	8007fb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2205      	movs	r2, #5
 8007d88:	761a      	strb	r2, [r3, #24]
      break;
 8007d8a:	e111      	b.n	8007fb0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007d8c:	7b7b      	ldrb	r3, [r7, #13]
 8007d8e:	2b80      	cmp	r3, #128	; 0x80
 8007d90:	d103      	bne.n	8007d9a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2209      	movs	r2, #9
 8007d96:	761a      	strb	r2, [r3, #24]
      break;
 8007d98:	e10a      	b.n	8007fb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2207      	movs	r2, #7
 8007d9e:	761a      	strb	r2, [r3, #24]
      break;
 8007da0:	e106      	b.n	8007fb0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d003      	beq.n	8007db0 <USBH_HandleControl+0xcc>
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	f040 8100 	bne.w	8007fb0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	220b      	movs	r2, #11
 8007db4:	761a      	strb	r2, [r3, #24]
      break;
 8007db6:	e0fb      	b.n	8007fb0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6899      	ldr	r1, [r3, #8]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	899a      	ldrh	r2, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	791b      	ldrb	r3, [r3, #4]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f93a 	bl	800804a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2204      	movs	r2, #4
 8007dda:	761a      	strb	r2, [r3, #24]
      break;
 8007ddc:	e0f1      	b.n	8007fc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	791b      	ldrb	r3, [r3, #4]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fc7d 	bl	80086e4 <USBH_LL_GetURBState>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d102      	bne.n	8007dfa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2209      	movs	r2, #9
 8007df8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b05      	cmp	r3, #5
 8007dfe:	d102      	bne.n	8007e06 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e00:	2303      	movs	r3, #3
 8007e02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e04:	e0d6      	b.n	8007fb4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	f040 80d3 	bne.w	8007fb4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	220b      	movs	r2, #11
 8007e12:	761a      	strb	r2, [r3, #24]
      break;
 8007e14:	e0ce      	b.n	8007fb4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6899      	ldr	r1, [r3, #8]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	899a      	ldrh	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	795b      	ldrb	r3, [r3, #5]
 8007e22:	2001      	movs	r0, #1
 8007e24:	9000      	str	r0, [sp, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f8ea 	bl	8008000 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2206      	movs	r2, #6
 8007e3c:	761a      	strb	r2, [r3, #24]
      break;
 8007e3e:	e0c0      	b.n	8007fc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	795b      	ldrb	r3, [r3, #5]
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fc4c 	bl	80086e4 <USBH_LL_GetURBState>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d103      	bne.n	8007e5e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2207      	movs	r2, #7
 8007e5a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e5c:	e0ac      	b.n	8007fb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	d105      	bne.n	8007e70 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	220c      	movs	r2, #12
 8007e68:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e6e:	e0a3      	b.n	8007fb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d103      	bne.n	8007e7e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2205      	movs	r2, #5
 8007e7a:	761a      	strb	r2, [r3, #24]
      break;
 8007e7c:	e09c      	b.n	8007fb8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	f040 8099 	bne.w	8007fb8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	220b      	movs	r2, #11
 8007e8a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e90:	e092      	b.n	8007fb8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	791b      	ldrb	r3, [r3, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	2100      	movs	r1, #0
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f8d5 	bl	800804a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2208      	movs	r2, #8
 8007eb0:	761a      	strb	r2, [r3, #24]

      break;
 8007eb2:	e086      	b.n	8007fc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	791b      	ldrb	r3, [r3, #4]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fc12 	bl	80086e4 <USBH_LL_GetURBState>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d105      	bne.n	8007ed6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	220d      	movs	r2, #13
 8007ece:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ed4:	e072      	b.n	8007fbc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d103      	bne.n	8007ee4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	220b      	movs	r2, #11
 8007ee0:	761a      	strb	r2, [r3, #24]
      break;
 8007ee2:	e06b      	b.n	8007fbc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	2b05      	cmp	r3, #5
 8007ee8:	d168      	bne.n	8007fbc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007eea:	2303      	movs	r3, #3
 8007eec:	73fb      	strb	r3, [r7, #15]
      break;
 8007eee:	e065      	b.n	8007fbc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	795b      	ldrb	r3, [r3, #5]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	9200      	str	r2, [sp, #0]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2100      	movs	r1, #0
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f87f 	bl	8008000 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	220a      	movs	r2, #10
 8007f12:	761a      	strb	r2, [r3, #24]
      break;
 8007f14:	e055      	b.n	8007fc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	795b      	ldrb	r3, [r3, #5]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fbe1 	bl	80086e4 <USBH_LL_GetURBState>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d105      	bne.n	8007f38 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	220d      	movs	r2, #13
 8007f34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f36:	e043      	b.n	8007fc0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d103      	bne.n	8007f46 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2209      	movs	r2, #9
 8007f42:	761a      	strb	r2, [r3, #24]
      break;
 8007f44:	e03c      	b.n	8007fc0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d139      	bne.n	8007fc0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	220b      	movs	r2, #11
 8007f50:	761a      	strb	r2, [r3, #24]
      break;
 8007f52:	e035      	b.n	8007fc0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	7e5b      	ldrb	r3, [r3, #25]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	765a      	strb	r2, [r3, #25]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7e5b      	ldrb	r3, [r3, #25]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d806      	bhi.n	8007f76 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f74:	e025      	b.n	8007fc2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f7c:	2106      	movs	r1, #6
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	795b      	ldrb	r3, [r3, #5]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f90c 	bl	80081ac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	791b      	ldrb	r3, [r3, #4]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f906 	bl	80081ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8007faa:	e00a      	b.n	8007fc2 <USBH_HandleControl+0x2de>

    default:
      break;
 8007fac:	bf00      	nop
 8007fae:	e008      	b.n	8007fc2 <USBH_HandleControl+0x2de>
      break;
 8007fb0:	bf00      	nop
 8007fb2:	e006      	b.n	8007fc2 <USBH_HandleControl+0x2de>
      break;
 8007fb4:	bf00      	nop
 8007fb6:	e004      	b.n	8007fc2 <USBH_HandleControl+0x2de>
      break;
 8007fb8:	bf00      	nop
 8007fba:	e002      	b.n	8007fc2 <USBH_HandleControl+0x2de>
      break;
 8007fbc:	bf00      	nop
 8007fbe:	e000      	b.n	8007fc2 <USBH_HandleControl+0x2de>
      break;
 8007fc0:	bf00      	nop
  }

  return status;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b088      	sub	sp, #32
 8007fd0:	af04      	add	r7, sp, #16
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fda:	79f9      	ldrb	r1, [r7, #7]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9303      	str	r3, [sp, #12]
 8007fe0:	2308      	movs	r3, #8
 8007fe2:	9302      	str	r3, [sp, #8]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	9301      	str	r3, [sp, #4]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	2300      	movs	r3, #0
 8007fee:	2200      	movs	r2, #0
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 fb46 	bl	8008682 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af04      	add	r7, sp, #16
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	4611      	mov	r1, r2
 800800c:	461a      	mov	r2, r3
 800800e:	460b      	mov	r3, r1
 8008010:	80fb      	strh	r3, [r7, #6]
 8008012:	4613      	mov	r3, r2
 8008014:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008024:	7979      	ldrb	r1, [r7, #5]
 8008026:	7e3b      	ldrb	r3, [r7, #24]
 8008028:	9303      	str	r3, [sp, #12]
 800802a:	88fb      	ldrh	r3, [r7, #6]
 800802c:	9302      	str	r3, [sp, #8]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	2301      	movs	r3, #1
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	2300      	movs	r3, #0
 8008038:	2200      	movs	r2, #0
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 fb21 	bl	8008682 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b088      	sub	sp, #32
 800804e:	af04      	add	r7, sp, #16
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	4611      	mov	r1, r2
 8008056:	461a      	mov	r2, r3
 8008058:	460b      	mov	r3, r1
 800805a:	80fb      	strh	r3, [r7, #6]
 800805c:	4613      	mov	r3, r2
 800805e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008060:	7979      	ldrb	r1, [r7, #5]
 8008062:	2300      	movs	r3, #0
 8008064:	9303      	str	r3, [sp, #12]
 8008066:	88fb      	ldrh	r3, [r7, #6]
 8008068:	9302      	str	r3, [sp, #8]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	2301      	movs	r3, #1
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	2201      	movs	r2, #1
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 fb03 	bl	8008682 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800807c:	2300      	movs	r3, #0

}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b088      	sub	sp, #32
 800808a:	af04      	add	r7, sp, #16
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	4611      	mov	r1, r2
 8008092:	461a      	mov	r2, r3
 8008094:	460b      	mov	r3, r1
 8008096:	80fb      	strh	r3, [r7, #6]
 8008098:	4613      	mov	r3, r2
 800809a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080aa:	7979      	ldrb	r1, [r7, #5]
 80080ac:	7e3b      	ldrb	r3, [r7, #24]
 80080ae:	9303      	str	r3, [sp, #12]
 80080b0:	88fb      	ldrh	r3, [r7, #6]
 80080b2:	9302      	str	r3, [sp, #8]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	2301      	movs	r3, #1
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	2302      	movs	r3, #2
 80080be:	2200      	movs	r2, #0
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 fade 	bl	8008682 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af04      	add	r7, sp, #16
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	4611      	mov	r1, r2
 80080dc:	461a      	mov	r2, r3
 80080de:	460b      	mov	r3, r1
 80080e0:	80fb      	strh	r3, [r7, #6]
 80080e2:	4613      	mov	r3, r2
 80080e4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080e6:	7979      	ldrb	r1, [r7, #5]
 80080e8:	2300      	movs	r3, #0
 80080ea:	9303      	str	r3, [sp, #12]
 80080ec:	88fb      	ldrh	r3, [r7, #6]
 80080ee:	9302      	str	r3, [sp, #8]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	9301      	str	r3, [sp, #4]
 80080f4:	2301      	movs	r3, #1
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	2302      	movs	r3, #2
 80080fa:	2201      	movs	r2, #1
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 fac0 	bl	8008682 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af04      	add	r7, sp, #16
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	4608      	mov	r0, r1
 8008116:	4611      	mov	r1, r2
 8008118:	461a      	mov	r2, r3
 800811a:	4603      	mov	r3, r0
 800811c:	70fb      	strb	r3, [r7, #3]
 800811e:	460b      	mov	r3, r1
 8008120:	70bb      	strb	r3, [r7, #2]
 8008122:	4613      	mov	r3, r2
 8008124:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008126:	7878      	ldrb	r0, [r7, #1]
 8008128:	78ba      	ldrb	r2, [r7, #2]
 800812a:	78f9      	ldrb	r1, [r7, #3]
 800812c:	8b3b      	ldrh	r3, [r7, #24]
 800812e:	9302      	str	r3, [sp, #8]
 8008130:	7d3b      	ldrb	r3, [r7, #20]
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	7c3b      	ldrb	r3, [r7, #16]
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	4603      	mov	r3, r0
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa53 	bl	80085e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fa72 	bl	8008644 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f836 	bl	80081e8 <USBH_GetFreePipe>
 800817c:	4603      	mov	r3, r0
 800817e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008180:	89fb      	ldrh	r3, [r7, #14]
 8008182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008186:	4293      	cmp	r3, r2
 8008188:	d00a      	beq.n	80081a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800818a:	78fa      	ldrb	r2, [r7, #3]
 800818c:	89fb      	ldrh	r3, [r7, #14]
 800818e:	f003 030f 	and.w	r3, r3, #15
 8008192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	33e0      	adds	r3, #224	; 0xe0
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	440b      	add	r3, r1
 800819e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80081a0:	89fb      	ldrh	r3, [r7, #14]
 80081a2:	b2db      	uxtb	r3, r3
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80081b8:	78fb      	ldrb	r3, [r7, #3]
 80081ba:	2b0f      	cmp	r3, #15
 80081bc:	d80d      	bhi.n	80081da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	33e0      	adds	r3, #224	; 0xe0
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	78fb      	ldrb	r3, [r7, #3]
 80081cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	33e0      	adds	r3, #224	; 0xe0
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	440b      	add	r3, r1
 80081d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
 80081f8:	e00f      	b.n	800821a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	33e0      	adds	r3, #224	; 0xe0
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d102      	bne.n	8008214 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	b29b      	uxth	r3, r3
 8008212:	e007      	b.n	8008224 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	3301      	adds	r3, #1
 8008218:	73fb      	strb	r3, [r7, #15]
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	2b0f      	cmp	r3, #15
 800821e:	d9ec      	bls.n	80081fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008220:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008234:	2201      	movs	r2, #1
 8008236:	490e      	ldr	r1, [pc, #56]	; (8008270 <MX_USB_HOST_Init+0x40>)
 8008238:	480e      	ldr	r0, [pc, #56]	; (8008274 <MX_USB_HOST_Init+0x44>)
 800823a:	f7fe fba7 	bl	800698c <USBH_Init>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008244:	f7f8 fee8 	bl	8001018 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008248:	490b      	ldr	r1, [pc, #44]	; (8008278 <MX_USB_HOST_Init+0x48>)
 800824a:	480a      	ldr	r0, [pc, #40]	; (8008274 <MX_USB_HOST_Init+0x44>)
 800824c:	f7fe fc2c 	bl	8006aa8 <USBH_RegisterClass>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008256:	f7f8 fedf 	bl	8001018 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800825a:	4806      	ldr	r0, [pc, #24]	; (8008274 <MX_USB_HOST_Init+0x44>)
 800825c:	f7fe fcb0 	bl	8006bc0 <USBH_Start>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008266:	f7f8 fed7 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800826a:	bf00      	nop
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	08008291 	.word	0x08008291
 8008274:	200003b8 	.word	0x200003b8
 8008278:	20000180 	.word	0x20000180

0800827c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008280:	4802      	ldr	r0, [pc, #8]	; (800828c <MX_USB_HOST_Process+0x10>)
 8008282:	f7fe fcad 	bl	8006be0 <USBH_Process>
}
 8008286:	bf00      	nop
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	200003b8 	.word	0x200003b8

08008290 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800829c:	78fb      	ldrb	r3, [r7, #3]
 800829e:	3b01      	subs	r3, #1
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d819      	bhi.n	80082d8 <USBH_UserProcess+0x48>
 80082a4:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <USBH_UserProcess+0x1c>)
 80082a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082aa:	bf00      	nop
 80082ac:	080082d9 	.word	0x080082d9
 80082b0:	080082c9 	.word	0x080082c9
 80082b4:	080082d9 	.word	0x080082d9
 80082b8:	080082d1 	.word	0x080082d1
 80082bc:	080082c1 	.word	0x080082c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80082c0:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <USBH_UserProcess+0x58>)
 80082c2:	2203      	movs	r2, #3
 80082c4:	701a      	strb	r2, [r3, #0]
  break;
 80082c6:	e008      	b.n	80082da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082c8:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <USBH_UserProcess+0x58>)
 80082ca:	2202      	movs	r2, #2
 80082cc:	701a      	strb	r2, [r3, #0]
  break;
 80082ce:	e004      	b.n	80082da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082d0:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <USBH_UserProcess+0x58>)
 80082d2:	2201      	movs	r2, #1
 80082d4:	701a      	strb	r2, [r3, #0]
  break;
 80082d6:	e000      	b.n	80082da <USBH_UserProcess+0x4a>

  default:
  break;
 80082d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80082da:	bf00      	nop
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	20000790 	.word	0x20000790

080082ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08a      	sub	sp, #40	; 0x28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082f4:	f107 0314 	add.w	r3, r7, #20
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	605a      	str	r2, [r3, #4]
 80082fe:	609a      	str	r2, [r3, #8]
 8008300:	60da      	str	r2, [r3, #12]
 8008302:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800830c:	d147      	bne.n	800839e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800830e:	2300      	movs	r3, #0
 8008310:	613b      	str	r3, [r7, #16]
 8008312:	4b25      	ldr	r3, [pc, #148]	; (80083a8 <HAL_HCD_MspInit+0xbc>)
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	4a24      	ldr	r2, [pc, #144]	; (80083a8 <HAL_HCD_MspInit+0xbc>)
 8008318:	f043 0301 	orr.w	r3, r3, #1
 800831c:	6313      	str	r3, [r2, #48]	; 0x30
 800831e:	4b22      	ldr	r3, [pc, #136]	; (80083a8 <HAL_HCD_MspInit+0xbc>)
 8008320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	613b      	str	r3, [r7, #16]
 8008328:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800832a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800832e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008330:	2300      	movs	r3, #0
 8008332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008334:	2300      	movs	r3, #0
 8008336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008338:	f107 0314 	add.w	r3, r7, #20
 800833c:	4619      	mov	r1, r3
 800833e:	481b      	ldr	r0, [pc, #108]	; (80083ac <HAL_HCD_MspInit+0xc0>)
 8008340:	f7f9 fa32 	bl	80017a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008344:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800834a:	2302      	movs	r3, #2
 800834c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008352:	2300      	movs	r3, #0
 8008354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008356:	230a      	movs	r3, #10
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800835a:	f107 0314 	add.w	r3, r7, #20
 800835e:	4619      	mov	r1, r3
 8008360:	4812      	ldr	r0, [pc, #72]	; (80083ac <HAL_HCD_MspInit+0xc0>)
 8008362:	f7f9 fa21 	bl	80017a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008366:	4b10      	ldr	r3, [pc, #64]	; (80083a8 <HAL_HCD_MspInit+0xbc>)
 8008368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836a:	4a0f      	ldr	r2, [pc, #60]	; (80083a8 <HAL_HCD_MspInit+0xbc>)
 800836c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008370:	6353      	str	r3, [r2, #52]	; 0x34
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	4b0c      	ldr	r3, [pc, #48]	; (80083a8 <HAL_HCD_MspInit+0xbc>)
 8008378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837a:	4a0b      	ldr	r2, [pc, #44]	; (80083a8 <HAL_HCD_MspInit+0xbc>)
 800837c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008380:	6453      	str	r3, [r2, #68]	; 0x44
 8008382:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <HAL_HCD_MspInit+0xbc>)
 8008384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800838e:	2200      	movs	r2, #0
 8008390:	2100      	movs	r1, #0
 8008392:	2043      	movs	r0, #67	; 0x43
 8008394:	f7f9 f9d1 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008398:	2043      	movs	r0, #67	; 0x43
 800839a:	f7f9 f9ea 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800839e:	bf00      	nop
 80083a0:	3728      	adds	r7, #40	; 0x28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	40023800 	.word	0x40023800
 80083ac:	40020000 	.word	0x40020000

080083b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe ffed 	bl	800739e <USBH_LL_IncTimer>
}
 80083c4:	bf00      	nop
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff f825 	bl	800742a <USBH_LL_Connect>
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff f82e 	bl	8007458 <USBH_LL_Disconnect>
}
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
 8008410:	4613      	mov	r3, r2
 8008412:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe ffdf 	bl	80073f2 <USBH_LL_PortEnabled>
}
 8008434:	bf00      	nop
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe ffdf 	bl	800740e <USBH_LL_PortDisabled>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008466:	2b01      	cmp	r3, #1
 8008468:	d12a      	bne.n	80084c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800846a:	4a18      	ldr	r2, [pc, #96]	; (80084cc <USBH_LL_Init+0x74>)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a15      	ldr	r2, [pc, #84]	; (80084cc <USBH_LL_Init+0x74>)
 8008476:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800847a:	4b14      	ldr	r3, [pc, #80]	; (80084cc <USBH_LL_Init+0x74>)
 800847c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008480:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008482:	4b12      	ldr	r3, [pc, #72]	; (80084cc <USBH_LL_Init+0x74>)
 8008484:	2208      	movs	r2, #8
 8008486:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008488:	4b10      	ldr	r3, [pc, #64]	; (80084cc <USBH_LL_Init+0x74>)
 800848a:	2201      	movs	r2, #1
 800848c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800848e:	4b0f      	ldr	r3, [pc, #60]	; (80084cc <USBH_LL_Init+0x74>)
 8008490:	2200      	movs	r2, #0
 8008492:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008494:	4b0d      	ldr	r3, [pc, #52]	; (80084cc <USBH_LL_Init+0x74>)
 8008496:	2202      	movs	r2, #2
 8008498:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800849a:	4b0c      	ldr	r3, [pc, #48]	; (80084cc <USBH_LL_Init+0x74>)
 800849c:	2200      	movs	r2, #0
 800849e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80084a0:	480a      	ldr	r0, [pc, #40]	; (80084cc <USBH_LL_Init+0x74>)
 80084a2:	f7f9 fb67 	bl	8001b74 <HAL_HCD_Init>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084ac:	f7f8 fdb4 	bl	8001018 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084b0:	4806      	ldr	r0, [pc, #24]	; (80084cc <USBH_LL_Init+0x74>)
 80084b2:	f7f9 ff4a 	bl	800234a <HAL_HCD_GetCurrentFrame>
 80084b6:	4603      	mov	r3, r0
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7fe ff60 	bl	8007380 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	20000794 	.word	0x20000794

080084d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7f9 feb9 	bl	800225e <HAL_HCD_Start>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 f95c 	bl	80087b0 <USBH_Get_USB_Status>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800851c:	4618      	mov	r0, r3
 800851e:	f7f9 fec1 	bl	80022a4 <HAL_HCD_Stop>
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f941 	bl	80087b0 <USBH_Get_USB_Status>
 800852e:	4603      	mov	r3, r0
 8008530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008532:	7bbb      	ldrb	r3, [r7, #14]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008544:	2301      	movs	r3, #1
 8008546:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800854e:	4618      	mov	r0, r3
 8008550:	f7f9 ff09 	bl	8002366 <HAL_HCD_GetCurrentSpeed>
 8008554:	4603      	mov	r3, r0
 8008556:	2b02      	cmp	r3, #2
 8008558:	d00c      	beq.n	8008574 <USBH_LL_GetSpeed+0x38>
 800855a:	2b02      	cmp	r3, #2
 800855c:	d80d      	bhi.n	800857a <USBH_LL_GetSpeed+0x3e>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <USBH_LL_GetSpeed+0x2c>
 8008562:	2b01      	cmp	r3, #1
 8008564:	d003      	beq.n	800856e <USBH_LL_GetSpeed+0x32>
 8008566:	e008      	b.n	800857a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]
    break;
 800856c:	e008      	b.n	8008580 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800856e:	2301      	movs	r3, #1
 8008570:	73fb      	strb	r3, [r7, #15]
    break;
 8008572:	e005      	b.n	8008580 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008574:	2302      	movs	r3, #2
 8008576:	73fb      	strb	r3, [r7, #15]
    break;
 8008578:	e002      	b.n	8008580 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800857a:	2301      	movs	r3, #1
 800857c:	73fb      	strb	r3, [r7, #15]
    break;
 800857e:	bf00      	nop
  }
  return  speed;
 8008580:	7bfb      	ldrb	r3, [r7, #15]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7f9 fe9c 	bl	80022de <HAL_HCD_ResetPort>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 f8ff 	bl	80087b0 <USBH_Get_USB_Status>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085d2:	78fa      	ldrb	r2, [r7, #3]
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7f9 fea3 	bl	8002322 <HAL_HCD_HC_GetXferCount>
 80085dc:	4603      	mov	r3, r0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085e6:	b590      	push	{r4, r7, lr}
 80085e8:	b089      	sub	sp, #36	; 0x24
 80085ea:	af04      	add	r7, sp, #16
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	4608      	mov	r0, r1
 80085f0:	4611      	mov	r1, r2
 80085f2:	461a      	mov	r2, r3
 80085f4:	4603      	mov	r3, r0
 80085f6:	70fb      	strb	r3, [r7, #3]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70bb      	strb	r3, [r7, #2]
 80085fc:	4613      	mov	r3, r2
 80085fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800860e:	787c      	ldrb	r4, [r7, #1]
 8008610:	78ba      	ldrb	r2, [r7, #2]
 8008612:	78f9      	ldrb	r1, [r7, #3]
 8008614:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008616:	9302      	str	r3, [sp, #8]
 8008618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	4623      	mov	r3, r4
 8008626:	f7f9 fb07 	bl	8001c38 <HAL_HCD_HC_Init>
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	4618      	mov	r0, r3
 8008632:	f000 f8bd 	bl	80087b0 <USBH_Get_USB_Status>
 8008636:	4603      	mov	r3, r0
 8008638:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800863a:	7bbb      	ldrb	r3, [r7, #14]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	bd90      	pop	{r4, r7, pc}

08008644 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800865e:	78fa      	ldrb	r2, [r7, #3]
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f7f9 fb77 	bl	8001d56 <HAL_HCD_HC_Halt>
 8008668:	4603      	mov	r3, r0
 800866a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	4618      	mov	r0, r3
 8008670:	f000 f89e 	bl	80087b0 <USBH_Get_USB_Status>
 8008674:	4603      	mov	r3, r0
 8008676:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008678:	7bbb      	ldrb	r3, [r7, #14]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008682:	b590      	push	{r4, r7, lr}
 8008684:	b089      	sub	sp, #36	; 0x24
 8008686:	af04      	add	r7, sp, #16
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	4608      	mov	r0, r1
 800868c:	4611      	mov	r1, r2
 800868e:	461a      	mov	r2, r3
 8008690:	4603      	mov	r3, r0
 8008692:	70fb      	strb	r3, [r7, #3]
 8008694:	460b      	mov	r3, r1
 8008696:	70bb      	strb	r3, [r7, #2]
 8008698:	4613      	mov	r3, r2
 800869a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086aa:	787c      	ldrb	r4, [r7, #1]
 80086ac:	78ba      	ldrb	r2, [r7, #2]
 80086ae:	78f9      	ldrb	r1, [r7, #3]
 80086b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086b4:	9303      	str	r3, [sp, #12]
 80086b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086b8:	9302      	str	r3, [sp, #8]
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	4623      	mov	r3, r4
 80086c6:	f7f9 fb69 	bl	8001d9c <HAL_HCD_HC_SubmitRequest>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f000 f86d 	bl	80087b0 <USBH_Get_USB_Status>
 80086d6:	4603      	mov	r3, r0
 80086d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086da:	7bbb      	ldrb	r3, [r7, #14]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd90      	pop	{r4, r7, pc}

080086e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086f6:	78fa      	ldrb	r2, [r7, #3]
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7f9 fdfd 	bl	80022fa <HAL_HCD_HC_GetURBState>
 8008700:	4603      	mov	r3, r0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800871c:	2b01      	cmp	r3, #1
 800871e:	d103      	bne.n	8008728 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f870 	bl	8008808 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008728:	20c8      	movs	r0, #200	; 0xc8
 800872a:	f7f8 ff07 	bl	800153c <HAL_Delay>
  return USBH_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
 8008744:	4613      	mov	r3, r2
 8008746:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800874e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008750:	78fb      	ldrb	r3, [r7, #3]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	212c      	movs	r1, #44	; 0x2c
 8008756:	fb01 f303 	mul.w	r3, r1, r3
 800875a:	4413      	add	r3, r2
 800875c:	333b      	adds	r3, #59	; 0x3b
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d009      	beq.n	8008778 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	212c      	movs	r1, #44	; 0x2c
 800876a:	fb01 f303 	mul.w	r3, r1, r3
 800876e:	4413      	add	r3, r2
 8008770:	3354      	adds	r3, #84	; 0x54
 8008772:	78ba      	ldrb	r2, [r7, #2]
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	e008      	b.n	800878a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008778:	78fb      	ldrb	r3, [r7, #3]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	212c      	movs	r1, #44	; 0x2c
 800877e:	fb01 f303 	mul.w	r3, r1, r3
 8008782:	4413      	add	r3, r2
 8008784:	3355      	adds	r3, #85	; 0x55
 8008786:	78ba      	ldrb	r2, [r7, #2]
 8008788:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7f8 fecb 	bl	800153c <HAL_Delay>
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d817      	bhi.n	80087f4 <USBH_Get_USB_Status+0x44>
 80087c4:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <USBH_Get_USB_Status+0x1c>)
 80087c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ca:	bf00      	nop
 80087cc:	080087dd 	.word	0x080087dd
 80087d0:	080087e3 	.word	0x080087e3
 80087d4:	080087e9 	.word	0x080087e9
 80087d8:	080087ef 	.word	0x080087ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
    break;
 80087e0:	e00b      	b.n	80087fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80087e2:	2302      	movs	r3, #2
 80087e4:	73fb      	strb	r3, [r7, #15]
    break;
 80087e6:	e008      	b.n	80087fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
    break;
 80087ec:	e005      	b.n	80087fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80087ee:	2302      	movs	r3, #2
 80087f0:	73fb      	strb	r3, [r7, #15]
    break;
 80087f2:	e002      	b.n	80087fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80087f4:	2302      	movs	r3, #2
 80087f6:	73fb      	strb	r3, [r7, #15]
    break;
 80087f8:	bf00      	nop
  }
  return usb_status;
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	4603      	mov	r3, r0
 8008810:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]
 8008820:	e001      	b.n	8008826 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008822:	2301      	movs	r3, #1
 8008824:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	461a      	mov	r2, r3
 800882a:	2101      	movs	r1, #1
 800882c:	4803      	ldr	r0, [pc, #12]	; (800883c <MX_DriverVbusFS+0x34>)
 800882e:	f7f9 f96f 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8008832:	bf00      	nop
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	40020800 	.word	0x40020800

08008840 <__errno>:
 8008840:	4b01      	ldr	r3, [pc, #4]	; (8008848 <__errno+0x8>)
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	200001a0 	.word	0x200001a0

0800884c <__libc_init_array>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	4d0d      	ldr	r5, [pc, #52]	; (8008884 <__libc_init_array+0x38>)
 8008850:	4c0d      	ldr	r4, [pc, #52]	; (8008888 <__libc_init_array+0x3c>)
 8008852:	1b64      	subs	r4, r4, r5
 8008854:	10a4      	asrs	r4, r4, #2
 8008856:	2600      	movs	r6, #0
 8008858:	42a6      	cmp	r6, r4
 800885a:	d109      	bne.n	8008870 <__libc_init_array+0x24>
 800885c:	4d0b      	ldr	r5, [pc, #44]	; (800888c <__libc_init_array+0x40>)
 800885e:	4c0c      	ldr	r4, [pc, #48]	; (8008890 <__libc_init_array+0x44>)
 8008860:	f000 f92e 	bl	8008ac0 <_init>
 8008864:	1b64      	subs	r4, r4, r5
 8008866:	10a4      	asrs	r4, r4, #2
 8008868:	2600      	movs	r6, #0
 800886a:	42a6      	cmp	r6, r4
 800886c:	d105      	bne.n	800887a <__libc_init_array+0x2e>
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	f855 3b04 	ldr.w	r3, [r5], #4
 8008874:	4798      	blx	r3
 8008876:	3601      	adds	r6, #1
 8008878:	e7ee      	b.n	8008858 <__libc_init_array+0xc>
 800887a:	f855 3b04 	ldr.w	r3, [r5], #4
 800887e:	4798      	blx	r3
 8008880:	3601      	adds	r6, #1
 8008882:	e7f2      	b.n	800886a <__libc_init_array+0x1e>
 8008884:	08008afc 	.word	0x08008afc
 8008888:	08008afc 	.word	0x08008afc
 800888c:	08008afc 	.word	0x08008afc
 8008890:	08008b00 	.word	0x08008b00

08008894 <malloc>:
 8008894:	4b02      	ldr	r3, [pc, #8]	; (80088a0 <malloc+0xc>)
 8008896:	4601      	mov	r1, r0
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	f000 b87f 	b.w	800899c <_malloc_r>
 800889e:	bf00      	nop
 80088a0:	200001a0 	.word	0x200001a0

080088a4 <free>:
 80088a4:	4b02      	ldr	r3, [pc, #8]	; (80088b0 <free+0xc>)
 80088a6:	4601      	mov	r1, r0
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	f000 b80b 	b.w	80088c4 <_free_r>
 80088ae:	bf00      	nop
 80088b0:	200001a0 	.word	0x200001a0

080088b4 <memset>:
 80088b4:	4402      	add	r2, r0
 80088b6:	4603      	mov	r3, r0
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d100      	bne.n	80088be <memset+0xa>
 80088bc:	4770      	bx	lr
 80088be:	f803 1b01 	strb.w	r1, [r3], #1
 80088c2:	e7f9      	b.n	80088b8 <memset+0x4>

080088c4 <_free_r>:
 80088c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088c6:	2900      	cmp	r1, #0
 80088c8:	d044      	beq.n	8008954 <_free_r+0x90>
 80088ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ce:	9001      	str	r0, [sp, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f1a1 0404 	sub.w	r4, r1, #4
 80088d6:	bfb8      	it	lt
 80088d8:	18e4      	addlt	r4, r4, r3
 80088da:	f000 f8e3 	bl	8008aa4 <__malloc_lock>
 80088de:	4a1e      	ldr	r2, [pc, #120]	; (8008958 <_free_r+0x94>)
 80088e0:	9801      	ldr	r0, [sp, #4]
 80088e2:	6813      	ldr	r3, [r2, #0]
 80088e4:	b933      	cbnz	r3, 80088f4 <_free_r+0x30>
 80088e6:	6063      	str	r3, [r4, #4]
 80088e8:	6014      	str	r4, [r2, #0]
 80088ea:	b003      	add	sp, #12
 80088ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088f0:	f000 b8de 	b.w	8008ab0 <__malloc_unlock>
 80088f4:	42a3      	cmp	r3, r4
 80088f6:	d908      	bls.n	800890a <_free_r+0x46>
 80088f8:	6825      	ldr	r5, [r4, #0]
 80088fa:	1961      	adds	r1, r4, r5
 80088fc:	428b      	cmp	r3, r1
 80088fe:	bf01      	itttt	eq
 8008900:	6819      	ldreq	r1, [r3, #0]
 8008902:	685b      	ldreq	r3, [r3, #4]
 8008904:	1949      	addeq	r1, r1, r5
 8008906:	6021      	streq	r1, [r4, #0]
 8008908:	e7ed      	b.n	80088e6 <_free_r+0x22>
 800890a:	461a      	mov	r2, r3
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	b10b      	cbz	r3, 8008914 <_free_r+0x50>
 8008910:	42a3      	cmp	r3, r4
 8008912:	d9fa      	bls.n	800890a <_free_r+0x46>
 8008914:	6811      	ldr	r1, [r2, #0]
 8008916:	1855      	adds	r5, r2, r1
 8008918:	42a5      	cmp	r5, r4
 800891a:	d10b      	bne.n	8008934 <_free_r+0x70>
 800891c:	6824      	ldr	r4, [r4, #0]
 800891e:	4421      	add	r1, r4
 8008920:	1854      	adds	r4, r2, r1
 8008922:	42a3      	cmp	r3, r4
 8008924:	6011      	str	r1, [r2, #0]
 8008926:	d1e0      	bne.n	80088ea <_free_r+0x26>
 8008928:	681c      	ldr	r4, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	6053      	str	r3, [r2, #4]
 800892e:	4421      	add	r1, r4
 8008930:	6011      	str	r1, [r2, #0]
 8008932:	e7da      	b.n	80088ea <_free_r+0x26>
 8008934:	d902      	bls.n	800893c <_free_r+0x78>
 8008936:	230c      	movs	r3, #12
 8008938:	6003      	str	r3, [r0, #0]
 800893a:	e7d6      	b.n	80088ea <_free_r+0x26>
 800893c:	6825      	ldr	r5, [r4, #0]
 800893e:	1961      	adds	r1, r4, r5
 8008940:	428b      	cmp	r3, r1
 8008942:	bf04      	itt	eq
 8008944:	6819      	ldreq	r1, [r3, #0]
 8008946:	685b      	ldreq	r3, [r3, #4]
 8008948:	6063      	str	r3, [r4, #4]
 800894a:	bf04      	itt	eq
 800894c:	1949      	addeq	r1, r1, r5
 800894e:	6021      	streq	r1, [r4, #0]
 8008950:	6054      	str	r4, [r2, #4]
 8008952:	e7ca      	b.n	80088ea <_free_r+0x26>
 8008954:	b003      	add	sp, #12
 8008956:	bd30      	pop	{r4, r5, pc}
 8008958:	20000a98 	.word	0x20000a98

0800895c <sbrk_aligned>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	4e0e      	ldr	r6, [pc, #56]	; (8008998 <sbrk_aligned+0x3c>)
 8008960:	460c      	mov	r4, r1
 8008962:	6831      	ldr	r1, [r6, #0]
 8008964:	4605      	mov	r5, r0
 8008966:	b911      	cbnz	r1, 800896e <sbrk_aligned+0x12>
 8008968:	f000 f88c 	bl	8008a84 <_sbrk_r>
 800896c:	6030      	str	r0, [r6, #0]
 800896e:	4621      	mov	r1, r4
 8008970:	4628      	mov	r0, r5
 8008972:	f000 f887 	bl	8008a84 <_sbrk_r>
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	d00a      	beq.n	8008990 <sbrk_aligned+0x34>
 800897a:	1cc4      	adds	r4, r0, #3
 800897c:	f024 0403 	bic.w	r4, r4, #3
 8008980:	42a0      	cmp	r0, r4
 8008982:	d007      	beq.n	8008994 <sbrk_aligned+0x38>
 8008984:	1a21      	subs	r1, r4, r0
 8008986:	4628      	mov	r0, r5
 8008988:	f000 f87c 	bl	8008a84 <_sbrk_r>
 800898c:	3001      	adds	r0, #1
 800898e:	d101      	bne.n	8008994 <sbrk_aligned+0x38>
 8008990:	f04f 34ff 	mov.w	r4, #4294967295
 8008994:	4620      	mov	r0, r4
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	20000a9c 	.word	0x20000a9c

0800899c <_malloc_r>:
 800899c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a0:	1ccd      	adds	r5, r1, #3
 80089a2:	f025 0503 	bic.w	r5, r5, #3
 80089a6:	3508      	adds	r5, #8
 80089a8:	2d0c      	cmp	r5, #12
 80089aa:	bf38      	it	cc
 80089ac:	250c      	movcc	r5, #12
 80089ae:	2d00      	cmp	r5, #0
 80089b0:	4607      	mov	r7, r0
 80089b2:	db01      	blt.n	80089b8 <_malloc_r+0x1c>
 80089b4:	42a9      	cmp	r1, r5
 80089b6:	d905      	bls.n	80089c4 <_malloc_r+0x28>
 80089b8:	230c      	movs	r3, #12
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	2600      	movs	r6, #0
 80089be:	4630      	mov	r0, r6
 80089c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c4:	4e2e      	ldr	r6, [pc, #184]	; (8008a80 <_malloc_r+0xe4>)
 80089c6:	f000 f86d 	bl	8008aa4 <__malloc_lock>
 80089ca:	6833      	ldr	r3, [r6, #0]
 80089cc:	461c      	mov	r4, r3
 80089ce:	bb34      	cbnz	r4, 8008a1e <_malloc_r+0x82>
 80089d0:	4629      	mov	r1, r5
 80089d2:	4638      	mov	r0, r7
 80089d4:	f7ff ffc2 	bl	800895c <sbrk_aligned>
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	4604      	mov	r4, r0
 80089dc:	d14d      	bne.n	8008a7a <_malloc_r+0xde>
 80089de:	6834      	ldr	r4, [r6, #0]
 80089e0:	4626      	mov	r6, r4
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	d140      	bne.n	8008a68 <_malloc_r+0xcc>
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	4631      	mov	r1, r6
 80089ea:	4638      	mov	r0, r7
 80089ec:	eb04 0803 	add.w	r8, r4, r3
 80089f0:	f000 f848 	bl	8008a84 <_sbrk_r>
 80089f4:	4580      	cmp	r8, r0
 80089f6:	d13a      	bne.n	8008a6e <_malloc_r+0xd2>
 80089f8:	6821      	ldr	r1, [r4, #0]
 80089fa:	3503      	adds	r5, #3
 80089fc:	1a6d      	subs	r5, r5, r1
 80089fe:	f025 0503 	bic.w	r5, r5, #3
 8008a02:	3508      	adds	r5, #8
 8008a04:	2d0c      	cmp	r5, #12
 8008a06:	bf38      	it	cc
 8008a08:	250c      	movcc	r5, #12
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	f7ff ffa5 	bl	800895c <sbrk_aligned>
 8008a12:	3001      	adds	r0, #1
 8008a14:	d02b      	beq.n	8008a6e <_malloc_r+0xd2>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	442b      	add	r3, r5
 8008a1a:	6023      	str	r3, [r4, #0]
 8008a1c:	e00e      	b.n	8008a3c <_malloc_r+0xa0>
 8008a1e:	6822      	ldr	r2, [r4, #0]
 8008a20:	1b52      	subs	r2, r2, r5
 8008a22:	d41e      	bmi.n	8008a62 <_malloc_r+0xc6>
 8008a24:	2a0b      	cmp	r2, #11
 8008a26:	d916      	bls.n	8008a56 <_malloc_r+0xba>
 8008a28:	1961      	adds	r1, r4, r5
 8008a2a:	42a3      	cmp	r3, r4
 8008a2c:	6025      	str	r5, [r4, #0]
 8008a2e:	bf18      	it	ne
 8008a30:	6059      	strne	r1, [r3, #4]
 8008a32:	6863      	ldr	r3, [r4, #4]
 8008a34:	bf08      	it	eq
 8008a36:	6031      	streq	r1, [r6, #0]
 8008a38:	5162      	str	r2, [r4, r5]
 8008a3a:	604b      	str	r3, [r1, #4]
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f104 060b 	add.w	r6, r4, #11
 8008a42:	f000 f835 	bl	8008ab0 <__malloc_unlock>
 8008a46:	f026 0607 	bic.w	r6, r6, #7
 8008a4a:	1d23      	adds	r3, r4, #4
 8008a4c:	1af2      	subs	r2, r6, r3
 8008a4e:	d0b6      	beq.n	80089be <_malloc_r+0x22>
 8008a50:	1b9b      	subs	r3, r3, r6
 8008a52:	50a3      	str	r3, [r4, r2]
 8008a54:	e7b3      	b.n	80089be <_malloc_r+0x22>
 8008a56:	6862      	ldr	r2, [r4, #4]
 8008a58:	42a3      	cmp	r3, r4
 8008a5a:	bf0c      	ite	eq
 8008a5c:	6032      	streq	r2, [r6, #0]
 8008a5e:	605a      	strne	r2, [r3, #4]
 8008a60:	e7ec      	b.n	8008a3c <_malloc_r+0xa0>
 8008a62:	4623      	mov	r3, r4
 8008a64:	6864      	ldr	r4, [r4, #4]
 8008a66:	e7b2      	b.n	80089ce <_malloc_r+0x32>
 8008a68:	4634      	mov	r4, r6
 8008a6a:	6876      	ldr	r6, [r6, #4]
 8008a6c:	e7b9      	b.n	80089e2 <_malloc_r+0x46>
 8008a6e:	230c      	movs	r3, #12
 8008a70:	603b      	str	r3, [r7, #0]
 8008a72:	4638      	mov	r0, r7
 8008a74:	f000 f81c 	bl	8008ab0 <__malloc_unlock>
 8008a78:	e7a1      	b.n	80089be <_malloc_r+0x22>
 8008a7a:	6025      	str	r5, [r4, #0]
 8008a7c:	e7de      	b.n	8008a3c <_malloc_r+0xa0>
 8008a7e:	bf00      	nop
 8008a80:	20000a98 	.word	0x20000a98

08008a84 <_sbrk_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d06      	ldr	r5, [pc, #24]	; (8008aa0 <_sbrk_r+0x1c>)
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	602b      	str	r3, [r5, #0]
 8008a90:	f7f8 fbbe 	bl	8001210 <_sbrk>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d102      	bne.n	8008a9e <_sbrk_r+0x1a>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	b103      	cbz	r3, 8008a9e <_sbrk_r+0x1a>
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	20000aa0 	.word	0x20000aa0

08008aa4 <__malloc_lock>:
 8008aa4:	4801      	ldr	r0, [pc, #4]	; (8008aac <__malloc_lock+0x8>)
 8008aa6:	f000 b809 	b.w	8008abc <__retarget_lock_acquire_recursive>
 8008aaa:	bf00      	nop
 8008aac:	20000aa4 	.word	0x20000aa4

08008ab0 <__malloc_unlock>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	; (8008ab8 <__malloc_unlock+0x8>)
 8008ab2:	f000 b804 	b.w	8008abe <__retarget_lock_release_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	20000aa4 	.word	0x20000aa4

08008abc <__retarget_lock_acquire_recursive>:
 8008abc:	4770      	bx	lr

08008abe <__retarget_lock_release_recursive>:
 8008abe:	4770      	bx	lr

08008ac0 <_init>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	bf00      	nop
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr

08008acc <_fini>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	bf00      	nop
 8008ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad2:	bc08      	pop	{r3}
 8008ad4:	469e      	mov	lr, r3
 8008ad6:	4770      	bx	lr
