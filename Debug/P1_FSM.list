
P1_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000935c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009500  08009500  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009500  08009500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009508  08009508  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009508  08009508  00019508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800950c  0800950c  0001950c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000008ec  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ac0  20000ac0  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c7cd  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000459c  00000000  00000000  0003c9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e0  00000000  00000000  00040f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f0  00000000  00000000  00042750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ba9  00000000  00000000  00043d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4cc  00000000  00000000  000698e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3efc  00000000  00000000  00088db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015ccb1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006600  00000000  00000000  0015cd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d4 	.word	0x200001d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080094cc 	.word	0x080094cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d8 	.word	0x200001d8
 80001c4:	080094cc 	.word	0x080094cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <fsm_new>:
#include <stdlib.h>
#include "fsm.h"

fsm_t*
fsm_new (fsm_trans_t* tt)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 80004d4:	2008      	movs	r0, #8
 80004d6:	f008 fee3 	bl	80092a0 <malloc>
 80004da:	4603      	mov	r3, r0
 80004dc:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f000 f805 	bl	80004f0 <fsm_init>
  return this;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <fsm_init>:

void
fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  this->current_state=0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
  this->tt = tt;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	605a      	str	r2, [r3, #4]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <fsm_fire>:

void
fsm_fire (fsm_t* this)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b084      	sub	sp, #16
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e01c      	b.n	800055c <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	429a      	cmp	r2, r3
 800052c:	d113      	bne.n	8000556 <fsm_fire+0x44>
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	4798      	blx	r3
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d00c      	beq.n	8000556 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00c      	beq.n	8000566 <fsm_fire+0x54>
        t->out(this);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	4798      	blx	r3
      break;
 8000554:	e007      	b.n	8000566 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3310      	adds	r3, #16
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	dade      	bge.n	8000522 <fsm_fire+0x10>
    }
  }
}
 8000564:	e000      	b.n	8000568 <fsm_fire+0x56>
      break;
 8000566:	bf00      	nop
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	4b71      	ldr	r3, [pc, #452]	; (8000750 <MX_GPIO_Init+0x1e0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a70      	ldr	r2, [pc, #448]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b6e      	ldr	r3, [pc, #440]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0310 	and.w	r3, r3, #16
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	4b6a      	ldr	r3, [pc, #424]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a69      	ldr	r2, [pc, #420]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b67      	ldr	r3, [pc, #412]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b63      	ldr	r3, [pc, #396]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a62      	ldr	r2, [pc, #392]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b60      	ldr	r3, [pc, #384]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b5c      	ldr	r3, [pc, #368]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a5b      	ldr	r2, [pc, #364]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b59      	ldr	r3, [pc, #356]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b55      	ldr	r3, [pc, #340]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a54      	ldr	r2, [pc, #336]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b52      	ldr	r3, [pc, #328]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b4e      	ldr	r3, [pc, #312]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a4d      	ldr	r2, [pc, #308]	; (8000750 <MX_GPIO_Init+0x1e0>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	4848      	ldr	r0, [pc, #288]	; (8000754 <MX_GPIO_Init+0x1e4>)
 8000634:	f001 faf4 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	4846      	ldr	r0, [pc, #280]	; (8000758 <MX_GPIO_Init+0x1e8>)
 800063e:	f001 faef 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	2200      	movs	r2, #0
 8000644:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000648:	4844      	ldr	r0, [pc, #272]	; (800075c <MX_GPIO_Init+0x1ec>)
 800064a:	f001 fae9 	bl	8001c20 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800064e:	2308      	movs	r3, #8
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	483b      	ldr	r0, [pc, #236]	; (8000754 <MX_GPIO_Init+0x1e4>)
 8000666:	f001 f927 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800066a:	2301      	movs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4835      	ldr	r0, [pc, #212]	; (8000758 <MX_GPIO_Init+0x1e8>)
 8000682:	f001 f919 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000686:	2308      	movs	r3, #8
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000696:	2305      	movs	r3, #5
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	482d      	ldr	r0, [pc, #180]	; (8000758 <MX_GPIO_Init+0x1e8>)
 80006a2:	f001 f909 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006a6:	230e      	movs	r3, #14
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4829      	ldr	r0, [pc, #164]	; (8000760 <MX_GPIO_Init+0x1f0>)
 80006ba:	f001 f8fd 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006be:	2304      	movs	r3, #4
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	4824      	ldr	r0, [pc, #144]	; (8000764 <MX_GPIO_Init+0x1f4>)
 80006d2:	f001 f8f1 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006e8:	2305      	movs	r3, #5
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	481c      	ldr	r0, [pc, #112]	; (8000764 <MX_GPIO_Init+0x1f4>)
 80006f4:	f001 f8e0 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006f8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <MX_GPIO_Init+0x1ec>)
 8000712:	f001 f8d1 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000716:	2320      	movs	r3, #32
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_GPIO_Init+0x1ec>)
 800072a:	f001 f8c5 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800072e:	2302      	movs	r3, #2
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000732:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_GPIO_Init+0x1e4>)
 8000744:	f001 f8b8 	bl	80018b8 <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3730      	adds	r7, #48	; 0x30
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40021000 	.word	0x40021000
 8000758:	40020800 	.word	0x40020800
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40020000 	.word	0x40020000
 8000764:	40020400 	.word	0x40020400

08000768 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_I2C1_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x58>)
 8000776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a6:	f002 fe5f 	bl	8003468 <HAL_I2C_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 fc16 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200001f0 	.word	0x200001f0
 80007bc:	40005400 	.word	0x40005400
 80007c0:	000186a0 	.word	0x000186a0

080007c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a19      	ldr	r2, [pc, #100]	; (8000848 <HAL_I2C_MspInit+0x84>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d12c      	bne.n	8000840 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <HAL_I2C_MspInit+0x88>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <HAL_I2C_MspInit+0x88>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_I2C_MspInit+0x88>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000802:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000808:	2312      	movs	r3, #18
 800080a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080c:	2301      	movs	r3, #1
 800080e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000814:	2304      	movs	r3, #4
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	480c      	ldr	r0, [pc, #48]	; (8000850 <HAL_I2C_MspInit+0x8c>)
 8000820:	f001 f84a 	bl	80018b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_I2C_MspInit+0x88>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <HAL_I2C_MspInit+0x88>)
 800082e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_I2C_MspInit+0x88>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40005400 	.word	0x40005400
 800084c:	40023800 	.word	0x40023800
 8000850:	40020400 	.word	0x40020400

08000854 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_I2S3_Init+0x54>)
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <MX_I2S3_Init+0x58>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000864:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2S3_Init+0x54>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000878:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_I2S3_Init+0x54>)
 800087c:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <MX_I2S3_Init+0x5c>)
 800087e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2S3_Init+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000894:	f002 ff2c 	bl	80036f0 <HAL_I2S_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800089e:	f000 fb9f 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000244 	.word	0x20000244
 80008ac:	40003c00 	.word	0x40003c00
 80008b0:	00017700 	.word	0x00017700

080008b4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	; 0x38
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a31      	ldr	r2, [pc, #196]	; (80009a4 <HAL_I2S_MspInit+0xf0>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d15a      	bne.n	800099a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008e4:	2301      	movs	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008e8:	23c0      	movs	r3, #192	; 0xc0
 80008ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 f81f 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000900:	f000 fb6e 	bl	8000fe0 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800090e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a18      	ldr	r2, [pc, #96]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000958:	2310      	movs	r3, #16
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000968:	2306      	movs	r3, #6
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	480e      	ldr	r0, [pc, #56]	; (80009ac <HAL_I2S_MspInit+0xf8>)
 8000974:	f000 ffa0 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000978:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098a:	2306      	movs	r3, #6
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <HAL_I2S_MspInit+0xfc>)
 8000996:	f000 ff8f 	bl	80018b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800099a:	bf00      	nop
 800099c:	3738      	adds	r7, #56	; 0x38
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40003c00 	.word	0x40003c00
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020800 	.word	0x40020800

080009b4 <boton_presionado>:

//salidas
static uint8_t faultx=0, faulty=0, faultz=0, led_azul=0;

//funciones de transicion
static int boton_presionado (fsm_t* this) { if (timer_boton && boton) return 1; else return 0; }
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <boton_presionado+0x2c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d005      	beq.n	80009d0 <boton_presionado+0x1c>
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <boton_presionado+0x30>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <boton_presionado+0x1c>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e000      	b.n	80009d2 <boton_presionado+0x1e>
 80009d0:	2300      	movs	r3, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000000 	.word	0x20000000
 80009e4:	2000028c 	.word	0x2000028c

080009e8 <boton_no_presionado>:
static int boton_no_presionado (fsm_t* this) { if (timer_boton && !boton) return 1; else return 0; }
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <boton_no_presionado+0x2c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d005      	beq.n	8000a04 <boton_no_presionado+0x1c>
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <boton_no_presionado+0x30>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d101      	bne.n	8000a04 <boton_no_presionado+0x1c>
 8000a00:	2301      	movs	r3, #1
 8000a02:	e000      	b.n	8000a06 <boton_no_presionado+0x1e>
 8000a04:	2300      	movs	r3, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000000 	.word	0x20000000
 8000a18:	2000028c 	.word	0x2000028c

08000a1c <sensorx_on>:

static int sensorx_on (fsm_t* this) { return sensorx; }
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <sensorx_on+0x18>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	2000028d 	.word	0x2000028d

08000a38 <sensory_on>:
static int sensory_on (fsm_t* this) { return sensory; }
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <sensory_on+0x18>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	2000028e 	.word	0x2000028e

08000a54 <sensorz_on>:
static int sensorz_on (fsm_t* this) { return sensorz; }
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <sensorz_on+0x18>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	2000028f 	.word	0x2000028f

08000a70 <activado_on>:

static int activado_on (fsm_t* this) { if (timer_lectura && activado) return 1; else return 0; }
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <activado_on+0x2c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d005      	beq.n	8000a8c <activado_on+0x1c>
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <activado_on+0x30>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <activado_on+0x1c>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e000      	b.n	8000a8e <activado_on+0x1e>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000290 	.word	0x20000290
 8000aa0:	20000292 	.word	0x20000292

08000aa4 <activado_off>:
static int activado_off (fsm_t* this) { if (!timer_lectura || !activado) return 1; else return 0; }
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <activado_off+0x2c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <activado_off+0x18>
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <activado_off+0x30>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <activado_off+0x1c>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e000      	b.n	8000ac2 <activado_off+0x1e>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000290 	.word	0x20000290
 8000ad4:	20000292 	.word	0x20000292

08000ad8 <activado_on_led>:
static int activado_on_led (fsm_t* this) { if (timer_led && activado) return 1; else return 0; }
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <activado_on_led+0x2c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d005      	beq.n	8000af4 <activado_on_led+0x1c>
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <activado_on_led+0x30>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <activado_on_led+0x1c>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <activado_on_led+0x1e>
 8000af4:	2300      	movs	r3, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000291 	.word	0x20000291
 8000b08:	20000292 	.word	0x20000292

08000b0c <activado_off_led>:
static int activado_off_led (fsm_t* this) { if (!timer_led||!activado) return 1; else return 0; }
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <activado_off_led+0x2c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <activado_off_led+0x18>
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <activado_off_led+0x30>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <activado_off_led+0x1c>
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <activado_off_led+0x1e>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000291 	.word	0x20000291
 8000b3c:	20000292 	.word	0x20000292

08000b40 <defecto>:

static int defecto (fsm_t* this)  {return 1;}
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <activacion>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void activacion (fsm_t* this)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  activado = 1;
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <activacion+0x1c>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000292 	.word	0x20000292

08000b78 <desactivacion>:

static void desactivacion (fsm_t* this)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  activado = 0;
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <desactivacion+0x1c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000292 	.word	0x20000292

08000b98 <lectura_x>:

static void lectura_x (fsm_t* this)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  faultx = 1;
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <lectura_x+0x1c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000293 	.word	0x20000293

08000bb8 <lectura_y>:

static void lectura_y (fsm_t* this)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  faulty = 1;
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <lectura_y+0x1c>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000294 	.word	0x20000294

08000bd8 <lectura_z>:

static void lectura_z (fsm_t* this)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  faultz = 1;
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <lectura_z+0x1c>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000295 	.word	0x20000295

08000bf8 <lectura_x_fin>:

static void lectura_x_fin (fsm_t* this)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  faultx = 0;
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <lectura_x_fin+0x1c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000293 	.word	0x20000293

08000c18 <lectura_y_fin>:

static void lectura_y_fin (fsm_t* this)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  faulty = 0;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <lectura_y_fin+0x1c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000294 	.word	0x20000294

08000c38 <lectura_z_fin>:

static void lectura_z_fin (fsm_t* this)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  faultz = 0;
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <lectura_z_fin+0x1c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000295 	.word	0x20000295

08000c58 <led_activado>:

static void led_activado (fsm_t* this)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  led_azul = 1;
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <led_activado+0x1c>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000296 	.word	0x20000296

08000c78 <led_no_activado>:

static void led_no_activado (fsm_t* this)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  led_azul = 0;
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <led_no_activado+0x1c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000296 	.word	0x20000296

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9e:	f000 fc63 	bl	8001568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca2:	f000 f8d1 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca6:	f7ff fc63 	bl	8000570 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000caa:	f7ff fd5d 	bl	8000768 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000cae:	f7ff fdd1 	bl	8000854 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000cb2:	f000 f99b 	bl	8000fec <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000cb6:	f007 ffc1 	bl	8008c3c <MX_USB_HOST_Init>
  MX_TIM6_Init();
 8000cba:	f000 fb47 	bl	800134c <MX_TIM6_Init>
  MX_TIM10_Init();
 8000cbe:	f000 fb7b 	bl	80013b8 <MX_TIM10_Init>
  MX_TIM2_Init();
 8000cc2:	f000 fad3 	bl	800126c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Temporizadores
  HAL_TIM_Base_Start_IT(&htim6); //Temporizador del led azul
 8000cc6:	484f      	ldr	r0, [pc, #316]	; (8000e04 <main+0x16c>)
 8000cc8:	f004 f84e 	bl	8004d68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10); //Temporizador para hacer las lecturas
 8000ccc:	484e      	ldr	r0, [pc, #312]	; (8000e08 <main+0x170>)
 8000cce:	f004 f84b 	bl	8004d68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1); //Temporizador boton
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	484d      	ldr	r0, [pc, #308]	; (8000e0c <main+0x174>)
 8000cd6:	f004 f911 	bl	8004efc <HAL_TIM_IC_Start_IT>

  //Creación de las FSM
  fsm_t* fsm_inicio = fsm_new (inicio);
 8000cda:	484d      	ldr	r0, [pc, #308]	; (8000e10 <main+0x178>)
 8000cdc:	f7ff fbf6 	bl	80004cc <fsm_new>
 8000ce0:	6178      	str	r0, [r7, #20]
  fsm_t* fsm_lectura_x = fsm_new (lecturax);
 8000ce2:	484c      	ldr	r0, [pc, #304]	; (8000e14 <main+0x17c>)
 8000ce4:	f7ff fbf2 	bl	80004cc <fsm_new>
 8000ce8:	6138      	str	r0, [r7, #16]
  fsm_t* fsm_lectura_y = fsm_new (lecturay);
 8000cea:	484b      	ldr	r0, [pc, #300]	; (8000e18 <main+0x180>)
 8000cec:	f7ff fbee 	bl	80004cc <fsm_new>
 8000cf0:	60f8      	str	r0, [r7, #12]
  fsm_t* fsm_lectura_z = fsm_new (lecturaz);
 8000cf2:	484a      	ldr	r0, [pc, #296]	; (8000e1c <main+0x184>)
 8000cf4:	f7ff fbea 	bl	80004cc <fsm_new>
 8000cf8:	60b8      	str	r0, [r7, #8]
  fsm_t* fsm_led_activo = fsm_new (led_activo);
 8000cfa:	4849      	ldr	r0, [pc, #292]	; (8000e20 <main+0x188>)
 8000cfc:	f7ff fbe6 	bl	80004cc <fsm_new>
 8000d00:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d02:	f007 ffc1 	bl	8008c88 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    fsm_fire (fsm_inicio);
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff fc03 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_x);
 8000d0c:	6938      	ldr	r0, [r7, #16]
 8000d0e:	f7ff fc00 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_y);
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f7ff fbfd 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_z);
 8000d18:	68b8      	ldr	r0, [r7, #8]
 8000d1a:	f7ff fbfa 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_led_activo);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff fbf7 	bl	8000512 <fsm_fire>

    //LED SISTEMA ENCENDIDO
    if(led_azul)
 8000d24:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <main+0x18c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d006      	beq.n	8000d3a <main+0xa2>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d32:	483d      	ldr	r0, [pc, #244]	; (8000e28 <main+0x190>)
 8000d34:	f000 ff74 	bl	8001c20 <HAL_GPIO_WritePin>
 8000d38:	e005      	b.n	8000d46 <main+0xae>
    else
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d40:	4839      	ldr	r0, [pc, #228]	; (8000e28 <main+0x190>)
 8000d42:	f000 ff6d 	bl	8001c20 <HAL_GPIO_WritePin>

    //LEDS SENSORES
    if(faultx)
 8000d46:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <main+0x194>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d006      	beq.n	8000d5c <main+0xc4>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d54:	4834      	ldr	r0, [pc, #208]	; (8000e28 <main+0x190>)
 8000d56:	f000 ff63 	bl	8001c20 <HAL_GPIO_WritePin>
 8000d5a:	e005      	b.n	8000d68 <main+0xd0>
    else
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d62:	4831      	ldr	r0, [pc, #196]	; (8000e28 <main+0x190>)
 8000d64:	f000 ff5c 	bl	8001c20 <HAL_GPIO_WritePin>
    if(faulty)
 8000d68:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <main+0x198>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <main+0xe6>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d76:	482c      	ldr	r0, [pc, #176]	; (8000e28 <main+0x190>)
 8000d78:	f000 ff52 	bl	8001c20 <HAL_GPIO_WritePin>
 8000d7c:	e005      	b.n	8000d8a <main+0xf2>
    else
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d84:	4828      	ldr	r0, [pc, #160]	; (8000e28 <main+0x190>)
 8000d86:	f000 ff4b 	bl	8001c20 <HAL_GPIO_WritePin>
    if(faultz)
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <main+0x19c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d006      	beq.n	8000da0 <main+0x108>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d98:	4823      	ldr	r0, [pc, #140]	; (8000e28 <main+0x190>)
 8000d9a:	f000 ff41 	bl	8001c20 <HAL_GPIO_WritePin>
 8000d9e:	e005      	b.n	8000dac <main+0x114>
    else
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da6:	4820      	ldr	r0, [pc, #128]	; (8000e28 <main+0x190>)
 8000da8:	f000 ff3a 	bl	8001c20 <HAL_GPIO_WritePin>

    //LECTURA SENSORES
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000dac:	2102      	movs	r1, #2
 8000dae:	4822      	ldr	r0, [pc, #136]	; (8000e38 <main+0x1a0>)
 8000db0:	f000 ff1e 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <main+0x12a>
    	sensorx = 1;
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <main+0x1a4>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e002      	b.n	8000dc8 <main+0x130>
    else
    	sensorx = 0;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <main+0x1a4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000dc8:	2104      	movs	r1, #4
 8000dca:	481b      	ldr	r0, [pc, #108]	; (8000e38 <main+0x1a0>)
 8000dcc:	f000 ff10 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <main+0x146>
       	sensory = 1;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <main+0x1a8>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e002      	b.n	8000de4 <main+0x14c>
    else
		sensory = 0;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <main+0x1a8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000de4:	2108      	movs	r1, #8
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <main+0x1a0>)
 8000de8:	f000 ff02 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <main+0x162>
       	sensorz = 1;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <main+0x1ac>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	e783      	b.n	8000d02 <main+0x6a>
    else
		sensorz = 0;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <main+0x1ac>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000e00:	e77f      	b.n	8000d02 <main+0x6a>
 8000e02:	bf00      	nop
 8000e04:	2000033c 	.word	0x2000033c
 8000e08:	20000384 	.word	0x20000384
 8000e0c:	200002f4 	.word	0x200002f4
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20000044 	.word	0x20000044
 8000e18:	20000084 	.word	0x20000084
 8000e1c:	200000c4 	.word	0x200000c4
 8000e20:	20000104 	.word	0x20000104
 8000e24:	20000296 	.word	0x20000296
 8000e28:	40020c00 	.word	0x40020c00
 8000e2c:	20000293 	.word	0x20000293
 8000e30:	20000294 	.word	0x20000294
 8000e34:	20000295 	.word	0x20000295
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	2000028d 	.word	0x2000028d
 8000e40:	2000028e 	.word	0x2000028e
 8000e44:	2000028f 	.word	0x2000028f

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2230      	movs	r2, #48	; 0x30
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f008 fa32 	bl	80092c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ebc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ec0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f107 0320 	add.w	r3, r7, #32
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 f8ae 	bl	8004030 <HAL_RCC_OscConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eda:	f000 f881 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ede:	230f      	movs	r3, #15
 8000ee0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000eea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2105      	movs	r1, #5
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 fb0f 	bl	8004520 <HAL_RCC_ClockConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f08:	f000 f86a 	bl	8000fe0 <Error_Handler>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3750      	adds	r7, #80	; 0x50
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000

08000f1c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	//Comprobar que viene del timer 2
	if (htim->Instance==TIM2){
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2c:	d11b      	bne.n	8000f66 <HAL_TIM_IC_CaptureCallback+0x4a>
		if(boton)
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_TIM_IC_CaptureCallback+0x22>
			boton = 0;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e002      	b.n	8000f44 <HAL_TIM_IC_CaptureCallback+0x28>
		else
			boton = 1;
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GetCounter(htim) > TIEMPO_BOTON)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f4e:	d903      	bls.n	8000f58 <HAL_TIM_IC_CaptureCallback+0x3c>
			timer_boton = 1;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	e002      	b.n	8000f5e <HAL_TIM_IC_CaptureCallback+0x42>
		else
			timer_boton = 0;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SetCounter(htim,0);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2000028c 	.word	0x2000028c
 8000f78:	20000000 	.word	0x20000000

08000f7c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM6)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d10a      	bne.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		if(timer_led)
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x22>
			timer_led = 0;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	e002      	b.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x28>
		else
			timer_led = 1;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance==TIM10)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10a      	bne.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		if(timer_lectura)
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x42>
			timer_lectura = 0;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
		else
			timer_lectura = 1;
	}
}
 8000fbc:	e002      	b.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x48>
			timer_lectura = 1;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	40001000 	.word	0x40001000
 8000fd4:	20000291 	.word	0x20000291
 8000fd8:	40014400 	.word	0x40014400
 8000fdc:	20000290 	.word	0x20000290

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_SPI1_Init+0x64>)
 8000ff2:	4a18      	ldr	r2, [pc, #96]	; (8001054 <MX_SPI1_Init+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_SPI1_Init+0x64>)
 8000ff8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_SPI1_Init+0x64>)
 8001018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_SPI1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_SPI1_Init+0x64>)
 8001038:	220a      	movs	r2, #10
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_SPI1_Init+0x64>)
 800103e:	f003 fdbb 	bl	8004bb8 <HAL_SPI_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001048:	f7ff ffca 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000298 	.word	0x20000298
 8001054:	40013000 	.word	0x40013000

08001058 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_SPI_MspInit+0x84>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d12b      	bne.n	80010d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_SPI_MspInit+0x88>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_SPI_MspInit+0x88>)
 8001084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_SPI_MspInit+0x88>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_SPI_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_SPI_MspInit+0x88>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_SPI_MspInit+0x88>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010b2:	23e0      	movs	r3, #224	; 0xe0
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010c2:	2305      	movs	r3, #5
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <HAL_SPI_MspInit+0x8c>)
 80010ce:	f000 fbf3 	bl	80018b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	; 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40013000 	.word	0x40013000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_MspInit+0x4c>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_MspInit+0x4c>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001126:	2007      	movs	r0, #7
 8001128:	f000 fb84 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800113c:	e7fe      	b.n	800113c <NMI_Handler+0x4>

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001184:	f000 fa42 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001192:	f003 ffdb 	bl	800514c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000384 	.word	0x20000384

080011a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM2_IRQHandler+0x10>)
 80011a6:	f003 ffd1 	bl	800514c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200002f4 	.word	0x200002f4

080011b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <TIM6_DAC_IRQHandler+0x10>)
 80011ba:	f003 ffc7 	bl	800514c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000033c 	.word	0x2000033c

080011c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <OTG_FS_IRQHandler+0x10>)
 80011ce:	f000 ffab 	bl	8002128 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200007ac 	.word	0x200007ac

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f008 f81e 	bl	800924c <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20020000 	.word	0x20020000
 800123c:	00000400 	.word	0x00000400
 8001240:	200002f0 	.word	0x200002f0
 8001244:	20000ac0 	.word	0x20000ac0

08001248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <MX_TIM2_Init+0xdc>)
 8001298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012a0:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80012a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012ae:	f04f 32ff 	mov.w	r2, #4294967295
 80012b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c0:	4821      	ldr	r0, [pc, #132]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012c2:	f003 fd02 	bl	8004cca <HAL_TIM_Base_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80012cc:	f7ff fe88 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	4619      	mov	r1, r3
 80012dc:	481a      	ldr	r0, [pc, #104]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012de:	f004 f8d9 	bl	8005494 <HAL_TIM_ConfigClockSource>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80012e8:	f7ff fe7a 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80012ec:	4816      	ldr	r0, [pc, #88]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012ee:	f003 fdab 	bl	8004e48 <HAL_TIM_IC_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80012f8:	f7ff fe72 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	480f      	ldr	r0, [pc, #60]	; (8001348 <MX_TIM2_Init+0xdc>)
 800130c:	f004 fc32 	bl	8005b74 <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001316:	f7ff fe63 	bl	8000fe0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800131e:	2301      	movs	r3, #1
 8001320:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_TIM2_Init+0xdc>)
 8001332:	f004 f813 	bl	800535c <HAL_TIM_IC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 800133c:	f7ff fe50 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200002f4 	.word	0x200002f4

0800134c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001352:	463b      	mov	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_TIM6_Init+0x64>)
 800135c:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <MX_TIM6_Init+0x68>)
 800135e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_TIM6_Init+0x64>)
 8001362:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001366:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_TIM6_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 41999;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_TIM6_Init+0x64>)
 8001370:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001374:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_TIM6_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_TIM6_Init+0x64>)
 800137e:	f003 fca4 	bl	8004cca <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001388:	f7ff fe2a 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_TIM6_Init+0x64>)
 800139a:	f004 fbeb 	bl	8005b74 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80013a4:	f7ff fe1c 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000033c 	.word	0x2000033c
 80013b4:	40001000 	.word	0x40001000

080013b8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_TIM10_Init+0x40>)
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <MX_TIM10_Init+0x44>)
 80013c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <MX_TIM10_Init+0x40>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_TIM10_Init+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 41999;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <MX_TIM10_Init+0x40>)
 80013d0:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80013d4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_TIM10_Init+0x40>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_TIM10_Init+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_TIM10_Init+0x40>)
 80013e4:	f003 fc71 	bl	8004cca <HAL_TIM_Base_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80013ee:	f7ff fdf7 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000384 	.word	0x20000384
 80013fc:	40014400 	.word	0x40014400

08001400 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001420:	d134      	bne.n	800148c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a36      	ldr	r2, [pc, #216]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800145a:	2301      	movs	r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800146a:	2301      	movs	r3, #1
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4824      	ldr	r0, [pc, #144]	; (8001508 <HAL_TIM_Base_MspInit+0x108>)
 8001476:	f000 fa1f 	bl	80018b8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	201c      	movs	r0, #28
 8001480:	f000 f9e3 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001484:	201c      	movs	r0, #28
 8001486:	f000 f9fc 	bl	8001882 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800148a:	e036      	b.n	80014fa <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM6)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a1e      	ldr	r2, [pc, #120]	; (800150c <HAL_TIM_Base_MspInit+0x10c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d116      	bne.n	80014c4 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a19      	ldr	r2, [pc, #100]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2036      	movs	r0, #54	; 0x36
 80014b8:	f000 f9c7 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014bc:	2036      	movs	r0, #54	; 0x36
 80014be:	f000 f9e0 	bl	8001882 <HAL_NVIC_EnableIRQ>
}
 80014c2:	e01a      	b.n	80014fa <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM10)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a11      	ldr	r2, [pc, #68]	; (8001510 <HAL_TIM_Base_MspInit+0x110>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d115      	bne.n	80014fa <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_TIM_Base_MspInit+0x104>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2019      	movs	r0, #25
 80014f0:	f000 f9ab 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014f4:	2019      	movs	r0, #25
 80014f6:	f000 f9c4 	bl	8001882 <HAL_NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3730      	adds	r7, #48	; 0x30
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	40001000 	.word	0x40001000
 8001510:	40014400 	.word	0x40014400

08001514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800154c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800151a:	490e      	ldr	r1, [pc, #56]	; (8001554 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001530:	4c0b      	ldr	r4, [pc, #44]	; (8001560 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800153e:	f7ff fe83 	bl	8001248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001542:	f007 fe89 	bl	8009258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001546:	f7ff fba7 	bl	8000c98 <main>
  bx  lr    
 800154a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800154c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001558:	08009510 	.word	0x08009510
  ldr r2, =_sbss
 800155c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001560:	20000ac0 	.word	0x20000ac0

08001564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC_IRQHandler>
	...

08001568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <HAL_Init+0x40>)
 8001572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001576:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_Init+0x40>)
 800157e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001582:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <HAL_Init+0x40>)
 800158a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 f94f 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	2000      	movs	r0, #0
 8001598:	f000 f808 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f7ff fda4 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023c00 	.word	0x40023c00

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_InitTick+0x54>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x58>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f967 	bl	800189e <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 f92f 	bl	800184a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_InitTick+0x5c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000144 	.word	0x20000144
 8001604:	2000014c 	.word	0x2000014c
 8001608:	20000148 	.word	0x20000148

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2000014c 	.word	0x2000014c
 8001630:	200003cc 	.word	0x200003cc

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	200003cc 	.word	0x200003cc

0800164c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff ffee 	bl	8001634 <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001664:	d005      	beq.n	8001672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_Delay+0x44>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001672:	bf00      	nop
 8001674:	f7ff ffde 	bl	8001634 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	429a      	cmp	r2, r3
 8001682:	d8f7      	bhi.n	8001674 <HAL_Delay+0x28>
  {
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000014c 	.word	0x2000014c

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db0b      	blt.n	8001722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	4907      	ldr	r1, [pc, #28]	; (8001730 <__NVIC_EnableIRQ+0x38>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	; (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff ff8e 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff29 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff3e 	bl	80016dc <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff8e 	bl	8001788 <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5d 	bl	8001734 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff31 	bl	80016f8 <__NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffa2 	bl	80017f0 <SysTick_Config>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	e16b      	b.n	8001bac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d4:	2201      	movs	r2, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f040 815a 	bne.w	8001ba6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d005      	beq.n	800190a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001906:	2b02      	cmp	r3, #2
 8001908:	d130      	bne.n	800196c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 0201 	and.w	r2, r3, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b03      	cmp	r3, #3
 8001976:	d017      	beq.n	80019a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d123      	bne.n	80019fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	08da      	lsrs	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3208      	adds	r2, #8
 80019f6:	69b9      	ldr	r1, [r7, #24]
 80019f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0203 	and.w	r2, r3, #3
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80b4 	beq.w	8001ba6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b60      	ldr	r3, [pc, #384]	; (8001bc4 <HAL_GPIO_Init+0x30c>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a5f      	ldr	r2, [pc, #380]	; (8001bc4 <HAL_GPIO_Init+0x30c>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_GPIO_Init+0x30c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a5a:	4a5b      	ldr	r2, [pc, #364]	; (8001bc8 <HAL_GPIO_Init+0x310>)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_GPIO_Init+0x314>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d02b      	beq.n	8001ade <HAL_GPIO_Init+0x226>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <HAL_GPIO_Init+0x318>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d025      	beq.n	8001ada <HAL_GPIO_Init+0x222>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a50      	ldr	r2, [pc, #320]	; (8001bd4 <HAL_GPIO_Init+0x31c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01f      	beq.n	8001ad6 <HAL_GPIO_Init+0x21e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4f      	ldr	r2, [pc, #316]	; (8001bd8 <HAL_GPIO_Init+0x320>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_GPIO_Init+0x21a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4e      	ldr	r2, [pc, #312]	; (8001bdc <HAL_GPIO_Init+0x324>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x216>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4d      	ldr	r2, [pc, #308]	; (8001be0 <HAL_GPIO_Init+0x328>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x212>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	; (8001be4 <HAL_GPIO_Init+0x32c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x20e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4b      	ldr	r2, [pc, #300]	; (8001be8 <HAL_GPIO_Init+0x330>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x20a>
 8001abe:	2307      	movs	r3, #7
 8001ac0:	e00e      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	e00c      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ac6:	2306      	movs	r3, #6
 8001ac8:	e00a      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001aca:	2305      	movs	r3, #5
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af0:	4935      	ldr	r1, [pc, #212]	; (8001bc8 <HAL_GPIO_Init+0x310>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afe:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b22:	4a32      	ldr	r2, [pc, #200]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b4c:	4a27      	ldr	r2, [pc, #156]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b76:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	f67f ae90 	bls.w	80018d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40021400 	.word	0x40021400
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40021c00 	.word	0x40021c00
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e001      	b.n	8001c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c3c:	e003      	b.n	8001c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c54:	b08f      	sub	sp, #60	; 0x3c
 8001c56:	af0a      	add	r7, sp, #40	; 0x28
 8001c58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e054      	b.n	8001d0e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f007 f83a 	bl	8008cf8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2203      	movs	r2, #3
 8001c88:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 f868 	bl	8005d78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	687e      	ldr	r6, [r7, #4]
 8001cb0:	466d      	mov	r5, sp
 8001cb2:	f106 0410 	add.w	r4, r6, #16
 8001cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cc6:	1d33      	adds	r3, r6, #4
 8001cc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f003 ffe2 	bl	8005c94 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 f85f 	bl	8005d9a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	687e      	ldr	r6, [r7, #4]
 8001ce4:	466d      	mov	r5, sp
 8001ce6:	f106 0410 	add.w	r4, r6, #16
 8001cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cfa:	1d33      	adds	r3, r6, #4
 8001cfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfe:	6838      	ldr	r0, [r7, #0]
 8001d00:	f004 f9e8 	bl	80060d4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d16 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d16:	b590      	push	{r4, r7, lr}
 8001d18:	b089      	sub	sp, #36	; 0x24
 8001d1a:	af04      	add	r7, sp, #16
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	4608      	mov	r0, r1
 8001d20:	4611      	mov	r1, r2
 8001d22:	461a      	mov	r2, r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	70fb      	strb	r3, [r7, #3]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70bb      	strb	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_HCD_HC_Init+0x28>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e076      	b.n	8001e2c <HAL_HCD_HC_Init+0x116>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	212c      	movs	r1, #44	; 0x2c
 8001d4c:	fb01 f303 	mul.w	r3, r1, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	333d      	adds	r3, #61	; 0x3d
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	212c      	movs	r1, #44	; 0x2c
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	3338      	adds	r3, #56	; 0x38
 8001d66:	787a      	ldrb	r2, [r7, #1]
 8001d68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	212c      	movs	r1, #44	; 0x2c
 8001d70:	fb01 f303 	mul.w	r3, r1, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	3340      	adds	r3, #64	; 0x40
 8001d78:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d7a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	212c      	movs	r1, #44	; 0x2c
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	3339      	adds	r3, #57	; 0x39
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	212c      	movs	r1, #44	; 0x2c
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	333f      	adds	r3, #63	; 0x3f
 8001d9c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001da0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	78ba      	ldrb	r2, [r7, #2]
 8001da6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001daa:	b2d0      	uxtb	r0, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	333a      	adds	r3, #58	; 0x3a
 8001db8:	4602      	mov	r2, r0
 8001dba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001dbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da09      	bge.n	8001dd8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	212c      	movs	r1, #44	; 0x2c
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	333b      	adds	r3, #59	; 0x3b
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e008      	b.n	8001dea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	333b      	adds	r3, #59	; 0x3b
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	212c      	movs	r1, #44	; 0x2c
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	333c      	adds	r3, #60	; 0x3c
 8001df8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dfc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	787c      	ldrb	r4, [r7, #1]
 8001e04:	78ba      	ldrb	r2, [r7, #2]
 8001e06:	78f9      	ldrb	r1, [r7, #3]
 8001e08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	4623      	mov	r3, r4
 8001e1a:	f004 fae1 	bl	80063e0 <USB_HC_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd90      	pop	{r4, r7, pc}

08001e34 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_HCD_HC_Halt+0x1e>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e00f      	b.n	8001e72 <HAL_HCD_HC_Halt+0x3e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 fd31 	bl	80068ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	70fb      	strb	r3, [r7, #3]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	70bb      	strb	r3, [r7, #2]
 8001e92:	4613      	mov	r3, r2
 8001e94:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	333b      	adds	r3, #59	; 0x3b
 8001ea4:	78ba      	ldrb	r2, [r7, #2]
 8001ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	212c      	movs	r1, #44	; 0x2c
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	333f      	adds	r3, #63	; 0x3f
 8001eb6:	787a      	ldrb	r2, [r7, #1]
 8001eb8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001eba:	7c3b      	ldrb	r3, [r7, #16]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d112      	bne.n	8001ee6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	212c      	movs	r1, #44	; 0x2c
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	3342      	adds	r3, #66	; 0x42
 8001ece:	2203      	movs	r2, #3
 8001ed0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	333d      	adds	r3, #61	; 0x3d
 8001ee0:	7f3a      	ldrb	r2, [r7, #28]
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	e008      	b.n	8001ef8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3342      	adds	r3, #66	; 0x42
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	f200 80c6 	bhi.w	800208c <HAL_HCD_HC_SubmitRequest+0x210>
 8001f00:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f06:	bf00      	nop
 8001f08:	08001f19 	.word	0x08001f19
 8001f0c:	08002079 	.word	0x08002079
 8001f10:	08001f7d 	.word	0x08001f7d
 8001f14:	08001ffb 	.word	0x08001ffb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f18:	7c3b      	ldrb	r3, [r7, #16]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	f040 80b8 	bne.w	8002090 <HAL_HCD_HC_SubmitRequest+0x214>
 8001f20:	78bb      	ldrb	r3, [r7, #2]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f040 80b4 	bne.w	8002090 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001f28:	8b3b      	ldrh	r3, [r7, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d108      	bne.n	8001f40 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	3355      	adds	r3, #85	; 0x55
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3355      	adds	r3, #85	; 0x55
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	212c      	movs	r1, #44	; 0x2c
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	3342      	adds	r3, #66	; 0x42
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f66:	e093      	b.n	8002090 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	3342      	adds	r3, #66	; 0x42
 8001f76:	2202      	movs	r2, #2
 8001f78:	701a      	strb	r2, [r3, #0]
      break;
 8001f7a:	e089      	b.n	8002090 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f7c:	78bb      	ldrb	r3, [r7, #2]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d11d      	bne.n	8001fbe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	212c      	movs	r1, #44	; 0x2c
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3355      	adds	r3, #85	; 0x55
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3342      	adds	r3, #66	; 0x42
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001fa8:	e073      	b.n	8002092 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3342      	adds	r3, #66	; 0x42
 8001fb8:	2202      	movs	r2, #2
 8001fba:	701a      	strb	r2, [r3, #0]
      break;
 8001fbc:	e069      	b.n	8002092 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3354      	adds	r3, #84	; 0x54
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3342      	adds	r3, #66	; 0x42
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
      break;
 8001fe4:	e055      	b.n	8002092 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	212c      	movs	r1, #44	; 0x2c
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3342      	adds	r3, #66	; 0x42
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	701a      	strb	r2, [r3, #0]
      break;
 8001ff8:	e04b      	b.n	8002092 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ffa:	78bb      	ldrb	r3, [r7, #2]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d11d      	bne.n	800203c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	3355      	adds	r3, #85	; 0x55
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3342      	adds	r3, #66	; 0x42
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002026:	e034      	b.n	8002092 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3342      	adds	r3, #66	; 0x42
 8002036:	2202      	movs	r2, #2
 8002038:	701a      	strb	r2, [r3, #0]
      break;
 800203a:	e02a      	b.n	8002092 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	3354      	adds	r3, #84	; 0x54
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d109      	bne.n	8002064 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	212c      	movs	r1, #44	; 0x2c
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	3342      	adds	r3, #66	; 0x42
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
      break;
 8002062:	e016      	b.n	8002092 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	3342      	adds	r3, #66	; 0x42
 8002072:	2202      	movs	r2, #2
 8002074:	701a      	strb	r2, [r3, #0]
      break;
 8002076:	e00c      	b.n	8002092 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3342      	adds	r3, #66	; 0x42
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
      break;
 800208a:	e002      	b.n	8002092 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800208c:	bf00      	nop
 800208e:	e000      	b.n	8002092 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002090:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3344      	adds	r3, #68	; 0x44
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	8b3a      	ldrh	r2, [r7, #24]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	202c      	movs	r0, #44	; 0x2c
 80020ac:	fb00 f303 	mul.w	r3, r0, r3
 80020b0:	440b      	add	r3, r1
 80020b2:	334c      	adds	r3, #76	; 0x4c
 80020b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3360      	adds	r3, #96	; 0x60
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3350      	adds	r3, #80	; 0x50
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3339      	adds	r3, #57	; 0x39
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3361      	adds	r3, #97	; 0x61
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	222c      	movs	r2, #44	; 0x2c
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	3338      	adds	r3, #56	; 0x38
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	18d1      	adds	r1, r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	f004 fa84 	bl	8006624 <USB_HC_StartXfer>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop

08002128 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f003 ff85 	bl	800604e <USB_GetMode>
 8002144:	4603      	mov	r3, r0
 8002146:	2b01      	cmp	r3, #1
 8002148:	f040 80f6 	bne.w	8002338 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f003 ff69 	bl	8006028 <USB_ReadInterrupts>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80ec 	beq.w	8002336 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f003 ff60 	bl	8006028 <USB_ReadInterrupts>
 8002168:	4603      	mov	r3, r0
 800216a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002172:	d104      	bne.n	800217e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800217c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f003 ff50 	bl	8006028 <USB_ReadInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002192:	d104      	bne.n	800219e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800219c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 ff40 	bl	8006028 <USB_ReadInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021b2:	d104      	bne.n	80021be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 ff30 	bl	8006028 <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d103      	bne.n	80021da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2202      	movs	r2, #2
 80021d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 ff22 	bl	8006028 <USB_ReadInterrupts>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021ee:	d11c      	bne.n	800222a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800220a:	2110      	movs	r1, #16
 800220c:	6938      	ldr	r0, [r7, #16]
 800220e:	f003 fe11 	bl	8005e34 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002212:	6938      	ldr	r0, [r7, #16]
 8002214:	f003 fe42 	bl	8005e9c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	4618      	mov	r0, r3
 8002220:	f004 f818 	bl	8006254 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f006 fde5 	bl	8008df4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fefa 	bl	8006028 <USB_ReadInterrupts>
 8002234:	4603      	mov	r3, r0
 8002236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800223a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800223e:	d102      	bne.n	8002246 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f001 f89e 	bl	8003382 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f003 feec 	bl	8006028 <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b08      	cmp	r3, #8
 8002258:	d106      	bne.n	8002268 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f006 fdae 	bl	8008dbc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2208      	movs	r2, #8
 8002266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fedb 	bl	8006028 <USB_ReadInterrupts>
 8002272:	4603      	mov	r3, r0
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b10      	cmp	r3, #16
 800227a:	d101      	bne.n	8002280 <HAL_HCD_IRQHandler+0x158>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <HAL_HCD_IRQHandler+0x15a>
 8002280:	2300      	movs	r3, #0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d012      	beq.n	80022ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0210 	bic.w	r2, r2, #16
 8002294:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 ffa1 	bl	80031de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0210 	orr.w	r2, r2, #16
 80022aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 feb9 	bl	8006028 <USB_ReadInterrupts>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022c0:	d13a      	bne.n	8002338 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 faee 	bl	80068a8 <USB_HC_ReadInterrupt>
 80022cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	e025      	b.n	8002320 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d018      	beq.n	800231a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022fe:	d106      	bne.n	800230e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	4619      	mov	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f8ab 	bl	8002462 <HCD_HC_IN_IRQHandler>
 800230c:	e005      	b.n	800231a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	4619      	mov	r1, r3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fbf9 	bl	8002b0c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3d4      	bcc.n	80022d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002332:	615a      	str	r2, [r3, #20]
 8002334:	e000      	b.n	8002338 <HAL_HCD_IRQHandler+0x210>
      return;
 8002336:	bf00      	nop
    }
  }
}
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_HCD_Start+0x16>
 8002350:	2302      	movs	r3, #2
 8002352:	e013      	b.n	800237c <HAL_HCD_Start+0x3e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2101      	movs	r1, #1
 8002362:	4618      	mov	r0, r3
 8002364:	f003 ffda 	bl	800631c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f003 fcf2 	bl	8005d56 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_HCD_Stop+0x16>
 8002396:	2302      	movs	r3, #2
 8002398:	e00d      	b.n	80023b6 <HAL_HCD_Stop+0x32>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 fbc8 	bl	8006b3c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 ff7c 	bl	80062c8 <USB_ResetPort>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3360      	adds	r3, #96	; 0x60
 80023f4:	781b      	ldrb	r3, [r3, #0]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3350      	adds	r3, #80	; 0x50
 800241c:	681b      	ldr	r3, [r3, #0]
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f003 ffc0 	bl	80063bc <USB_GetCurrentFrame>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f003 ff9b 	bl	800638e <USB_GetHostSpeed>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b04      	cmp	r3, #4
 8002490:	d11a      	bne.n	80024c8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	461a      	mov	r2, r3
 80024a0:	2304      	movs	r3, #4
 80024a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	3361      	adds	r3, #97	; 0x61
 80024b2:	2206      	movs	r2, #6
 80024b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 fa02 	bl	80068ca <USB_HC_Halt>
 80024c6:	e0af      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024de:	d11b      	bne.n	8002518 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	461a      	mov	r2, r3
 80024ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3361      	adds	r3, #97	; 0x61
 8002502:	2207      	movs	r2, #7
 8002504:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f004 f9da 	bl	80068ca <USB_HC_Halt>
 8002516:	e087      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b20      	cmp	r3, #32
 800252c:	d109      	bne.n	8002542 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	461a      	mov	r2, r3
 800253c:	2320      	movs	r3, #32
 800253e:	6093      	str	r3, [r2, #8]
 8002540:	e072      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b08      	cmp	r3, #8
 8002556:	d11a      	bne.n	800258e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	2308      	movs	r3, #8
 8002568:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	3361      	adds	r3, #97	; 0x61
 8002578:	2205      	movs	r2, #5
 800257a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f004 f99f 	bl	80068ca <USB_HC_Halt>
 800258c:	e04c      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a4:	d11b      	bne.n	80025de <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	461a      	mov	r2, r3
 80025b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	3361      	adds	r3, #97	; 0x61
 80025c8:	2208      	movs	r2, #8
 80025ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 f977 	bl	80068ca <USB_HC_Halt>
 80025dc:	e024      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f0:	2b80      	cmp	r3, #128	; 0x80
 80025f2:	d119      	bne.n	8002628 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	461a      	mov	r2, r3
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	3361      	adds	r3, #97	; 0x61
 8002614:	2206      	movs	r2, #6
 8002616:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f004 f951 	bl	80068ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263e:	d112      	bne.n	8002666 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f004 f93d 	bl	80068ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	461a      	mov	r2, r3
 800265e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002662:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002664:	e24e      	b.n	8002b04 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	f040 80df 	bne.w	800283c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d019      	beq.n	80026ba <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3348      	adds	r3, #72	; 0x48
 8002694:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	0159      	lsls	r1, r3, #5
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	440b      	add	r3, r1
 800269e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026a8:	1ad2      	subs	r2, r2, r3
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	202c      	movs	r0, #44	; 0x2c
 80026b0:	fb00 f303 	mul.w	r3, r0, r3
 80026b4:	440b      	add	r3, r1
 80026b6:	3350      	adds	r3, #80	; 0x50
 80026b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3361      	adds	r3, #97	; 0x61
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	335c      	adds	r3, #92	; 0x5c
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	461a      	mov	r2, r3
 80026ec:	2301      	movs	r3, #1
 80026ee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	333f      	adds	r3, #63	; 0x3f
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d009      	beq.n	8002718 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	333f      	adds	r3, #63	; 0x3f
 8002712:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002714:	2b02      	cmp	r3, #2
 8002716:	d111      	bne.n	800273c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f004 f8d1 	bl	80068ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	461a      	mov	r2, r3
 8002736:	2310      	movs	r3, #16
 8002738:	6093      	str	r3, [r2, #8]
 800273a:	e03a      	b.n	80027b2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	333f      	adds	r3, #63	; 0x3f
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d009      	beq.n	8002764 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	333f      	adds	r3, #63	; 0x3f
 800275e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002760:	2b01      	cmp	r3, #1
 8002762:	d126      	bne.n	80027b2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	440a      	add	r2, r1
 800277a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002782:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	212c      	movs	r1, #44	; 0x2c
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	4413      	add	r3, r2
 8002790:	3360      	adds	r3, #96	; 0x60
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	b2d9      	uxtb	r1, r3
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	202c      	movs	r0, #44	; 0x2c
 80027a0:	fb00 f303 	mul.w	r3, r0, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	3360      	adds	r3, #96	; 0x60
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f006 fb2f 	bl	8008e10 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d12b      	bne.n	8002812 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3348      	adds	r3, #72	; 0x48
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	202c      	movs	r0, #44	; 0x2c
 80027d0:	fb00 f202 	mul.w	r2, r0, r2
 80027d4:	440a      	add	r2, r1
 80027d6:	3240      	adds	r2, #64	; 0x40
 80027d8:	8812      	ldrh	r2, [r2, #0]
 80027da:	fbb3 f3f2 	udiv	r3, r3, r2
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 818e 	beq.w	8002b04 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3354      	adds	r3, #84	; 0x54
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	f083 0301 	eor.w	r3, r3, #1
 80027fc:	b2d8      	uxtb	r0, r3
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3354      	adds	r3, #84	; 0x54
 800280c:	4602      	mov	r2, r0
 800280e:	701a      	strb	r2, [r3, #0]
}
 8002810:	e178      	b.n	8002b04 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3354      	adds	r3, #84	; 0x54
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	f083 0301 	eor.w	r3, r3, #1
 8002826:	b2d8      	uxtb	r0, r3
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3354      	adds	r3, #84	; 0x54
 8002836:	4602      	mov	r2, r0
 8002838:	701a      	strb	r2, [r3, #0]
}
 800283a:	e163      	b.n	8002b04 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b02      	cmp	r3, #2
 8002850:	f040 80f6 	bne.w	8002a40 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3361      	adds	r3, #97	; 0x61
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d109      	bne.n	800287c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3360      	adds	r3, #96	; 0x60
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e0c9      	b.n	8002a10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	3361      	adds	r3, #97	; 0x61
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b05      	cmp	r3, #5
 800288e:	d109      	bne.n	80028a4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3360      	adds	r3, #96	; 0x60
 800289e:	2205      	movs	r2, #5
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e0b5      	b.n	8002a10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3361      	adds	r3, #97	; 0x61
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b06      	cmp	r3, #6
 80028b6:	d009      	beq.n	80028cc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3361      	adds	r3, #97	; 0x61
 80028c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d150      	bne.n	800296e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	335c      	adds	r3, #92	; 0x5c
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	202c      	movs	r0, #44	; 0x2c
 80028e4:	fb00 f303 	mul.w	r3, r0, r3
 80028e8:	440b      	add	r3, r1
 80028ea:	335c      	adds	r3, #92	; 0x5c
 80028ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	335c      	adds	r3, #92	; 0x5c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d912      	bls.n	8002928 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	335c      	adds	r3, #92	; 0x5c
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3360      	adds	r3, #96	; 0x60
 8002922:	2204      	movs	r2, #4
 8002924:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002926:	e073      	b.n	8002a10 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3360      	adds	r3, #96	; 0x60
 8002936:	2202      	movs	r2, #2
 8002938:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002950:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002958:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800296c:	e050      	b.n	8002a10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3361      	adds	r3, #97	; 0x61
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d122      	bne.n	80029c8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3360      	adds	r3, #96	; 0x60
 8002990:	2202      	movs	r2, #2
 8002992:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	461a      	mov	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e023      	b.n	8002a10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3361      	adds	r3, #97	; 0x61
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b07      	cmp	r3, #7
 80029da:	d119      	bne.n	8002a10 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	335c      	adds	r3, #92	; 0x5c
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	202c      	movs	r0, #44	; 0x2c
 80029f4:	fb00 f303 	mul.w	r3, r0, r3
 80029f8:	440b      	add	r3, r1
 80029fa:	335c      	adds	r3, #92	; 0x5c
 80029fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3360      	adds	r3, #96	; 0x60
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2302      	movs	r3, #2
 8002a20:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	b2d9      	uxtb	r1, r3
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	202c      	movs	r0, #44	; 0x2c
 8002a2c:	fb00 f303 	mul.w	r3, r0, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3360      	adds	r3, #96	; 0x60
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f006 f9e9 	bl	8008e10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a3e:	e061      	b.n	8002b04 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d156      	bne.n	8002b04 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	333f      	adds	r3, #63	; 0x3f
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d111      	bne.n	8002a8e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	335c      	adds	r3, #92	; 0x5c
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f003 ff1f 	bl	80068ca <USB_HC_Halt>
 8002a8c:	e031      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	333f      	adds	r3, #63	; 0x3f
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	333f      	adds	r3, #63	; 0x3f
 8002ab0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d11d      	bne.n	8002af2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	335c      	adds	r3, #92	; 0x5c
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d110      	bne.n	8002af2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3361      	adds	r3, #97	; 0x61
 8002ade:	2203      	movs	r2, #3
 8002ae0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 feec 	bl	80068ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	461a      	mov	r2, r3
 8002b00:	2310      	movs	r3, #16
 8002b02:	6093      	str	r3, [r2, #8]
}
 8002b04:	bf00      	nop
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d11a      	bne.n	8002b72 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3361      	adds	r3, #97	; 0x61
 8002b5c:	2206      	movs	r2, #6
 8002b5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 fead 	bl	80068ca <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002b70:	e331      	b.n	80031d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d12e      	bne.n	8002be6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	2320      	movs	r3, #32
 8002b98:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	333d      	adds	r3, #61	; 0x3d
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	f040 8313 	bne.w	80031d6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	333d      	adds	r3, #61	; 0x3d
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3360      	adds	r3, #96	; 0x60
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f003 fe73 	bl	80068ca <USB_HC_Halt>
}
 8002be4:	e2f7      	b.n	80031d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfc:	d112      	bne.n	8002c24 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c10:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f003 fe54 	bl	80068ca <USB_HC_Halt>
}
 8002c22:	e2d8      	b.n	80031d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d140      	bne.n	8002cbc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	335c      	adds	r3, #92	; 0x5c
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d111      	bne.n	8002c86 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	333d      	adds	r3, #61	; 0x3d
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	461a      	mov	r2, r3
 8002c82:	2340      	movs	r3, #64	; 0x40
 8002c84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	461a      	mov	r2, r3
 8002c94:	2301      	movs	r3, #1
 8002c96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3361      	adds	r3, #97	; 0x61
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f003 fe08 	bl	80068ca <USB_HC_Halt>
}
 8002cba:	e28c      	b.n	80031d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d12c      	bne.n	8002d2c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3361      	adds	r3, #97	; 0x61
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	333d      	adds	r3, #61	; 0x3d
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	335c      	adds	r3, #92	; 0x5c
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 fdd9 	bl	80068ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d24:	461a      	mov	r2, r3
 8002d26:	2340      	movs	r3, #64	; 0x40
 8002d28:	6093      	str	r3, [r2, #8]
}
 8002d2a:	e254      	b.n	80031d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d11a      	bne.n	8002d78 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2308      	movs	r3, #8
 8002d52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3361      	adds	r3, #97	; 0x61
 8002d62:	2205      	movs	r2, #5
 8002d64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 fdaa 	bl	80068ca <USB_HC_Halt>
}
 8002d76:	e22e      	b.n	80031d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d140      	bne.n	8002e10 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	335c      	adds	r3, #92	; 0x5c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3361      	adds	r3, #97	; 0x61
 8002dae:	2203      	movs	r2, #3
 8002db0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	333d      	adds	r3, #61	; 0x3d
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d112      	bne.n	8002dec <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	333c      	adds	r3, #60	; 0x3c
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	333d      	adds	r3, #61	; 0x3d
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 fd67 	bl	80068ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2310      	movs	r3, #16
 8002e0c:	6093      	str	r3, [r2, #8]
}
 8002e0e:	e1e2      	b.n	80031d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d164      	bne.n	8002ef0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d111      	bne.n	8002e52 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3361      	adds	r3, #97	; 0x61
 8002e3c:	2206      	movs	r2, #6
 8002e3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 fd3d 	bl	80068ca <USB_HC_Halt>
 8002e50:	e044      	b.n	8002edc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	335c      	adds	r3, #92	; 0x5c
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	202c      	movs	r0, #44	; 0x2c
 8002e6a:	fb00 f303 	mul.w	r3, r0, r3
 8002e6e:	440b      	add	r3, r1
 8002e70:	335c      	adds	r3, #92	; 0x5c
 8002e72:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	335c      	adds	r3, #92	; 0x5c
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d920      	bls.n	8002eca <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	335c      	adds	r3, #92	; 0x5c
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3360      	adds	r3, #96	; 0x60
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	b2d9      	uxtb	r1, r3
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	202c      	movs	r0, #44	; 0x2c
 8002eb6:	fb00 f303 	mul.w	r3, r0, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3360      	adds	r3, #96	; 0x60
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f005 ffa4 	bl	8008e10 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ec8:	e008      	b.n	8002edc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3360      	adds	r3, #96	; 0x60
 8002ed8:	2202      	movs	r2, #2
 8002eda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	6093      	str	r3, [r2, #8]
}
 8002eee:	e172      	b.n	80031d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f06:	d11b      	bne.n	8002f40 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	212c      	movs	r1, #44	; 0x2c
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	3361      	adds	r3, #97	; 0x61
 8002f16:	2208      	movs	r2, #8
 8002f18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 fcd0 	bl	80068ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	461a      	mov	r2, r3
 8002f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f3c:	6093      	str	r3, [r2, #8]
}
 8002f3e:	e14a      	b.n	80031d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	f040 813f 	bne.w	80031d6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3361      	adds	r3, #97	; 0x61
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d17d      	bne.n	8003068 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3360      	adds	r3, #96	; 0x60
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	333f      	adds	r3, #63	; 0x3f
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d00a      	beq.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	333f      	adds	r3, #63	; 0x3f
 8002fa0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	f040 8100 	bne.w	80031a8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d113      	bne.n	8002fd8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3355      	adds	r3, #85	; 0x55
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	f083 0301 	eor.w	r3, r3, #1
 8002fc4:	b2d8      	uxtb	r0, r3
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3355      	adds	r3, #85	; 0x55
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	f040 80e3 	bne.w	80031a8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	212c      	movs	r1, #44	; 0x2c
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	334c      	adds	r3, #76	; 0x4c
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80d8 	beq.w	80031a8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	334c      	adds	r3, #76	; 0x4c
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	202c      	movs	r0, #44	; 0x2c
 800300e:	fb00 f202 	mul.w	r2, r0, r2
 8003012:	440a      	add	r2, r1
 8003014:	3240      	adds	r2, #64	; 0x40
 8003016:	8812      	ldrh	r2, [r2, #0]
 8003018:	4413      	add	r3, r2
 800301a:	3b01      	subs	r3, #1
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	202c      	movs	r0, #44	; 0x2c
 8003022:	fb00 f202 	mul.w	r2, r0, r2
 8003026:	440a      	add	r2, r1
 8003028:	3240      	adds	r2, #64	; 0x40
 800302a:	8812      	ldrh	r2, [r2, #0]
 800302c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80b5 	beq.w	80031a8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3355      	adds	r3, #85	; 0x55
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	f083 0301 	eor.w	r3, r3, #1
 8003052:	b2d8      	uxtb	r0, r3
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	3355      	adds	r3, #85	; 0x55
 8003062:	4602      	mov	r2, r0
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	e09f      	b.n	80031a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	212c      	movs	r1, #44	; 0x2c
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	3361      	adds	r3, #97	; 0x61
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d109      	bne.n	8003090 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3360      	adds	r3, #96	; 0x60
 800308a:	2202      	movs	r2, #2
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e08b      	b.n	80031a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3361      	adds	r3, #97	; 0x61
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d109      	bne.n	80030b8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3360      	adds	r3, #96	; 0x60
 80030b2:	2202      	movs	r2, #2
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e077      	b.n	80031a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3361      	adds	r3, #97	; 0x61
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d109      	bne.n	80030e0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3360      	adds	r3, #96	; 0x60
 80030da:	2205      	movs	r2, #5
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e063      	b.n	80031a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3361      	adds	r3, #97	; 0x61
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d009      	beq.n	8003108 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3361      	adds	r3, #97	; 0x61
 8003102:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003104:	2b08      	cmp	r3, #8
 8003106:	d14f      	bne.n	80031a8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	335c      	adds	r3, #92	; 0x5c
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	202c      	movs	r0, #44	; 0x2c
 8003120:	fb00 f303 	mul.w	r3, r0, r3
 8003124:	440b      	add	r3, r1
 8003126:	335c      	adds	r3, #92	; 0x5c
 8003128:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	335c      	adds	r3, #92	; 0x5c
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d912      	bls.n	8003164 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	335c      	adds	r3, #92	; 0x5c
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3360      	adds	r3, #96	; 0x60
 800315e:	2204      	movs	r2, #4
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e021      	b.n	80031a8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3360      	adds	r3, #96	; 0x60
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800318c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003194:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4413      	add	r3, r2
 800319e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a2:	461a      	mov	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	461a      	mov	r2, r3
 80031b6:	2302      	movs	r3, #2
 80031b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	b2d9      	uxtb	r1, r3
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	202c      	movs	r0, #44	; 0x2c
 80031c4:	fb00 f303 	mul.w	r3, r0, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3360      	adds	r3, #96	; 0x60
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f005 fe1d 	bl	8008e10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031d6:	bf00      	nop
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b08a      	sub	sp, #40	; 0x28
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	0c5b      	lsrs	r3, r3, #17
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003212:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d004      	beq.n	8003224 <HCD_RXQLVL_IRQHandler+0x46>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b05      	cmp	r3, #5
 800321e:	f000 80a9 	beq.w	8003374 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003222:	e0aa      	b.n	800337a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80a6 	beq.w	8003378 <HCD_RXQLVL_IRQHandler+0x19a>
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3344      	adds	r3, #68	; 0x44
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 809b 	beq.w	8003378 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3350      	adds	r3, #80	; 0x50
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	441a      	add	r2, r3
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	202c      	movs	r0, #44	; 0x2c
 800325c:	fb00 f303 	mul.w	r3, r0, r3
 8003260:	440b      	add	r3, r1
 8003262:	334c      	adds	r3, #76	; 0x4c
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d87a      	bhi.n	8003360 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3344      	adds	r3, #68	; 0x44
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	b292      	uxth	r2, r2
 8003282:	4619      	mov	r1, r3
 8003284:	f002 fe78 	bl	8005f78 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	3344      	adds	r3, #68	; 0x44
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	441a      	add	r2, r3
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	202c      	movs	r0, #44	; 0x2c
 80032a2:	fb00 f303 	mul.w	r3, r0, r3
 80032a6:	440b      	add	r3, r1
 80032a8:	3344      	adds	r3, #68	; 0x44
 80032aa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3350      	adds	r3, #80	; 0x50
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	441a      	add	r2, r3
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	202c      	movs	r0, #44	; 0x2c
 80032c6:	fb00 f303 	mul.w	r3, r0, r3
 80032ca:	440b      	add	r3, r1
 80032cc:	3350      	adds	r3, #80	; 0x50
 80032ce:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	0cdb      	lsrs	r3, r3, #19
 80032e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3340      	adds	r3, #64	; 0x40
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d13c      	bne.n	8003378 <HCD_RXQLVL_IRQHandler+0x19a>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d039      	beq.n	8003378 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800331a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003322:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	4413      	add	r3, r2
 800332c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3354      	adds	r3, #84	; 0x54
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	f083 0301 	eor.w	r3, r3, #1
 800334a:	b2d8      	uxtb	r0, r3
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3354      	adds	r3, #84	; 0x54
 800335a:	4602      	mov	r2, r0
 800335c:	701a      	strb	r2, [r3, #0]
      break;
 800335e:	e00b      	b.n	8003378 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	3360      	adds	r3, #96	; 0x60
 800336e:	2204      	movs	r2, #4
 8003370:	701a      	strb	r2, [r3, #0]
      break;
 8003372:	e001      	b.n	8003378 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003374:	bf00      	nop
 8003376:	e000      	b.n	800337a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003378:	bf00      	nop
  }
}
 800337a:	bf00      	nop
 800337c:	3728      	adds	r7, #40	; 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033ae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d10b      	bne.n	80033d2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d102      	bne.n	80033ca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f005 fd07 	bl	8008dd8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d132      	bne.n	8003442 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f043 0308 	orr.w	r3, r3, #8
 80033e2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d126      	bne.n	800343c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d113      	bne.n	800341e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003400:	d106      	bne.n	8003410 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2102      	movs	r1, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f002 ff23 	bl	8006254 <USB_InitFSLSPClkSel>
 800340e:	e011      	b.n	8003434 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	4618      	mov	r0, r3
 8003418:	f002 ff1c 	bl	8006254 <USB_InitFSLSPClkSel>
 800341c:	e00a      	b.n	8003434 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d106      	bne.n	8003434 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800342c:	461a      	mov	r2, r3
 800342e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003432:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f005 fcf9 	bl	8008e2c <HAL_HCD_PortEnabled_Callback>
 800343a:	e002      	b.n	8003442 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f005 fd03 	bl	8008e48 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b20      	cmp	r3, #32
 800344a:	d103      	bne.n	8003454 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f043 0320 	orr.w	r3, r3, #32
 8003452:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	6013      	str	r3, [r2, #0]
}
 8003460:	bf00      	nop
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e12b      	b.n	80036d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd f998 	bl	80007c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	; 0x24
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034cc:	f001 fa20 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 80034d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4a81      	ldr	r2, [pc, #516]	; (80036dc <HAL_I2C_Init+0x274>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d807      	bhi.n	80034ec <HAL_I2C_Init+0x84>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a80      	ldr	r2, [pc, #512]	; (80036e0 <HAL_I2C_Init+0x278>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bf94      	ite	ls
 80034e4:	2301      	movls	r3, #1
 80034e6:	2300      	movhi	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e006      	b.n	80034fa <HAL_I2C_Init+0x92>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a7d      	ldr	r2, [pc, #500]	; (80036e4 <HAL_I2C_Init+0x27c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	bf94      	ite	ls
 80034f4:	2301      	movls	r3, #1
 80034f6:	2300      	movhi	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e0e7      	b.n	80036d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4a78      	ldr	r2, [pc, #480]	; (80036e8 <HAL_I2C_Init+0x280>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0c9b      	lsrs	r3, r3, #18
 800350c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a6a      	ldr	r2, [pc, #424]	; (80036dc <HAL_I2C_Init+0x274>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d802      	bhi.n	800353c <HAL_I2C_Init+0xd4>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	3301      	adds	r3, #1
 800353a:	e009      	b.n	8003550 <HAL_I2C_Init+0xe8>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	4a69      	ldr	r2, [pc, #420]	; (80036ec <HAL_I2C_Init+0x284>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	3301      	adds	r3, #1
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	430b      	orrs	r3, r1
 8003556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	495c      	ldr	r1, [pc, #368]	; (80036dc <HAL_I2C_Init+0x274>)
 800356c:	428b      	cmp	r3, r1
 800356e:	d819      	bhi.n	80035a4 <HAL_I2C_Init+0x13c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e59      	subs	r1, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fbb1 f3f3 	udiv	r3, r1, r3
 800357e:	1c59      	adds	r1, r3, #1
 8003580:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003584:	400b      	ands	r3, r1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_I2C_Init+0x138>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1e59      	subs	r1, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fbb1 f3f3 	udiv	r3, r1, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359e:	e051      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035a0:	2304      	movs	r3, #4
 80035a2:	e04f      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d111      	bne.n	80035d0 <HAL_I2C_Init+0x168>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e58      	subs	r0, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e012      	b.n	80035f6 <HAL_I2C_Init+0x18e>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e58      	subs	r0, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	0099      	lsls	r1, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x196>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e022      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <HAL_I2C_Init+0x1bc>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1e58      	subs	r0, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	440b      	add	r3, r1
 8003614:	fbb0 f3f3 	udiv	r3, r0, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	0099      	lsls	r1, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	fbb0 f3f3 	udiv	r3, r0, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6911      	ldr	r1, [r2, #16]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	430b      	orrs	r3, r1
 8003686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	000186a0 	.word	0x000186a0
 80036e0:	001e847f 	.word	0x001e847f
 80036e4:	003d08ff 	.word	0x003d08ff
 80036e8:	431bde83 	.word	0x431bde83
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e128      	b.n	8003954 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a90      	ldr	r2, [pc, #576]	; (800395c <HAL_I2S_Init+0x26c>)
 800371a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fd f8c9 	bl	80008b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003738:	f023 030f 	bic.w	r3, r3, #15
 800373c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2202      	movs	r2, #2
 8003744:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d060      	beq.n	8003810 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003756:	2310      	movs	r3, #16
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	e001      	b.n	8003760 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800375c:	2320      	movs	r3, #32
 800375e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b20      	cmp	r3, #32
 8003766:	d802      	bhi.n	800376e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800376e:	2001      	movs	r0, #1
 8003770:	f001 f9c4 	bl	8004afc <HAL_RCCEx_GetPeriphCLKFreq>
 8003774:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377e:	d125      	bne.n	80037cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d010      	beq.n	80037aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	461a      	mov	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	3305      	adds	r3, #5
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	e01f      	b.n	80037ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	461a      	mov	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	3305      	adds	r3, #5
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	e00e      	b.n	80037ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	461a      	mov	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	3305      	adds	r3, #5
 80037e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4a5c      	ldr	r2, [pc, #368]	; (8003960 <HAL_I2S_Init+0x270>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	08db      	lsrs	r3, r3, #3
 80037f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	e003      	b.n	8003818 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003810:	2302      	movs	r3, #2
 8003812:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d902      	bls.n	8003824 <HAL_I2S_Init+0x134>
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	2bff      	cmp	r3, #255	; 0xff
 8003822:	d907      	bls.n	8003834 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f043 0210 	orr.w	r2, r3, #16
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e08f      	b.n	8003954 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	ea42 0103 	orr.w	r1, r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	430a      	orrs	r2, r1
 8003846:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003852:	f023 030f 	bic.w	r3, r3, #15
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6851      	ldr	r1, [r2, #4]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6892      	ldr	r2, [r2, #8]
 800385e:	4311      	orrs	r1, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68d2      	ldr	r2, [r2, #12]
 8003864:	4311      	orrs	r1, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6992      	ldr	r2, [r2, #24]
 800386a:	430a      	orrs	r2, r1
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003876:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d161      	bne.n	8003944 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a38      	ldr	r2, [pc, #224]	; (8003964 <HAL_I2S_Init+0x274>)
 8003884:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a37      	ldr	r2, [pc, #220]	; (8003968 <HAL_I2S_Init+0x278>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_I2S_Init+0x1a4>
 8003890:	4b36      	ldr	r3, [pc, #216]	; (800396c <HAL_I2S_Init+0x27c>)
 8003892:	e001      	b.n	8003898 <HAL_I2S_Init+0x1a8>
 8003894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	4932      	ldr	r1, [pc, #200]	; (8003968 <HAL_I2S_Init+0x278>)
 80038a0:	428a      	cmp	r2, r1
 80038a2:	d101      	bne.n	80038a8 <HAL_I2S_Init+0x1b8>
 80038a4:	4a31      	ldr	r2, [pc, #196]	; (800396c <HAL_I2S_Init+0x27c>)
 80038a6:	e001      	b.n	80038ac <HAL_I2S_Init+0x1bc>
 80038a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80038ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038b0:	f023 030f 	bic.w	r3, r3, #15
 80038b4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2b      	ldr	r2, [pc, #172]	; (8003968 <HAL_I2S_Init+0x278>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <HAL_I2S_Init+0x1d4>
 80038c0:	4b2a      	ldr	r3, [pc, #168]	; (800396c <HAL_I2S_Init+0x27c>)
 80038c2:	e001      	b.n	80038c8 <HAL_I2S_Init+0x1d8>
 80038c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c8:	2202      	movs	r2, #2
 80038ca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a25      	ldr	r2, [pc, #148]	; (8003968 <HAL_I2S_Init+0x278>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_I2S_Init+0x1ea>
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_I2S_Init+0x27c>)
 80038d8:	e001      	b.n	80038de <HAL_I2S_Init+0x1ee>
 80038da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ea:	d003      	beq.n	80038f4 <HAL_I2S_Init+0x204>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	e001      	b.n	8003900 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800390a:	4313      	orrs	r3, r2
 800390c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003914:	4313      	orrs	r3, r2
 8003916:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800391e:	4313      	orrs	r3, r2
 8003920:	b29a      	uxth	r2, r3
 8003922:	897b      	ldrh	r3, [r7, #10]
 8003924:	4313      	orrs	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800392c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <HAL_I2S_Init+0x278>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_I2S_Init+0x24c>
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <HAL_I2S_Init+0x27c>)
 800393a:	e001      	b.n	8003940 <HAL_I2S_Init+0x250>
 800393c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003940:	897a      	ldrh	r2, [r7, #10]
 8003942:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3720      	adds	r7, #32
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	08003a67 	.word	0x08003a67
 8003960:	cccccccd 	.word	0xcccccccd
 8003964:	08003b7d 	.word	0x08003b7d
 8003968:	40003800 	.word	0x40003800
 800396c:	40003400 	.word	0x40003400

08003970 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	881a      	ldrh	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c9a      	adds	r2, r3, #2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff ffb8 	bl	8003970 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	b292      	uxth	r2, r2
 8003a1c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	1c9a      	adds	r2, r3, #2
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10e      	bne.n	8003a5e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a4e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff93 	bl	8003984 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d13a      	bne.n	8003af8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d109      	bne.n	8003aa0 <I2S_IRQHandler+0x3a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d102      	bne.n	8003aa0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ffb4 	bl	8003a08 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b40      	cmp	r3, #64	; 0x40
 8003aa8:	d126      	bne.n	8003af8 <I2S_IRQHandler+0x92>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d11f      	bne.n	8003af8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ac6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ff50 	bl	8003998 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d136      	bne.n	8003b72 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d109      	bne.n	8003b22 <I2S_IRQHandler+0xbc>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b80      	cmp	r3, #128	; 0x80
 8003b1a:	d102      	bne.n	8003b22 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff45 	bl	80039ac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d122      	bne.n	8003b72 <I2S_IRQHandler+0x10c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d11b      	bne.n	8003b72 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b48:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	f043 0204 	orr.w	r2, r3, #4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff13 	bl	8003998 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b72:	bf00      	nop
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a92      	ldr	r2, [pc, #584]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b96:	4b92      	ldr	r3, [pc, #584]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b98:	e001      	b.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a8b      	ldr	r2, [pc, #556]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003bb4:	4b8a      	ldr	r3, [pc, #552]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bb6:	e001      	b.n	8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc8:	d004      	beq.n	8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 8099 	bne.w	8003d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d107      	bne.n	8003bee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f925 	bl	8003e38 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9c8 	bl	8003f98 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d13a      	bne.n	8003c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d035      	beq.n	8003c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6e      	ldr	r2, [pc, #440]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c26:	4b6e      	ldr	r3, [pc, #440]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c28:	e001      	b.n	8003c2e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4969      	ldr	r1, [pc, #420]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c36:	428b      	cmp	r3, r1
 8003c38:	d101      	bne.n	8003c3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c3a:	4b69      	ldr	r3, [pc, #420]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c3c:	e001      	b.n	8003c42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c46:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	f043 0202 	orr.w	r2, r3, #2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fe88 	bl	8003998 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	f040 80c3 	bne.w	8003e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80bd 	beq.w	8003e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a49      	ldr	r2, [pc, #292]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003cba:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cbc:	e001      	b.n	8003cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4944      	ldr	r1, [pc, #272]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cca:	428b      	cmp	r3, r1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003cce:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cd0:	e001      	b.n	8003cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cda:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	f043 0204 	orr.w	r2, r3, #4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fe4a 	bl	8003998 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d04:	e089      	b.n	8003e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d107      	bne.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8be 	bl	8003e9c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f8fd 	bl	8003f34 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d12f      	bne.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d02a      	beq.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d5c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d68:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d6a:	e001      	b.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4919      	ldr	r1, [pc, #100]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d78:	428b      	cmp	r3, r1
 8003d7a:	d101      	bne.n	8003d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d7c:	4b18      	ldr	r3, [pc, #96]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d7e:	e001      	b.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d88:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	f043 0202 	orr.w	r2, r3, #2
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fdfa 	bl	8003998 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d136      	bne.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d031      	beq.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a07      	ldr	r2, [pc, #28]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dc4:	e001      	b.n	8003dca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003dc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4902      	ldr	r1, [pc, #8]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd2:	428b      	cmp	r3, r1
 8003dd4:	d106      	bne.n	8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003dd6:	4b02      	ldr	r3, [pc, #8]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dd8:	e006      	b.n	8003de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003dda:	bf00      	nop
 8003ddc:	40003800 	.word	0x40003800
 8003de0:	40003400 	.word	0x40003400
 8003de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dec:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dfc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f043 0204 	orr.w	r2, r3, #4
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff fdc0 	bl	8003998 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e18:	e000      	b.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e1a:	bf00      	nop
}
 8003e1c:	bf00      	nop
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c99      	adds	r1, r3, #2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6251      	str	r1, [r2, #36]	; 0x24
 8003e4a:	881a      	ldrh	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d113      	bne.n	8003e92 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ffc9 	bl	8003e24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c99      	adds	r1, r3, #2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6251      	str	r1, [r2, #36]	; 0x24
 8003eae:	8819      	ldrh	r1, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <I2SEx_TxISR_I2SExt+0x90>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <I2SEx_TxISR_I2SExt+0x22>
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <I2SEx_TxISR_I2SExt+0x94>)
 8003ebc:	e001      	b.n	8003ec2 <I2SEx_TxISR_I2SExt+0x26>
 8003ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec2:	460a      	mov	r2, r1
 8003ec4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d121      	bne.n	8003f22 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a12      	ldr	r2, [pc, #72]	; (8003f2c <I2SEx_TxISR_I2SExt+0x90>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <I2SEx_TxISR_I2SExt+0x50>
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <I2SEx_TxISR_I2SExt+0x94>)
 8003eea:	e001      	b.n	8003ef0 <I2SEx_TxISR_I2SExt+0x54>
 8003eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	490d      	ldr	r1, [pc, #52]	; (8003f2c <I2SEx_TxISR_I2SExt+0x90>)
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	d101      	bne.n	8003f00 <I2SEx_TxISR_I2SExt+0x64>
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <I2SEx_TxISR_I2SExt+0x94>)
 8003efe:	e001      	b.n	8003f04 <I2SEx_TxISR_I2SExt+0x68>
 8003f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ff81 	bl	8003e24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40003800 	.word	0x40003800
 8003f30:	40003400 	.word	0x40003400

08003f34 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68d8      	ldr	r0, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	1c99      	adds	r1, r3, #2
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f4c:	b282      	uxth	r2, r0
 8003f4e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d113      	bne.n	8003f90 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f76:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ff4a 	bl	8003e24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a20      	ldr	r2, [pc, #128]	; (8004028 <I2SEx_RxISR_I2SExt+0x90>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <I2SEx_RxISR_I2SExt+0x16>
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <I2SEx_RxISR_I2SExt+0x94>)
 8003fac:	e001      	b.n	8003fb2 <I2SEx_RxISR_I2SExt+0x1a>
 8003fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb2:	68d8      	ldr	r0, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	1c99      	adds	r1, r3, #2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fbe:	b282      	uxth	r2, r0
 8003fc0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d121      	bne.n	800401e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <I2SEx_RxISR_I2SExt+0x90>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d101      	bne.n	8003fe8 <I2SEx_RxISR_I2SExt+0x50>
 8003fe4:	4b11      	ldr	r3, [pc, #68]	; (800402c <I2SEx_RxISR_I2SExt+0x94>)
 8003fe6:	e001      	b.n	8003fec <I2SEx_RxISR_I2SExt+0x54>
 8003fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	490d      	ldr	r1, [pc, #52]	; (8004028 <I2SEx_RxISR_I2SExt+0x90>)
 8003ff4:	428b      	cmp	r3, r1
 8003ff6:	d101      	bne.n	8003ffc <I2SEx_RxISR_I2SExt+0x64>
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <I2SEx_RxISR_I2SExt+0x94>)
 8003ffa:	e001      	b.n	8004000 <I2SEx_RxISR_I2SExt+0x68>
 8003ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004000:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004004:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ff03 	bl	8003e24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40003800 	.word	0x40003800
 800402c:	40003400 	.word	0x40003400

08004030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e267      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d075      	beq.n	800413a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800404e:	4b88      	ldr	r3, [pc, #544]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b04      	cmp	r3, #4
 8004058:	d00c      	beq.n	8004074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405a:	4b85      	ldr	r3, [pc, #532]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004062:	2b08      	cmp	r3, #8
 8004064:	d112      	bne.n	800408c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004066:	4b82      	ldr	r3, [pc, #520]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004072:	d10b      	bne.n	800408c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	4b7e      	ldr	r3, [pc, #504]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d05b      	beq.n	8004138 <HAL_RCC_OscConfig+0x108>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d157      	bne.n	8004138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e242      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d106      	bne.n	80040a4 <HAL_RCC_OscConfig+0x74>
 8004096:	4b76      	ldr	r3, [pc, #472]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a75      	ldr	r2, [pc, #468]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e01d      	b.n	80040e0 <HAL_RCC_OscConfig+0xb0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ac:	d10c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x98>
 80040ae:	4b70      	ldr	r3, [pc, #448]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a6f      	ldr	r2, [pc, #444]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 80040b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4b6d      	ldr	r3, [pc, #436]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6c      	ldr	r2, [pc, #432]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e00b      	b.n	80040e0 <HAL_RCC_OscConfig+0xb0>
 80040c8:	4b69      	ldr	r3, [pc, #420]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a68      	ldr	r2, [pc, #416]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 80040ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4b66      	ldr	r3, [pc, #408]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a65      	ldr	r2, [pc, #404]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 80040da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d013      	beq.n	8004110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fd faa4 	bl	8001634 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f0:	f7fd faa0 	bl	8001634 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	; 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e207      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b5b      	ldr	r3, [pc, #364]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0xc0>
 800410e:	e014      	b.n	800413a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004110:	f7fd fa90 	bl	8001634 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004118:	f7fd fa8c 	bl	8001634 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e1f3      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412a:	4b51      	ldr	r3, [pc, #324]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0xe8>
 8004136:	e000      	b.n	800413a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d063      	beq.n	800420e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004146:	4b4a      	ldr	r3, [pc, #296]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004152:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415a:	2b08      	cmp	r3, #8
 800415c:	d11c      	bne.n	8004198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415e:	4b44      	ldr	r3, [pc, #272]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d116      	bne.n	8004198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416a:	4b41      	ldr	r3, [pc, #260]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_RCC_OscConfig+0x152>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d001      	beq.n	8004182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e1c7      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004182:	4b3b      	ldr	r3, [pc, #236]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4937      	ldr	r1, [pc, #220]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004196:	e03a      	b.n	800420e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d020      	beq.n	80041e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a0:	4b34      	ldr	r3, [pc, #208]	; (8004274 <HAL_RCC_OscConfig+0x244>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a6:	f7fd fa45 	bl	8001634 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ae:	f7fd fa41 	bl	8001634 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e1a8      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c0:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041cc:	4b28      	ldr	r3, [pc, #160]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4925      	ldr	r1, [pc, #148]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	600b      	str	r3, [r1, #0]
 80041e0:	e015      	b.n	800420e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e2:	4b24      	ldr	r3, [pc, #144]	; (8004274 <HAL_RCC_OscConfig+0x244>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fd fa24 	bl	8001634 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f0:	f7fd fa20 	bl	8001634 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e187      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d036      	beq.n	8004288 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004222:	4b15      	ldr	r3, [pc, #84]	; (8004278 <HAL_RCC_OscConfig+0x248>)
 8004224:	2201      	movs	r2, #1
 8004226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fd fa04 	bl	8001634 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004230:	f7fd fa00 	bl	8001634 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e167      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCC_OscConfig+0x240>)
 8004244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x200>
 800424e:	e01b      	b.n	8004288 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_OscConfig+0x248>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004256:	f7fd f9ed 	bl	8001634 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800425c:	e00e      	b.n	800427c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425e:	f7fd f9e9 	bl	8001634 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d907      	bls.n	800427c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e150      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
 8004270:	40023800 	.word	0x40023800
 8004274:	42470000 	.word	0x42470000
 8004278:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800427c:	4b88      	ldr	r3, [pc, #544]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 800427e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ea      	bne.n	800425e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8097 	beq.w	80043c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004296:	2300      	movs	r3, #0
 8004298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800429a:	4b81      	ldr	r3, [pc, #516]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10f      	bne.n	80042c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	4b7d      	ldr	r3, [pc, #500]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	4a7c      	ldr	r2, [pc, #496]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b4:	6413      	str	r3, [r2, #64]	; 0x40
 80042b6:	4b7a      	ldr	r3, [pc, #488]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c2:	2301      	movs	r3, #1
 80042c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c6:	4b77      	ldr	r3, [pc, #476]	; (80044a4 <HAL_RCC_OscConfig+0x474>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d118      	bne.n	8004304 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d2:	4b74      	ldr	r3, [pc, #464]	; (80044a4 <HAL_RCC_OscConfig+0x474>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a73      	ldr	r2, [pc, #460]	; (80044a4 <HAL_RCC_OscConfig+0x474>)
 80042d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042de:	f7fd f9a9 	bl	8001634 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e6:	f7fd f9a5 	bl	8001634 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e10c      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f8:	4b6a      	ldr	r3, [pc, #424]	; (80044a4 <HAL_RCC_OscConfig+0x474>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d106      	bne.n	800431a <HAL_RCC_OscConfig+0x2ea>
 800430c:	4b64      	ldr	r3, [pc, #400]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	4a63      	ldr	r2, [pc, #396]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	6713      	str	r3, [r2, #112]	; 0x70
 8004318:	e01c      	b.n	8004354 <HAL_RCC_OscConfig+0x324>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b05      	cmp	r3, #5
 8004320:	d10c      	bne.n	800433c <HAL_RCC_OscConfig+0x30c>
 8004322:	4b5f      	ldr	r3, [pc, #380]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	4a5e      	ldr	r2, [pc, #376]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004328:	f043 0304 	orr.w	r3, r3, #4
 800432c:	6713      	str	r3, [r2, #112]	; 0x70
 800432e:	4b5c      	ldr	r3, [pc, #368]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4a5b      	ldr	r2, [pc, #364]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	6713      	str	r3, [r2, #112]	; 0x70
 800433a:	e00b      	b.n	8004354 <HAL_RCC_OscConfig+0x324>
 800433c:	4b58      	ldr	r3, [pc, #352]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	4a57      	ldr	r2, [pc, #348]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	6713      	str	r3, [r2, #112]	; 0x70
 8004348:	4b55      	ldr	r3, [pc, #340]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	4a54      	ldr	r2, [pc, #336]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 800434e:	f023 0304 	bic.w	r3, r3, #4
 8004352:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d015      	beq.n	8004388 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435c:	f7fd f96a 	bl	8001634 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004362:	e00a      	b.n	800437a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004364:	f7fd f966 	bl	8001634 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e0cb      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437a:	4b49      	ldr	r3, [pc, #292]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0ee      	beq.n	8004364 <HAL_RCC_OscConfig+0x334>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004388:	f7fd f954 	bl	8001634 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004390:	f7fd f950 	bl	8001634 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	; 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e0b5      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a6:	4b3e      	ldr	r3, [pc, #248]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1ee      	bne.n	8004390 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b8:	4b39      	ldr	r3, [pc, #228]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	4a38      	ldr	r2, [pc, #224]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 80043be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80a1 	beq.w	8004510 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ce:	4b34      	ldr	r3, [pc, #208]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d05c      	beq.n	8004494 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d141      	bne.n	8004466 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e2:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <HAL_RCC_OscConfig+0x478>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fd f924 	bl	8001634 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fd f920 	bl	8001634 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e087      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	019b      	lsls	r3, r3, #6
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	3b01      	subs	r3, #1
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	491b      	ldr	r1, [pc, #108]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_RCC_OscConfig+0x478>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7fd f8f9 	bl	8001634 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004446:	f7fd f8f5 	bl	8001634 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e05c      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004458:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x416>
 8004464:	e054      	b.n	8004510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <HAL_RCC_OscConfig+0x478>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446c:	f7fd f8e2 	bl	8001634 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004474:	f7fd f8de 	bl	8001634 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e045      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x444>
 8004492:	e03d      	b.n	8004510 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d107      	bne.n	80044ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e038      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40007000 	.word	0x40007000
 80044a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HAL_RCC_OscConfig+0x4ec>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d028      	beq.n	800450c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d121      	bne.n	800450c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d11a      	bne.n	800450c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044dc:	4013      	ands	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d111      	bne.n	800450c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	3b01      	subs	r3, #1
 80044f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d107      	bne.n	800450c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800

08004520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0cc      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004534:	4b68      	ldr	r3, [pc, #416]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d90c      	bls.n	800455c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b65      	ldr	r3, [pc, #404]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b63      	ldr	r3, [pc, #396]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0b8      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d020      	beq.n	80045aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004574:	4b59      	ldr	r3, [pc, #356]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a58      	ldr	r2, [pc, #352]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800457e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800458c:	4b53      	ldr	r3, [pc, #332]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a52      	ldr	r2, [pc, #328]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004598:	4b50      	ldr	r3, [pc, #320]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	494d      	ldr	r1, [pc, #308]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d044      	beq.n	8004640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d107      	bne.n	80045ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	4b47      	ldr	r3, [pc, #284]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d119      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e07f      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d003      	beq.n	80045de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045de:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e06f      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ee:	4b3b      	ldr	r3, [pc, #236]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e067      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fe:	4b37      	ldr	r3, [pc, #220]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 0203 	bic.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	4934      	ldr	r1, [pc, #208]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	4313      	orrs	r3, r2
 800460e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004610:	f7fd f810 	bl	8001634 <HAL_GetTick>
 8004614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	e00a      	b.n	800462e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004618:	f7fd f80c 	bl	8001634 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e04f      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	4b2b      	ldr	r3, [pc, #172]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 020c 	and.w	r2, r3, #12
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	429a      	cmp	r2, r3
 800463e:	d1eb      	bne.n	8004618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004640:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d20c      	bcs.n	8004668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b22      	ldr	r3, [pc, #136]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e032      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004674:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4916      	ldr	r1, [pc, #88]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004692:	4b12      	ldr	r3, [pc, #72]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	490e      	ldr	r1, [pc, #56]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046a6:	f000 f821 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 80046aa:	4602      	mov	r2, r0
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	490a      	ldr	r1, [pc, #40]	; (80046e0 <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	5ccb      	ldrb	r3, [r1, r3]
 80046ba:	fa22 f303 	lsr.w	r3, r2, r3
 80046be:	4a09      	ldr	r2, [pc, #36]	; (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x1c8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fc ff70 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023c00 	.word	0x40023c00
 80046dc:	40023800 	.word	0x40023800
 80046e0:	080094e8 	.word	0x080094e8
 80046e4:	20000144 	.word	0x20000144
 80046e8:	20000148 	.word	0x20000148

080046ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f0:	b094      	sub	sp, #80	; 0x50
 80046f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	647b      	str	r3, [r7, #68]	; 0x44
 80046f8:	2300      	movs	r3, #0
 80046fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046fc:	2300      	movs	r3, #0
 80046fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004704:	4b79      	ldr	r3, [pc, #484]	; (80048ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 030c 	and.w	r3, r3, #12
 800470c:	2b08      	cmp	r3, #8
 800470e:	d00d      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x40>
 8004710:	2b08      	cmp	r3, #8
 8004712:	f200 80e1 	bhi.w	80048d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_RCC_GetSysClockFreq+0x34>
 800471a:	2b04      	cmp	r3, #4
 800471c:	d003      	beq.n	8004726 <HAL_RCC_GetSysClockFreq+0x3a>
 800471e:	e0db      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004720:	4b73      	ldr	r3, [pc, #460]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004722:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004724:	e0db      	b.n	80048de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004726:	4b73      	ldr	r3, [pc, #460]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004728:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800472a:	e0d8      	b.n	80048de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800472c:	4b6f      	ldr	r3, [pc, #444]	; (80048ec <HAL_RCC_GetSysClockFreq+0x200>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004734:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004736:	4b6d      	ldr	r3, [pc, #436]	; (80048ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d063      	beq.n	800480a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004742:	4b6a      	ldr	r3, [pc, #424]	; (80048ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	099b      	lsrs	r3, r3, #6
 8004748:	2200      	movs	r2, #0
 800474a:	63bb      	str	r3, [r7, #56]	; 0x38
 800474c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
 8004756:	2300      	movs	r3, #0
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
 800475a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800475e:	4622      	mov	r2, r4
 8004760:	462b      	mov	r3, r5
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f04f 0100 	mov.w	r1, #0
 800476a:	0159      	lsls	r1, r3, #5
 800476c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004770:	0150      	lsls	r0, r2, #5
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4621      	mov	r1, r4
 8004778:	1a51      	subs	r1, r2, r1
 800477a:	6139      	str	r1, [r7, #16]
 800477c:	4629      	mov	r1, r5
 800477e:	eb63 0301 	sbc.w	r3, r3, r1
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004790:	4659      	mov	r1, fp
 8004792:	018b      	lsls	r3, r1, #6
 8004794:	4651      	mov	r1, sl
 8004796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800479a:	4651      	mov	r1, sl
 800479c:	018a      	lsls	r2, r1, #6
 800479e:	4651      	mov	r1, sl
 80047a0:	ebb2 0801 	subs.w	r8, r2, r1
 80047a4:	4659      	mov	r1, fp
 80047a6:	eb63 0901 	sbc.w	r9, r3, r1
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047be:	4690      	mov	r8, r2
 80047c0:	4699      	mov	r9, r3
 80047c2:	4623      	mov	r3, r4
 80047c4:	eb18 0303 	adds.w	r3, r8, r3
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	462b      	mov	r3, r5
 80047cc:	eb49 0303 	adc.w	r3, r9, r3
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047de:	4629      	mov	r1, r5
 80047e0:	024b      	lsls	r3, r1, #9
 80047e2:	4621      	mov	r1, r4
 80047e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047e8:	4621      	mov	r1, r4
 80047ea:	024a      	lsls	r2, r1, #9
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f2:	2200      	movs	r2, #0
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047fc:	f7fb fce4 	bl	80001c8 <__aeabi_uldivmod>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4613      	mov	r3, r2
 8004806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004808:	e058      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480a:	4b38      	ldr	r3, [pc, #224]	; (80048ec <HAL_RCC_GetSysClockFreq+0x200>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	099b      	lsrs	r3, r3, #6
 8004810:	2200      	movs	r2, #0
 8004812:	4618      	mov	r0, r3
 8004814:	4611      	mov	r1, r2
 8004816:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800481a:	623b      	str	r3, [r7, #32]
 800481c:	2300      	movs	r3, #0
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004824:	4642      	mov	r2, r8
 8004826:	464b      	mov	r3, r9
 8004828:	f04f 0000 	mov.w	r0, #0
 800482c:	f04f 0100 	mov.w	r1, #0
 8004830:	0159      	lsls	r1, r3, #5
 8004832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004836:	0150      	lsls	r0, r2, #5
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4641      	mov	r1, r8
 800483e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004842:	4649      	mov	r1, r9
 8004844:	eb63 0b01 	sbc.w	fp, r3, r1
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004854:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004858:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800485c:	ebb2 040a 	subs.w	r4, r2, sl
 8004860:	eb63 050b 	sbc.w	r5, r3, fp
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	00eb      	lsls	r3, r5, #3
 800486e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004872:	00e2      	lsls	r2, r4, #3
 8004874:	4614      	mov	r4, r2
 8004876:	461d      	mov	r5, r3
 8004878:	4643      	mov	r3, r8
 800487a:	18e3      	adds	r3, r4, r3
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	464b      	mov	r3, r9
 8004880:	eb45 0303 	adc.w	r3, r5, r3
 8004884:	607b      	str	r3, [r7, #4]
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004892:	4629      	mov	r1, r5
 8004894:	028b      	lsls	r3, r1, #10
 8004896:	4621      	mov	r1, r4
 8004898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800489c:	4621      	mov	r1, r4
 800489e:	028a      	lsls	r2, r1, #10
 80048a0:	4610      	mov	r0, r2
 80048a2:	4619      	mov	r1, r3
 80048a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a6:	2200      	movs	r2, #0
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	61fa      	str	r2, [r7, #28]
 80048ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b0:	f7fb fc8a 	bl	80001c8 <__aeabi_uldivmod>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4613      	mov	r3, r2
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_RCC_GetSysClockFreq+0x200>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	0c1b      	lsrs	r3, r3, #16
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	3301      	adds	r3, #1
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048d6:	e002      	b.n	80048de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80048da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3750      	adds	r7, #80	; 0x50
 80048e4:	46bd      	mov	sp, r7
 80048e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800
 80048f0:	00f42400 	.word	0x00f42400
 80048f4:	007a1200 	.word	0x007a1200

080048f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048fc:	4b03      	ldr	r3, [pc, #12]	; (800490c <HAL_RCC_GetHCLKFreq+0x14>)
 80048fe:	681b      	ldr	r3, [r3, #0]
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000144 	.word	0x20000144

08004910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004914:	f7ff fff0 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8004918:	4602      	mov	r2, r0
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	0a9b      	lsrs	r3, r3, #10
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	4903      	ldr	r1, [pc, #12]	; (8004934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004926:	5ccb      	ldrb	r3, [r1, r3]
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40023800 	.word	0x40023800
 8004934:	080094f8 	.word	0x080094f8

08004938 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800495c:	2b00      	cmp	r3, #0
 800495e:	d035      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004960:	4b62      	ldr	r3, [pc, #392]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004966:	f7fc fe65 	bl	8001634 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800496e:	f7fc fe61 	bl	8001634 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e0b0      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004980:	4b5b      	ldr	r3, [pc, #364]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f0      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	019a      	lsls	r2, r3, #6
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	071b      	lsls	r3, r3, #28
 8004998:	4955      	ldr	r1, [pc, #340]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049a0:	4b52      	ldr	r3, [pc, #328]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049a6:	f7fc fe45 	bl	8001634 <HAL_GetTick>
 80049aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049ae:	f7fc fe41 	bl	8001634 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e090      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049c0:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8083 	beq.w	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	4b44      	ldr	r3, [pc, #272]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	4a43      	ldr	r2, [pc, #268]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ea:	4b41      	ldr	r3, [pc, #260]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049f6:	4b3f      	ldr	r3, [pc, #252]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a3e      	ldr	r2, [pc, #248]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a02:	f7fc fe17 	bl	8001634 <HAL_GetTick>
 8004a06:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a0a:	f7fc fe13 	bl	8001634 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e062      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a1c:	4b35      	ldr	r3, [pc, #212]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a28:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02f      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d028      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a46:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a56:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a5c:	4a24      	ldr	r2, [pc, #144]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a62:	4b23      	ldr	r3, [pc, #140]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d114      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a6e:	f7fc fde1 	bl	8001634 <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fc fddd 	bl	8001634 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e02a      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8c:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0ee      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa4:	d10d      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004aa6:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aba:	490d      	ldr	r1, [pc, #52]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	608b      	str	r3, [r1, #8]
 8004ac0:	e005      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004acc:	6093      	str	r3, [r2, #8]
 8004ace:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ada:	4905      	ldr	r1, [pc, #20]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	42470068 	.word	0x42470068
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40007000 	.word	0x40007000
 8004af8:	42470e40 	.word	0x42470e40

08004afc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d13e      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b1a:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d12f      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b30:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b32:	617b      	str	r3, [r7, #20]
          break;
 8004b34:	e02f      	b.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b36:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b42:	d108      	bne.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b44:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b4c:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	e007      	b.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b56:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b5e:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b66:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6c:	099b      	lsrs	r3, r3, #6
 8004b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	fb02 f303 	mul.w	r3, r2, r3
 8004b78:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b80:	0f1b      	lsrs	r3, r3, #28
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]
          break;
 8004b8e:	e002      	b.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
          break;
 8004b94:	bf00      	nop
        }
      }
      break;
 8004b96:	bf00      	nop
    }
  }
  return frequency;
 8004b98:	697b      	ldr	r3, [r7, #20]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	00bb8000 	.word	0x00bb8000
 8004bb0:	007a1200 	.word	0x007a1200
 8004bb4:	00f42400 	.word	0x00f42400

08004bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07b      	b.n	8004cc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d108      	bne.n	8004be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bda:	d009      	beq.n	8004bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	61da      	str	r2, [r3, #28]
 8004be2:	e005      	b.n	8004bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fc fa24 	bl	8001058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	ea42 0103 	orr.w	r1, r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	f003 0104 	and.w	r1, r3, #4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f003 0210 	and.w	r2, r3, #16
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e041      	b.n	8004d60 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fc fb85 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f000 fca9 	bl	8005660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d001      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e04e      	b.n	8004e1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a23      	ldr	r2, [pc, #140]	; (8004e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d022      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004daa:	d01d      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d018      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1e      	ldr	r2, [pc, #120]	; (8004e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d013      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1c      	ldr	r2, [pc, #112]	; (8004e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00e      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1b      	ldr	r2, [pc, #108]	; (8004e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a19      	ldr	r2, [pc, #100]	; (8004e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a18      	ldr	r2, [pc, #96]	; (8004e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d111      	bne.n	8004e0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b06      	cmp	r3, #6
 8004df8:	d010      	beq.n	8004e1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0a:	e007      	b.n	8004e1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40010400 	.word	0x40010400
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40001800 	.word	0x40001800

08004e48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e041      	b.n	8004ede <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f839 	bl	8004ee6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f000 fbea 	bl	8005660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <HAL_TIM_IC_Start_IT+0x1e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	e013      	b.n	8004f42 <HAL_TIM_IC_Start_IT+0x46>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_IC_Start_IT+0x2e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	e00b      	b.n	8004f42 <HAL_TIM_IC_Start_IT+0x46>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_IC_Start_IT+0x3e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	e003      	b.n	8004f42 <HAL_TIM_IC_Start_IT+0x46>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <HAL_TIM_IC_Start_IT+0x58>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	e013      	b.n	8004f7c <HAL_TIM_IC_Start_IT+0x80>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d104      	bne.n	8004f64 <HAL_TIM_IC_Start_IT+0x68>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e00b      	b.n	8004f7c <HAL_TIM_IC_Start_IT+0x80>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d104      	bne.n	8004f74 <HAL_TIM_IC_Start_IT+0x78>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e003      	b.n	8004f7c <HAL_TIM_IC_Start_IT+0x80>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f7e:	7bbb      	ldrb	r3, [r7, #14]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d102      	bne.n	8004f8a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f84:	7b7b      	ldrb	r3, [r7, #13]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d001      	beq.n	8004f8e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e0cc      	b.n	8005128 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_IC_Start_IT+0xa2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	e013      	b.n	8004fc6 <HAL_TIM_IC_Start_IT+0xca>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_IC_Start_IT+0xb2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fac:	e00b      	b.n	8004fc6 <HAL_TIM_IC_Start_IT+0xca>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_IC_Start_IT+0xc2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fbc:	e003      	b.n	8004fc6 <HAL_TIM_IC_Start_IT+0xca>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <HAL_TIM_IC_Start_IT+0xda>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fd4:	e013      	b.n	8004ffe <HAL_TIM_IC_Start_IT+0x102>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d104      	bne.n	8004fe6 <HAL_TIM_IC_Start_IT+0xea>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fe4:	e00b      	b.n	8004ffe <HAL_TIM_IC_Start_IT+0x102>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d104      	bne.n	8004ff6 <HAL_TIM_IC_Start_IT+0xfa>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff4:	e003      	b.n	8004ffe <HAL_TIM_IC_Start_IT+0x102>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b0c      	cmp	r3, #12
 8005002:	d841      	bhi.n	8005088 <HAL_TIM_IC_Start_IT+0x18c>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <HAL_TIM_IC_Start_IT+0x110>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005041 	.word	0x08005041
 8005010:	08005089 	.word	0x08005089
 8005014:	08005089 	.word	0x08005089
 8005018:	08005089 	.word	0x08005089
 800501c:	08005053 	.word	0x08005053
 8005020:	08005089 	.word	0x08005089
 8005024:	08005089 	.word	0x08005089
 8005028:	08005089 	.word	0x08005089
 800502c:	08005065 	.word	0x08005065
 8005030:	08005089 	.word	0x08005089
 8005034:	08005089 	.word	0x08005089
 8005038:	08005089 	.word	0x08005089
 800503c:	08005077 	.word	0x08005077
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0202 	orr.w	r2, r2, #2
 800504e:	60da      	str	r2, [r3, #12]
      break;
 8005050:	e01d      	b.n	800508e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0204 	orr.w	r2, r2, #4
 8005060:	60da      	str	r2, [r3, #12]
      break;
 8005062:	e014      	b.n	800508e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0208 	orr.w	r2, r2, #8
 8005072:	60da      	str	r2, [r3, #12]
      break;
 8005074:	e00b      	b.n	800508e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0210 	orr.w	r2, r2, #16
 8005084:	60da      	str	r2, [r3, #12]
      break;
 8005086:	e002      	b.n	800508e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
      break;
 800508c:	bf00      	nop
  }

  if (status == HAL_OK)
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d148      	bne.n	8005126 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2201      	movs	r2, #1
 800509a:	6839      	ldr	r1, [r7, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fd43 	bl	8005b28 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a22      	ldr	r2, [pc, #136]	; (8005130 <HAL_TIM_IC_Start_IT+0x234>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b4:	d01d      	beq.n	80050f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <HAL_TIM_IC_Start_IT+0x238>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d018      	beq.n	80050f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1c      	ldr	r2, [pc, #112]	; (8005138 <HAL_TIM_IC_Start_IT+0x23c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1b      	ldr	r2, [pc, #108]	; (800513c <HAL_TIM_IC_Start_IT+0x240>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a19      	ldr	r2, [pc, #100]	; (8005140 <HAL_TIM_IC_Start_IT+0x244>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a18      	ldr	r2, [pc, #96]	; (8005144 <HAL_TIM_IC_Start_IT+0x248>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a16      	ldr	r2, [pc, #88]	; (8005148 <HAL_TIM_IC_Start_IT+0x24c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d111      	bne.n	8005116 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b06      	cmp	r3, #6
 8005102:	d010      	beq.n	8005126 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005114:	e007      	b.n	8005126 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0201 	orr.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005126:	7bfb      	ldrb	r3, [r7, #15]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40010400 	.word	0x40010400
 8005144:	40014000 	.word	0x40014000
 8005148:	40001800 	.word	0x40001800

0800514c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b02      	cmp	r3, #2
 8005160:	d122      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b02      	cmp	r3, #2
 800516e:	d11b      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0202 	mvn.w	r2, #2
 8005178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fb fec4 	bl	8000f1c <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa43 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fa4a 	bl	8005636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d122      	bne.n	80051fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d11b      	bne.n	80051fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0204 	mvn.w	r2, #4
 80051cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fb fe9a 	bl	8000f1c <HAL_TIM_IC_CaptureCallback>
 80051e8:	e005      	b.n	80051f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa19 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fa20 	bl	8005636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b08      	cmp	r3, #8
 8005208:	d122      	bne.n	8005250 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b08      	cmp	r3, #8
 8005216:	d11b      	bne.n	8005250 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0208 	mvn.w	r2, #8
 8005220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2204      	movs	r2, #4
 8005226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fb fe70 	bl	8000f1c <HAL_TIM_IC_CaptureCallback>
 800523c:	e005      	b.n	800524a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9ef 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f9f6 	bl	8005636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b10      	cmp	r3, #16
 800525c:	d122      	bne.n	80052a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b10      	cmp	r3, #16
 800526a:	d11b      	bne.n	80052a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0210 	mvn.w	r2, #16
 8005274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2208      	movs	r2, #8
 800527a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fb fe46 	bl	8000f1c <HAL_TIM_IC_CaptureCallback>
 8005290:	e005      	b.n	800529e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f9c5 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f9cc 	bl	8005636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d10e      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d107      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0201 	mvn.w	r2, #1
 80052c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fb fe56 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	2b80      	cmp	r3, #128	; 0x80
 80052dc:	d10e      	bne.n	80052fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e8:	2b80      	cmp	r3, #128	; 0x80
 80052ea:	d107      	bne.n	80052fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fcc2 	bl	8005c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d10e      	bne.n	8005328 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d107      	bne.n	8005328 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f991 	bl	800564a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b20      	cmp	r3, #32
 8005334:	d10e      	bne.n	8005354 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b20      	cmp	r3, #32
 8005342:	d107      	bne.n	8005354 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0220 	mvn.w	r2, #32
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fc8c 	bl	8005c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005354:	bf00      	nop
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005376:	2302      	movs	r3, #2
 8005378:	e088      	b.n	800548c <HAL_TIM_IC_ConfigChannel+0x130>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d11b      	bne.n	80053c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	6819      	ldr	r1, [r3, #0]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f000 fa02 	bl	80057a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 020c 	bic.w	r2, r2, #12
 80053aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6999      	ldr	r1, [r3, #24]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	619a      	str	r2, [r3, #24]
 80053be:	e060      	b.n	8005482 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d11c      	bne.n	8005400 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6819      	ldr	r1, [r3, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f000 fa86 	bl	80058e6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6999      	ldr	r1, [r3, #24]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	021a      	lsls	r2, r3, #8
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	619a      	str	r2, [r3, #24]
 80053fe:	e040      	b.n	8005482 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b08      	cmp	r3, #8
 8005404:	d11b      	bne.n	800543e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	6819      	ldr	r1, [r3, #0]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f000 fad3 	bl	80059c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 020c 	bic.w	r2, r2, #12
 8005428:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69d9      	ldr	r1, [r3, #28]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	61da      	str	r2, [r3, #28]
 800543c:	e021      	b.n	8005482 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	d11c      	bne.n	800547e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6819      	ldr	r1, [r3, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f000 faf0 	bl	8005a38 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005466:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69d9      	ldr	r1, [r3, #28]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	021a      	lsls	r2, r3, #8
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	61da      	str	r2, [r3, #28]
 800547c:	e001      	b.n	8005482 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800548a:	7dfb      	ldrb	r3, [r7, #23]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIM_ConfigClockSource+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e0b4      	b.n	800561a <HAL_TIM_ConfigClockSource+0x186>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e8:	d03e      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0xd4>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ee:	f200 8087 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	f000 8086 	beq.w	8005606 <HAL_TIM_ConfigClockSource+0x172>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d87f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005500:	2b70      	cmp	r3, #112	; 0x70
 8005502:	d01a      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xa6>
 8005504:	2b70      	cmp	r3, #112	; 0x70
 8005506:	d87b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005508:	2b60      	cmp	r3, #96	; 0x60
 800550a:	d050      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x11a>
 800550c:	2b60      	cmp	r3, #96	; 0x60
 800550e:	d877      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005510:	2b50      	cmp	r3, #80	; 0x50
 8005512:	d03c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0xfa>
 8005514:	2b50      	cmp	r3, #80	; 0x50
 8005516:	d873      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d058      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x13a>
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d86f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b30      	cmp	r3, #48	; 0x30
 8005522:	d064      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005524:	2b30      	cmp	r3, #48	; 0x30
 8005526:	d86b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b20      	cmp	r3, #32
 800552a:	d060      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d867      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d05c      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005534:	2b10      	cmp	r3, #16
 8005536:	d05a      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	e062      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6899      	ldr	r1, [r3, #8]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f000 facd 	bl	8005ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800555c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	609a      	str	r2, [r3, #8]
      break;
 8005566:	e04f      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6899      	ldr	r1, [r3, #8]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f000 fab6 	bl	8005ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800558a:	609a      	str	r2, [r3, #8]
      break;
 800558c:	e03c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	461a      	mov	r2, r3
 800559c:	f000 f974 	bl	8005888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2150      	movs	r1, #80	; 0x50
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fa83 	bl	8005ab2 <TIM_ITRx_SetConfig>
      break;
 80055ac:	e02c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 f9d0 	bl	8005960 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2160      	movs	r1, #96	; 0x60
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fa73 	bl	8005ab2 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e01c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 f954 	bl	8005888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2140      	movs	r1, #64	; 0x40
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fa63 	bl	8005ab2 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e00c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f000 fa5a 	bl	8005ab2 <TIM_ITRx_SetConfig>
      break;
 80055fe:	e003      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
      break;
 8005604:	e000      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a40      	ldr	r2, [pc, #256]	; (8005774 <TIM_Base_SetConfig+0x114>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567e:	d00f      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a3d      	ldr	r2, [pc, #244]	; (8005778 <TIM_Base_SetConfig+0x118>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00b      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a3c      	ldr	r2, [pc, #240]	; (800577c <TIM_Base_SetConfig+0x11c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a3b      	ldr	r2, [pc, #236]	; (8005780 <TIM_Base_SetConfig+0x120>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a3a      	ldr	r2, [pc, #232]	; (8005784 <TIM_Base_SetConfig+0x124>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d108      	bne.n	80056b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2f      	ldr	r2, [pc, #188]	; (8005774 <TIM_Base_SetConfig+0x114>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d02b      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d027      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2c      	ldr	r2, [pc, #176]	; (8005778 <TIM_Base_SetConfig+0x118>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d023      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2b      	ldr	r2, [pc, #172]	; (800577c <TIM_Base_SetConfig+0x11c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01f      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <TIM_Base_SetConfig+0x120>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d01b      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a29      	ldr	r2, [pc, #164]	; (8005784 <TIM_Base_SetConfig+0x124>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d017      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a28      	ldr	r2, [pc, #160]	; (8005788 <TIM_Base_SetConfig+0x128>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a27      	ldr	r2, [pc, #156]	; (800578c <TIM_Base_SetConfig+0x12c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00f      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a26      	ldr	r2, [pc, #152]	; (8005790 <TIM_Base_SetConfig+0x130>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a25      	ldr	r2, [pc, #148]	; (8005794 <TIM_Base_SetConfig+0x134>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a24      	ldr	r2, [pc, #144]	; (8005798 <TIM_Base_SetConfig+0x138>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a23      	ldr	r2, [pc, #140]	; (800579c <TIM_Base_SetConfig+0x13c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d108      	bne.n	8005724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <TIM_Base_SetConfig+0x114>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_Base_SetConfig+0xf8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a0c      	ldr	r2, [pc, #48]	; (8005784 <TIM_Base_SetConfig+0x124>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d103      	bne.n	8005760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	615a      	str	r2, [r3, #20]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40010400 	.word	0x40010400
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800
 8005794:	40001800 	.word	0x40001800
 8005798:	40001c00 	.word	0x40001c00
 800579c:	40002000 	.word	0x40002000

080057a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0201 	bic.w	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a28      	ldr	r2, [pc, #160]	; (800586c <TIM_TI1_SetConfig+0xcc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01b      	beq.n	8005806 <TIM_TI1_SetConfig+0x66>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d4:	d017      	beq.n	8005806 <TIM_TI1_SetConfig+0x66>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a25      	ldr	r2, [pc, #148]	; (8005870 <TIM_TI1_SetConfig+0xd0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <TIM_TI1_SetConfig+0x66>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4a24      	ldr	r2, [pc, #144]	; (8005874 <TIM_TI1_SetConfig+0xd4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00f      	beq.n	8005806 <TIM_TI1_SetConfig+0x66>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4a23      	ldr	r2, [pc, #140]	; (8005878 <TIM_TI1_SetConfig+0xd8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00b      	beq.n	8005806 <TIM_TI1_SetConfig+0x66>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4a22      	ldr	r2, [pc, #136]	; (800587c <TIM_TI1_SetConfig+0xdc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <TIM_TI1_SetConfig+0x66>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4a21      	ldr	r2, [pc, #132]	; (8005880 <TIM_TI1_SetConfig+0xe0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_TI1_SetConfig+0x66>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4a20      	ldr	r2, [pc, #128]	; (8005884 <TIM_TI1_SetConfig+0xe4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d101      	bne.n	800580a <TIM_TI1_SetConfig+0x6a>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <TIM_TI1_SetConfig+0x6c>
 800580a:	2300      	movs	r3, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e003      	b.n	800582a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005830:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	b2db      	uxtb	r3, r3
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f023 030a 	bic.w	r3, r3, #10
 8005844:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f003 030a 	and.w	r3, r3, #10
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40010000 	.word	0x40010000
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40000c00 	.word	0x40000c00
 800587c:	40010400 	.word	0x40010400
 8005880:	40014000 	.word	0x40014000
 8005884:	40001800 	.word	0x40001800

08005888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 030a 	bic.w	r3, r3, #10
 80058c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	f023 0210 	bic.w	r2, r3, #16
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005912:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	031b      	lsls	r3, r3, #12
 800592a:	b29b      	uxth	r3, r3
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005938:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	f023 0210 	bic.w	r2, r3, #16
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800598a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	031b      	lsls	r3, r3, #12
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800599c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	bf00      	nop
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	031b      	lsls	r3, r3, #12
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005a8a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	031b      	lsls	r3, r3, #12
 8005a90:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	621a      	str	r2, [r3, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f043 0307 	orr.w	r3, r3, #7
 8005ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	609a      	str	r2, [r3, #8]
}
 8005adc:	bf00      	nop
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	021a      	lsls	r2, r3, #8
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	609a      	str	r2, [r3, #8]
}
 8005b1c:	bf00      	nop
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a1a      	ldr	r2, [r3, #32]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a1a      	ldr	r2, [r3, #32]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 031f 	and.w	r3, r3, #31
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b60:	431a      	orrs	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e05a      	b.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a21      	ldr	r2, [pc, #132]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d022      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd8:	d01d      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d018      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d013      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1a      	ldr	r2, [pc, #104]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00e      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d009      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d004      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d10c      	bne.n	8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40010000 	.word	0x40010000
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800
 8005c5c:	40000c00 	.word	0x40000c00
 8005c60:	40010400 	.word	0x40010400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40001800 	.word	0x40001800

08005c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c94:	b084      	sub	sp, #16
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	f107 001c 	add.w	r0, r7, #28
 8005ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d122      	bne.n	8005cf2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f9c0 	bl	800606c <USB_CoreReset>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]
 8005cf0:	e01a      	b.n	8005d28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f9b4 	bl	800606c <USB_CoreReset>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
 8005d1a:	e005      	b.n	8005d28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d10b      	bne.n	8005d46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f043 0206 	orr.w	r2, r3, #6
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f043 0220 	orr.w	r2, r3, #32
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d52:	b004      	add	sp, #16
 8005d54:	4770      	bx	lr

08005d56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f043 0201 	orr.w	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f023 0201 	bic.w	r2, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d115      	bne.n	8005de8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dc8:	2001      	movs	r0, #1
 8005dca:	f7fb fc3f 	bl	800164c <HAL_Delay>
      ms++;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f93a 	bl	800604e <USB_GetMode>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d01e      	beq.n	8005e1e <USB_SetCurrentMode+0x84>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b31      	cmp	r3, #49	; 0x31
 8005de4:	d9f0      	bls.n	8005dc8 <USB_SetCurrentMode+0x2e>
 8005de6:	e01a      	b.n	8005e1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d115      	bne.n	8005e1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	f7fb fc26 	bl	800164c <HAL_Delay>
      ms++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3301      	adds	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f921 	bl	800604e <USB_GetMode>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <USB_SetCurrentMode+0x84>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b31      	cmp	r3, #49	; 0x31
 8005e16:	d9f0      	bls.n	8005dfa <USB_SetCurrentMode+0x60>
 8005e18:	e001      	b.n	8005e1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e005      	b.n	8005e2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b32      	cmp	r3, #50	; 0x32
 8005e22:	d101      	bne.n	8005e28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <USB_FlushTxFifo+0x64>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d901      	bls.n	8005e54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e01b      	b.n	8005e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	daf2      	bge.n	8005e42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	019b      	lsls	r3, r3, #6
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <USB_FlushTxFifo+0x64>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e006      	b.n	8005e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d0f0      	beq.n	8005e6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	00030d40 	.word	0x00030d40

08005e9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4a11      	ldr	r2, [pc, #68]	; (8005ef8 <USB_FlushRxFifo+0x5c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e018      	b.n	8005eec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	daf2      	bge.n	8005ea8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2210      	movs	r2, #16
 8005eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4a08      	ldr	r2, [pc, #32]	; (8005ef8 <USB_FlushRxFifo+0x5c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d901      	bls.n	8005ede <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e006      	b.n	8005eec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0310 	and.w	r3, r3, #16
 8005ee6:	2b10      	cmp	r3, #16
 8005ee8:	d0f0      	beq.n	8005ecc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	00030d40 	.word	0x00030d40

08005efc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b089      	sub	sp, #36	; 0x24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4611      	mov	r1, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	71fb      	strb	r3, [r7, #7]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d123      	bne.n	8005f6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f22:	88bb      	ldrh	r3, [r7, #4]
 8005f24:	3303      	adds	r3, #3
 8005f26:	089b      	lsrs	r3, r3, #2
 8005f28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	e018      	b.n	8005f62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	031a      	lsls	r2, r3, #12
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	3301      	adds	r3, #1
 8005f48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	3301      	adds	r3, #1
 8005f54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d3e2      	bcc.n	8005f30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3724      	adds	r7, #36	; 0x24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b08b      	sub	sp, #44	; 0x2c
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	089b      	lsrs	r3, r3, #2
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	623b      	str	r3, [r7, #32]
 8005fa2:	e014      	b.n	8005fce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	3301      	adds	r3, #1
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	623b      	str	r3, [r7, #32]
 8005fce:	6a3a      	ldr	r2, [r7, #32]
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d3e6      	bcc.n	8005fa4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fd6:	8bfb      	ldrh	r3, [r7, #30]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01e      	beq.n	800601a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f107 0310 	add.w	r3, r7, #16
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	701a      	strb	r2, [r3, #0]
      i++;
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	3301      	adds	r3, #1
 8006006:	623b      	str	r3, [r7, #32]
      pDest++;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	3301      	adds	r3, #1
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800600e:	8bfb      	ldrh	r3, [r7, #30]
 8006010:	3b01      	subs	r3, #1
 8006012:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006014:	8bfb      	ldrh	r3, [r7, #30]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1ea      	bne.n	8005ff0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800601c:	4618      	mov	r0, r3
 800601e:	372c      	adds	r7, #44	; 0x2c
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4013      	ands	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006040:	68fb      	ldr	r3, [r7, #12]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f003 0301 	and.w	r3, r3, #1
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3301      	adds	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a13      	ldr	r2, [pc, #76]	; (80060d0 <USB_CoreReset+0x64>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d901      	bls.n	800608a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e01b      	b.n	80060c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	daf2      	bge.n	8006078 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f043 0201 	orr.w	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <USB_CoreReset+0x64>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d901      	bls.n	80060b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e006      	b.n	80060c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d0f0      	beq.n	80060a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	00030d40 	.word	0x00030d40

080060d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060d4:	b084      	sub	sp, #16
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b086      	sub	sp, #24
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060f4:	461a      	mov	r2, r3
 80060f6:	2300      	movs	r3, #0
 80060f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006126:	2b00      	cmp	r3, #0
 8006128:	d018      	beq.n	800615c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d10a      	bne.n	8006146 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800613e:	f043 0304 	orr.w	r3, r3, #4
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	e014      	b.n	8006170 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006154:	f023 0304 	bic.w	r3, r3, #4
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e009      	b.n	8006170 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800616a:	f023 0304 	bic.w	r3, r3, #4
 800616e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006170:	2110      	movs	r1, #16
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff fe5e 	bl	8005e34 <USB_FlushTxFifo>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff fe8a 	bl	8005e9c <USB_FlushRxFifo>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006192:	2300      	movs	r3, #0
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	e015      	b.n	80061c4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a4:	461a      	mov	r2, r3
 80061a6:	f04f 33ff 	mov.w	r3, #4294967295
 80061aa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b8:	461a      	mov	r2, r3
 80061ba:	2300      	movs	r3, #0
 80061bc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	3301      	adds	r3, #1
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d3e5      	bcc.n	8006198 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f04f 32ff 	mov.w	r2, #4294967295
 80061d8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a13      	ldr	r2, [pc, #76]	; (8006240 <USB_HostInit+0x16c>)
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a13      	ldr	r2, [pc, #76]	; (8006244 <USB_HostInit+0x170>)
 80061f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80061fc:	e009      	b.n	8006212 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2280      	movs	r2, #128	; 0x80
 8006202:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a10      	ldr	r2, [pc, #64]	; (8006248 <USB_HostInit+0x174>)
 8006208:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a0f      	ldr	r2, [pc, #60]	; (800624c <USB_HostInit+0x178>)
 800620e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f043 0210 	orr.w	r2, r3, #16
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699a      	ldr	r2, [r3, #24]
 8006228:	4b09      	ldr	r3, [pc, #36]	; (8006250 <USB_HostInit+0x17c>)
 800622a:	4313      	orrs	r3, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006230:	7dfb      	ldrb	r3, [r7, #23]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800623c:	b004      	add	sp, #16
 800623e:	4770      	bx	lr
 8006240:	01000200 	.word	0x01000200
 8006244:	00e00300 	.word	0x00e00300
 8006248:	00600080 	.word	0x00600080
 800624c:	004000e0 	.word	0x004000e0
 8006250:	a3200008 	.word	0xa3200008

08006254 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006272:	f023 0303 	bic.w	r3, r3, #3
 8006276:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	68f9      	ldr	r1, [r7, #12]
 8006288:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800628c:	4313      	orrs	r3, r2
 800628e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d107      	bne.n	80062a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800629c:	461a      	mov	r2, r3
 800629e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80062a2:	6053      	str	r3, [r2, #4]
 80062a4:	e009      	b.n	80062ba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d106      	bne.n	80062ba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b2:	461a      	mov	r2, r3
 80062b4:	f241 7370 	movw	r3, #6000	; 0x1770
 80062b8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80062f8:	2064      	movs	r0, #100	; 0x64
 80062fa:	f7fb f9a7 	bl	800164c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800630a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800630c:	200a      	movs	r0, #10
 800630e:	f7fb f99d 	bl	800164c <HAL_Delay>

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006340:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d109      	bne.n	8006360 <USB_DriveVbus+0x44>
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d106      	bne.n	8006360 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800635a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800635e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	d109      	bne.n	8006380 <USB_DriveVbus+0x64>
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800637a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800637e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	0c5b      	lsrs	r3, r3, #17
 80063ac:	f003 0303 	and.w	r3, r3, #3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	b29b      	uxth	r3, r3
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	4608      	mov	r0, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	461a      	mov	r2, r3
 80063ee:	4603      	mov	r3, r0
 80063f0:	70fb      	strb	r3, [r7, #3]
 80063f2:	460b      	mov	r3, r1
 80063f4:	70bb      	strb	r3, [r7, #2]
 80063f6:	4613      	mov	r3, r2
 80063f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	461a      	mov	r2, r3
 8006410:	f04f 33ff 	mov.w	r3, #4294967295
 8006414:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006416:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800641a:	2b03      	cmp	r3, #3
 800641c:	d87e      	bhi.n	800651c <USB_HC_Init+0x13c>
 800641e:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <USB_HC_Init+0x44>)
 8006420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006424:	08006435 	.word	0x08006435
 8006428:	080064df 	.word	0x080064df
 800642c:	08006435 	.word	0x08006435
 8006430:	080064a1 	.word	0x080064a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006440:	461a      	mov	r2, r3
 8006442:	f240 439d 	movw	r3, #1181	; 0x49d
 8006446:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006448:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800644c:	2b00      	cmp	r3, #0
 800644e:	da10      	bge.n	8006472 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	4413      	add	r3, r2
 8006458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	78fa      	ldrb	r2, [r7, #3]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	440a      	add	r2, r1
 8006466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800646a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800646e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006470:	e057      	b.n	8006522 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d051      	beq.n	8006522 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	4413      	add	r3, r2
 8006486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	78fa      	ldrb	r2, [r7, #3]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	440a      	add	r2, r1
 8006494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006498:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800649c:	60d3      	str	r3, [r2, #12]
      break;
 800649e:	e040      	b.n	8006522 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	461a      	mov	r2, r3
 80064ae:	f240 639d 	movw	r3, #1693	; 0x69d
 80064b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80064b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	da34      	bge.n	8006526 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	78fa      	ldrb	r2, [r7, #3]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064da:	60d3      	str	r3, [r2, #12]
      }

      break;
 80064dc:	e023      	b.n	8006526 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ea:	461a      	mov	r2, r3
 80064ec:	f240 2325 	movw	r3, #549	; 0x225
 80064f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80064f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	da17      	bge.n	800652a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4413      	add	r3, r2
 8006502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	78fa      	ldrb	r2, [r7, #3]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	440a      	add	r2, r1
 8006510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006514:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006518:	60d3      	str	r3, [r2, #12]
      }
      break;
 800651a:	e006      	b.n	800652a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	77fb      	strb	r3, [r7, #31]
      break;
 8006520:	e004      	b.n	800652c <USB_HC_Init+0x14c>
      break;
 8006522:	bf00      	nop
 8006524:	e002      	b.n	800652c <USB_HC_Init+0x14c>
      break;
 8006526:	bf00      	nop
 8006528:	e000      	b.n	800652c <USB_HC_Init+0x14c>
      break;
 800652a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4413      	add	r3, r2
 8006534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	78fa      	ldrb	r2, [r7, #3]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	440a      	add	r2, r1
 8006542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006546:	f043 0302 	orr.w	r3, r3, #2
 800654a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006552:	699a      	ldr	r2, [r3, #24]
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	2101      	movs	r1, #1
 800655c:	fa01 f303 	lsl.w	r3, r1, r3
 8006560:	6939      	ldr	r1, [r7, #16]
 8006562:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006566:	4313      	orrs	r3, r2
 8006568:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006576:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800657a:	2b00      	cmp	r3, #0
 800657c:	da03      	bge.n	8006586 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800657e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	e001      	b.n	800658a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff feff 	bl	800638e <USB_GetHostSpeed>
 8006590:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006592:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006596:	2b02      	cmp	r3, #2
 8006598:	d106      	bne.n	80065a8 <USB_HC_Init+0x1c8>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b02      	cmp	r3, #2
 800659e:	d003      	beq.n	80065a8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80065a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	e001      	b.n	80065ac <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065ac:	787b      	ldrb	r3, [r7, #1]
 80065ae:	059b      	lsls	r3, r3, #22
 80065b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80065b4:	78bb      	ldrb	r3, [r7, #2]
 80065b6:	02db      	lsls	r3, r3, #11
 80065b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80065be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80065c2:	049b      	lsls	r3, r3, #18
 80065c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80065c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80065cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80065d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	0159      	lsls	r1, r3, #5
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	440b      	add	r3, r1
 80065de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065e8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80065ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d003      	beq.n	80065fa <USB_HC_Init+0x21a>
 80065f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d10f      	bne.n	800661a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	78fa      	ldrb	r2, [r7, #3]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	440a      	add	r2, r1
 8006610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006614:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006618:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800661a:	7ffb      	ldrb	r3, [r7, #31]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3720      	adds	r7, #32
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08c      	sub	sp, #48	; 0x30
 8006628:	af02      	add	r7, sp, #8
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	4613      	mov	r3, r2
 8006630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800663c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006640:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664a:	2b00      	cmp	r3, #0
 800664c:	d02d      	beq.n	80066aa <USB_HC_StartXfer+0x86>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	791b      	ldrb	r3, [r3, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d129      	bne.n	80066aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d117      	bne.n	800668c <USB_HC_StartXfer+0x68>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	79db      	ldrb	r3, [r3, #7]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <USB_HC_StartXfer+0x48>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	79db      	ldrb	r3, [r3, #7]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d10f      	bne.n	800668c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	4413      	add	r3, r2
 8006674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	6a3a      	ldr	r2, [r7, #32]
 8006680:	440a      	add	r2, r1
 8006682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <USB_HC_StartXfer+0x86>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	795b      	ldrb	r3, [r3, #5]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d107      	bne.n	80066aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	785b      	ldrb	r3, [r3, #1]
 800669e:	4619      	mov	r1, r3
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fa0f 	bl	8006ac4 <USB_DoPing>
      return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e0f8      	b.n	800689c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d018      	beq.n	80066e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	8912      	ldrh	r2, [r2, #8]
 80066ba:	4413      	add	r3, r2
 80066bc:	3b01      	subs	r3, #1
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	8912      	ldrh	r2, [r2, #8]
 80066c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80066c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80066c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80066ca:	8b7b      	ldrh	r3, [r7, #26]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d90b      	bls.n	80066e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80066d0:	8b7b      	ldrh	r3, [r7, #26]
 80066d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	8912      	ldrh	r2, [r2, #8]
 80066da:	fb03 f202 	mul.w	r2, r3, r2
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	611a      	str	r2, [r3, #16]
 80066e2:	e001      	b.n	80066e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80066e4:	2301      	movs	r3, #1
 80066e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	78db      	ldrb	r3, [r3, #3]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	8912      	ldrh	r2, [r2, #8]
 80066f6:	fb03 f202 	mul.w	r2, r3, r2
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	611a      	str	r2, [r3, #16]
 80066fe:	e003      	b.n	8006708 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	695a      	ldr	r2, [r3, #20]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006710:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006712:	04d9      	lsls	r1, r3, #19
 8006714:	4b63      	ldr	r3, [pc, #396]	; (80068a4 <USB_HC_StartXfer+0x280>)
 8006716:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006718:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	7a9b      	ldrb	r3, [r3, #10]
 800671e:	075b      	lsls	r3, r3, #29
 8006720:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006724:	69f9      	ldr	r1, [r7, #28]
 8006726:	0148      	lsls	r0, r1, #5
 8006728:	6a39      	ldr	r1, [r7, #32]
 800672a:	4401      	add	r1, r0
 800672c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006730:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006732:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006734:	79fb      	ldrb	r3, [r7, #7]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	68d9      	ldr	r1, [r3, #12]
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674a:	460a      	mov	r2, r1
 800674c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	6a3a      	ldr	r2, [r7, #32]
 800677a:	440a      	add	r2, r1
 800677c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006780:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006784:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	4413      	add	r3, r2
 800678e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	7e7b      	ldrb	r3, [r7, #25]
 8006796:	075b      	lsls	r3, r3, #29
 8006798:	69f9      	ldr	r1, [r7, #28]
 800679a:	0148      	lsls	r0, r1, #5
 800679c:	6a39      	ldr	r1, [r7, #32]
 800679e:	4401      	add	r1, r0
 80067a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80067a4:	4313      	orrs	r3, r2
 80067a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	78db      	ldrb	r3, [r3, #3]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ce:	613b      	str	r3, [r7, #16]
 80067d0:	e003      	b.n	80067da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	461a      	mov	r2, r3
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80067f4:	79fb      	ldrb	r3, [r7, #7]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e04e      	b.n	800689c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	78db      	ldrb	r3, [r3, #3]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d149      	bne.n	800689a <USB_HC_StartXfer+0x276>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d045      	beq.n	800689a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	79db      	ldrb	r3, [r3, #7]
 8006812:	2b03      	cmp	r3, #3
 8006814:	d830      	bhi.n	8006878 <USB_HC_StartXfer+0x254>
 8006816:	a201      	add	r2, pc, #4	; (adr r2, 800681c <USB_HC_StartXfer+0x1f8>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	0800682d 	.word	0x0800682d
 8006820:	08006851 	.word	0x08006851
 8006824:	0800682d 	.word	0x0800682d
 8006828:	08006851 	.word	0x08006851
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	3303      	adds	r3, #3
 8006832:	089b      	lsrs	r3, r3, #2
 8006834:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006836:	8afa      	ldrh	r2, [r7, #22]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	b29b      	uxth	r3, r3
 800683e:	429a      	cmp	r2, r3
 8006840:	d91c      	bls.n	800687c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	f043 0220 	orr.w	r2, r3, #32
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	619a      	str	r2, [r3, #24]
        }
        break;
 800684e:	e015      	b.n	800687c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	3303      	adds	r3, #3
 8006856:	089b      	lsrs	r3, r3, #2
 8006858:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800685a:	8afa      	ldrh	r2, [r7, #22]
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	b29b      	uxth	r3, r3
 8006866:	429a      	cmp	r2, r3
 8006868:	d90a      	bls.n	8006880 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	619a      	str	r2, [r3, #24]
        }
        break;
 8006876:	e003      	b.n	8006880 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006878:	bf00      	nop
 800687a:	e002      	b.n	8006882 <USB_HC_StartXfer+0x25e>
        break;
 800687c:	bf00      	nop
 800687e:	e000      	b.n	8006882 <USB_HC_StartXfer+0x25e>
        break;
 8006880:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	68d9      	ldr	r1, [r3, #12]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	785a      	ldrb	r2, [r3, #1]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	b29b      	uxth	r3, r3
 8006890:	2000      	movs	r0, #0
 8006892:	9000      	str	r0, [sp, #0]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7ff fb31 	bl	8005efc <USB_WritePacket>
  }

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3728      	adds	r7, #40	; 0x28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	1ff80000 	.word	0x1ff80000

080068a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	b29b      	uxth	r3, r3
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b089      	sub	sp, #36	; 0x24
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	0c9b      	lsrs	r3, r3, #18
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	0fdb      	lsrs	r3, r3, #31
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b20      	cmp	r3, #32
 8006918:	d104      	bne.n	8006924 <USB_HC_Halt+0x5a>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	e0c8      	b.n	8006ab6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <USB_HC_Halt+0x66>
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b02      	cmp	r3, #2
 800692e:	d163      	bne.n	80069f8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800694e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	f040 80ab 	bne.w	8006ab4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d133      	bne.n	80069d2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	4413      	add	r3, r2
 8006972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	0151      	lsls	r1, r2, #5
 800697c:	69fa      	ldr	r2, [r7, #28]
 800697e:	440a      	add	r2, r1
 8006980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006988:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	4413      	add	r3, r2
 8006992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069a8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3301      	adds	r3, #1
 80069ae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b6:	d81d      	bhi.n	80069f4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ce:	d0ec      	beq.n	80069aa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069d0:	e070      	b.n	8006ab4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069f2:	e05f      	b.n	8006ab4 <USB_HC_Halt+0x1ea>
            break;
 80069f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069f6:	e05d      	b.n	8006ab4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a16:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d133      	bne.n	8006a90 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	69fa      	ldr	r2, [r7, #28]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a66:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a74:	d81d      	bhi.n	8006ab2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a8c:	d0ec      	beq.n	8006a68 <USB_HC_Halt+0x19e>
 8006a8e:	e011      	b.n	8006ab4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	e000      	b.n	8006ab4 <USB_HC_Halt+0x1ea>
          break;
 8006ab2:	bf00      	nop
    }
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3724      	adds	r7, #36	; 0x24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
	...

08006ac4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	04da      	lsls	r2, r3, #19
 8006ae0:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <USB_DoPing+0x74>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b0c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b14:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b22:	461a      	mov	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	1ff80000 	.word	0x1ff80000

08006b3c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff f911 	bl	8005d78 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b56:	2110      	movs	r1, #16
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff f96b 	bl	8005e34 <USB_FlushTxFifo>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff f997 	bl	8005e9c <USB_FlushRxFifo>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	e01f      	b.n	8006bbe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ba4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b0f      	cmp	r3, #15
 8006bc2:	d9dc      	bls.n	8006b7e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	e034      	b.n	8006c34 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006be0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006be8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bf0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfe:	461a      	mov	r2, r3
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c10:	d80c      	bhi.n	8006c2c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c28:	d0ec      	beq.n	8006c04 <USB_StopHost+0xc8>
 8006c2a:	e000      	b.n	8006c2e <USB_StopHost+0xf2>
        break;
 8006c2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	3301      	adds	r3, #1
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d9c7      	bls.n	8006bca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c40:	461a      	mov	r2, r3
 8006c42:	f04f 33ff 	mov.w	r3, #4294967295
 8006c46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff f880 	bl	8005d56 <USB_EnableGlobalInt>

  return ret;
 8006c56:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3720      	adds	r7, #32
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006c60:	b590      	push	{r4, r7, lr}
 8006c62:	b089      	sub	sp, #36	; 0x24
 8006c64:	af04      	add	r7, sp, #16
 8006c66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006c68:	2301      	movs	r3, #1
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	2102      	movs	r1, #2
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fc66 	bl	8007540 <USBH_FindInterface>
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2bff      	cmp	r3, #255	; 0xff
 8006c7c:	d002      	beq.n	8006c84 <USBH_CDC_InterfaceInit+0x24>
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d901      	bls.n	8006c88 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c84:	2302      	movs	r3, #2
 8006c86:	e13d      	b.n	8006f04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc3b 	bl	8007508 <USBH_SelectInterface>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e131      	b.n	8006f04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006ca6:	2050      	movs	r0, #80	; 0x50
 8006ca8:	f002 fafa 	bl	80092a0 <malloc>
 8006cac:	4603      	mov	r3, r0
 8006cae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e11f      	b.n	8006f04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006cc4:	2250      	movs	r2, #80	; 0x50
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	68b8      	ldr	r0, [r7, #8]
 8006cca:	f002 faf9 	bl	80092c0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	211a      	movs	r1, #26
 8006cd4:	fb01 f303 	mul.w	r3, r1, r3
 8006cd8:	4413      	add	r3, r2
 8006cda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	b25b      	sxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	da15      	bge.n	8006d12 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	211a      	movs	r1, #26
 8006cec:	fb01 f303 	mul.w	r3, r1, r3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cf6:	781a      	ldrb	r2, [r3, #0]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	211a      	movs	r1, #26
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d0c:	881a      	ldrh	r2, [r3, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 ff2c 	bl	8008b76 <USBH_AllocPipe>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	7819      	ldrb	r1, [r3, #0]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	7858      	ldrb	r0, [r3, #1]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	8952      	ldrh	r2, [r2, #10]
 8006d3e:	9202      	str	r2, [sp, #8]
 8006d40:	2203      	movs	r2, #3
 8006d42:	9201      	str	r2, [sp, #4]
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4623      	mov	r3, r4
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fee4 	bl	8008b18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2200      	movs	r2, #0
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f002 f9f3 	bl	8009144 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2200      	movs	r2, #0
 8006d62:	210a      	movs	r1, #10
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fbeb 	bl	8007540 <USBH_FindInterface>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	2bff      	cmp	r3, #255	; 0xff
 8006d72:	d002      	beq.n	8006d7a <USBH_CDC_InterfaceInit+0x11a>
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d901      	bls.n	8006d7e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e0c2      	b.n	8006f04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	211a      	movs	r1, #26
 8006d84:	fb01 f303 	mul.w	r3, r1, r3
 8006d88:	4413      	add	r3, r2
 8006d8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b25b      	sxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	da16      	bge.n	8006dc4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	211a      	movs	r1, #26
 8006d9c:	fb01 f303 	mul.w	r3, r1, r3
 8006da0:	4413      	add	r3, r2
 8006da2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006da6:	781a      	ldrb	r2, [r3, #0]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	211a      	movs	r1, #26
 8006db2:	fb01 f303 	mul.w	r3, r1, r3
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dbc:	881a      	ldrh	r2, [r3, #0]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	835a      	strh	r2, [r3, #26]
 8006dc2:	e015      	b.n	8006df0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	211a      	movs	r1, #26
 8006dca:	fb01 f303 	mul.w	r3, r1, r3
 8006dce:	4413      	add	r3, r2
 8006dd0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dd4:	781a      	ldrb	r2, [r3, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	211a      	movs	r1, #26
 8006de0:	fb01 f303 	mul.w	r3, r1, r3
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dea:	881a      	ldrh	r2, [r3, #0]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	211a      	movs	r1, #26
 8006df6:	fb01 f303 	mul.w	r3, r1, r3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	b25b      	sxtb	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	da16      	bge.n	8006e36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	211a      	movs	r1, #26
 8006e0e:	fb01 f303 	mul.w	r3, r1, r3
 8006e12:	4413      	add	r3, r2
 8006e14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e18:	781a      	ldrb	r2, [r3, #0]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	211a      	movs	r1, #26
 8006e24:	fb01 f303 	mul.w	r3, r1, r3
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e2e:	881a      	ldrh	r2, [r3, #0]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	835a      	strh	r2, [r3, #26]
 8006e34:	e015      	b.n	8006e62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	211a      	movs	r1, #26
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	4413      	add	r3, r2
 8006e42:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e46:	781a      	ldrb	r2, [r3, #0]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	211a      	movs	r1, #26
 8006e52:	fb01 f303 	mul.w	r3, r1, r3
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e5c:	881a      	ldrh	r2, [r3, #0]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	7b9b      	ldrb	r3, [r3, #14]
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 fe84 	bl	8008b76 <USBH_AllocPipe>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	461a      	mov	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	7bdb      	ldrb	r3, [r3, #15]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 fe7a 	bl	8008b76 <USBH_AllocPipe>
 8006e82:	4603      	mov	r3, r0
 8006e84:	461a      	mov	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	7b59      	ldrb	r1, [r3, #13]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	7b98      	ldrb	r0, [r3, #14]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	8b12      	ldrh	r2, [r2, #24]
 8006ea2:	9202      	str	r2, [sp, #8]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	9201      	str	r2, [sp, #4]
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	4623      	mov	r3, r4
 8006eac:	4602      	mov	r2, r0
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 fe32 	bl	8008b18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	7b19      	ldrb	r1, [r3, #12]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	7bd8      	ldrb	r0, [r3, #15]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	8b52      	ldrh	r2, [r2, #26]
 8006ecc:	9202      	str	r2, [sp, #8]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	9201      	str	r2, [sp, #4]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	4623      	mov	r3, r4
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 fe1d 	bl	8008b18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	7b5b      	ldrb	r3, [r3, #13]
 8006eea:	2200      	movs	r2, #0
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f002 f928 	bl	8009144 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	7b1b      	ldrb	r3, [r3, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f002 f921 	bl	8009144 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd90      	pop	{r4, r7, pc}

08006f0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00e      	beq.n	8006f44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fe12 	bl	8008b56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fe3d 	bl	8008bb8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	7b1b      	ldrb	r3, [r3, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00e      	beq.n	8006f6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	7b1b      	ldrb	r3, [r3, #12]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fdff 	bl	8008b56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	7b1b      	ldrb	r3, [r3, #12]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fe2a 	bl	8008bb8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	7b5b      	ldrb	r3, [r3, #13]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00e      	beq.n	8006f90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	7b5b      	ldrb	r3, [r3, #13]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 fdec 	bl	8008b56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	7b5b      	ldrb	r3, [r3, #13]
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 fe17 	bl	8008bb8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00b      	beq.n	8006fb4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f002 f983 	bl	80092b0 <free>
    phost->pActiveClass->pData = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3340      	adds	r3, #64	; 0x40
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f8b1 	bl	800713e <GetLineCoding>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d105      	bne.n	8006ff2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fec:	2102      	movs	r1, #2
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007004:	2301      	movs	r3, #1
 8007006:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800701c:	2b04      	cmp	r3, #4
 800701e:	d877      	bhi.n	8007110 <USBH_CDC_Process+0x114>
 8007020:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <USBH_CDC_Process+0x2c>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	0800703d 	.word	0x0800703d
 800702c:	08007043 	.word	0x08007043
 8007030:	08007073 	.word	0x08007073
 8007034:	080070e7 	.word	0x080070e7
 8007038:	080070f5 	.word	0x080070f5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	73fb      	strb	r3, [r7, #15]
      break;
 8007040:	e06d      	b.n	800711e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f897 	bl	800717c <SetLineCoding>
 800704e:	4603      	mov	r3, r0
 8007050:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007060:	e058      	b.n	8007114 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d055      	beq.n	8007114 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2204      	movs	r2, #4
 800706c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007070:	e050      	b.n	8007114 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	3340      	adds	r3, #64	; 0x40
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f860 	bl	800713e <GetLineCoding>
 800707e:	4603      	mov	r3, r0
 8007080:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d126      	bne.n	80070d6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709a:	791b      	ldrb	r3, [r3, #4]
 800709c:	429a      	cmp	r2, r3
 800709e:	d13b      	bne.n	8007118 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070aa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d133      	bne.n	8007118 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070bc:	429a      	cmp	r2, r3
 80070be:	d12b      	bne.n	8007118 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d124      	bne.n	8007118 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f958 	bl	8007384 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070d4:	e020      	b.n	8007118 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d01d      	beq.n	8007118 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2204      	movs	r2, #4
 80070e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80070e4:	e018      	b.n	8007118 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f867 	bl	80071ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f8da 	bl	80072a6 <CDC_ProcessReception>
      break;
 80070f2:	e014      	b.n	800711e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80070f4:	2100      	movs	r1, #0
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 ffef 	bl	80080da <USBH_ClrFeature>
 80070fc:	4603      	mov	r3, r0
 80070fe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800710e:	e005      	b.n	800711c <USBH_CDC_Process+0x120>

    default:
      break;
 8007110:	bf00      	nop
 8007112:	e004      	b.n	800711e <USBH_CDC_Process+0x122>
      break;
 8007114:	bf00      	nop
 8007116:	e002      	b.n	800711e <USBH_CDC_Process+0x122>
      break;
 8007118:	bf00      	nop
 800711a:	e000      	b.n	800711e <USBH_CDC_Process+0x122>
      break;
 800711c:	bf00      	nop

  }

  return status;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	22a1      	movs	r2, #161	; 0xa1
 800714c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2221      	movs	r2, #33	; 0x21
 8007152:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2207      	movs	r2, #7
 8007164:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2207      	movs	r2, #7
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 fa81 	bl	8008674 <USBH_CtlReq>
 8007172:	4603      	mov	r3, r0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2221      	movs	r2, #33	; 0x21
 800718a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2220      	movs	r2, #32
 8007190:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2207      	movs	r2, #7
 80071a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2207      	movs	r2, #7
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 fa62 	bl	8008674 <USBH_CtlReq>
 80071b0:	4603      	mov	r3, r0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b086      	sub	sp, #24
 80071be:	af02      	add	r7, sp, #8
 80071c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071cc:	2300      	movs	r3, #0
 80071ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d002      	beq.n	80071e0 <CDC_ProcessTransmission+0x26>
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d023      	beq.n	8007226 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80071de:	e05e      	b.n	800729e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	8b12      	ldrh	r2, [r2, #24]
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d90b      	bls.n	8007204 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	69d9      	ldr	r1, [r3, #28]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8b1a      	ldrh	r2, [r3, #24]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	7b5b      	ldrb	r3, [r3, #13]
 80071f8:	2001      	movs	r0, #1
 80071fa:	9000      	str	r0, [sp, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 fc48 	bl	8008a92 <USBH_BulkSendData>
 8007202:	e00b      	b.n	800721c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	7b5b      	ldrb	r3, [r3, #13]
 8007212:	2001      	movs	r0, #1
 8007214:	9000      	str	r0, [sp, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 fc3b 	bl	8008a92 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007224:	e03b      	b.n	800729e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	7b5b      	ldrb	r3, [r3, #13]
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 ff5f 	bl	80090f0 <USBH_LL_GetURBState>
 8007232:	4603      	mov	r3, r0
 8007234:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007236:	7afb      	ldrb	r3, [r7, #11]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d128      	bne.n	800728e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	8b12      	ldrh	r2, [r2, #24]
 8007244:	4293      	cmp	r3, r2
 8007246:	d90e      	bls.n	8007266 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	8b12      	ldrh	r2, [r2, #24]
 8007250:	1a9a      	subs	r2, r3, r2
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	8b12      	ldrh	r2, [r2, #24]
 800725e:	441a      	add	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	61da      	str	r2, [r3, #28]
 8007264:	e002      	b.n	800726c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800727c:	e00e      	b.n	800729c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f868 	bl	800735c <USBH_CDC_TransmitCallback>
      break;
 800728c:	e006      	b.n	800729c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800728e:	7afb      	ldrb	r3, [r7, #11]
 8007290:	2b02      	cmp	r3, #2
 8007292:	d103      	bne.n	800729c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800729c:	bf00      	nop
  }
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072b8:	2300      	movs	r3, #0
 80072ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d002      	beq.n	80072cc <CDC_ProcessReception+0x26>
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d00e      	beq.n	80072e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80072ca:	e043      	b.n	8007354 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	6a19      	ldr	r1, [r3, #32]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	8b5a      	ldrh	r2, [r3, #26]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	7b1b      	ldrb	r3, [r3, #12]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 fbff 	bl	8008adc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2204      	movs	r2, #4
 80072e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80072e6:	e035      	b.n	8007354 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	7b1b      	ldrb	r3, [r3, #12]
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 fefe 	bl	80090f0 <USBH_LL_GetURBState>
 80072f4:	4603      	mov	r3, r0
 80072f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80072f8:	7cfb      	ldrb	r3, [r7, #19]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d129      	bne.n	8007352 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	7b1b      	ldrb	r3, [r3, #12]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 fe61 	bl	8008fcc <USBH_LL_GetLastXferSize>
 800730a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	429a      	cmp	r2, r3
 8007314:	d016      	beq.n	8007344 <CDC_ProcessReception+0x9e>
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	8b5b      	ldrh	r3, [r3, #26]
 800731a:	461a      	mov	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4293      	cmp	r3, r2
 8007320:	d910      	bls.n	8007344 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	1ad2      	subs	r2, r2, r3
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	6a1a      	ldr	r2, [r3, #32]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	441a      	add	r2, r3
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2203      	movs	r2, #3
 800733e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007342:	e006      	b.n	8007352 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f80f 	bl	8007370 <USBH_CDC_ReceiveCallback>
      break;
 8007352:	bf00      	nop
  }
}
 8007354:	bf00      	nop
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	4613      	mov	r3, r2
 80073a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80073ac:	2302      	movs	r3, #2
 80073ae:	e029      	b.n	8007404 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	79fa      	ldrb	r2, [r7, #7]
 80073b4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f81f 	bl	800740c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f001 fd31 	bl	8008e64 <USBH_LL_Init>

  return USBH_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	e009      	b.n	8007432 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	33e0      	adds	r3, #224	; 0xe0
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	2200      	movs	r2, #0
 800742a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b0f      	cmp	r3, #15
 8007436:	d9f2      	bls.n	800741e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	e009      	b.n	8007452 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007458:	d3f1      	bcc.n	800743e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2240      	movs	r2, #64	; 0x40
 800747e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d016      	beq.n	80074f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10e      	bne.n	80074f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074d8:	1c59      	adds	r1, r3, #1
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	33de      	adds	r3, #222	; 0xde
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	73fb      	strb	r3, [r7, #15]
 80074ee:	e004      	b.n	80074fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074f0:	2302      	movs	r3, #2
 80074f2:	73fb      	strb	r3, [r7, #15]
 80074f4:	e001      	b.n	80074fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80074f6:	2302      	movs	r3, #2
 80074f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	429a      	cmp	r2, r3
 8007522:	d204      	bcs.n	800752e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	78fa      	ldrb	r2, [r7, #3]
 8007528:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800752c:	e001      	b.n	8007532 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800752e:	2302      	movs	r3, #2
 8007530:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	4608      	mov	r0, r1
 800754a:	4611      	mov	r1, r2
 800754c:	461a      	mov	r2, r3
 800754e:	4603      	mov	r3, r0
 8007550:	70fb      	strb	r3, [r7, #3]
 8007552:	460b      	mov	r3, r1
 8007554:	70bb      	strb	r3, [r7, #2]
 8007556:	4613      	mov	r3, r2
 8007558:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007568:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800756a:	e025      	b.n	80075b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	221a      	movs	r2, #26
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	3308      	adds	r3, #8
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	4413      	add	r3, r2
 800757a:	3302      	adds	r3, #2
 800757c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	795b      	ldrb	r3, [r3, #5]
 8007582:	78fa      	ldrb	r2, [r7, #3]
 8007584:	429a      	cmp	r2, r3
 8007586:	d002      	beq.n	800758e <USBH_FindInterface+0x4e>
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	2bff      	cmp	r3, #255	; 0xff
 800758c:	d111      	bne.n	80075b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007592:	78ba      	ldrb	r2, [r7, #2]
 8007594:	429a      	cmp	r2, r3
 8007596:	d002      	beq.n	800759e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007598:	78bb      	ldrb	r3, [r7, #2]
 800759a:	2bff      	cmp	r3, #255	; 0xff
 800759c:	d109      	bne.n	80075b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075a2:	787a      	ldrb	r2, [r7, #1]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d002      	beq.n	80075ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075a8:	787b      	ldrb	r3, [r7, #1]
 80075aa:	2bff      	cmp	r3, #255	; 0xff
 80075ac:	d101      	bne.n	80075b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
 80075b0:	e006      	b.n	80075c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	3301      	adds	r3, #1
 80075b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d9d6      	bls.n	800756c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80075be:	23ff      	movs	r3, #255	; 0xff
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 fc81 	bl	8008edc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80075da:	2101      	movs	r1, #1
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fd9a 	bl	8009116 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af04      	add	r7, sp, #16
 80075f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80075f4:	2302      	movs	r3, #2
 80075f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	d102      	bne.n	800760e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2203      	movs	r2, #3
 800760c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b0b      	cmp	r3, #11
 8007616:	f200 81be 	bhi.w	8007996 <USBH_Process+0x3aa>
 800761a:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <USBH_Process+0x34>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007651 	.word	0x08007651
 8007624:	08007683 	.word	0x08007683
 8007628:	080076eb 	.word	0x080076eb
 800762c:	08007931 	.word	0x08007931
 8007630:	08007997 	.word	0x08007997
 8007634:	0800778f 	.word	0x0800778f
 8007638:	080078d7 	.word	0x080078d7
 800763c:	080077c5 	.word	0x080077c5
 8007640:	080077e5 	.word	0x080077e5
 8007644:	08007805 	.word	0x08007805
 8007648:	08007849 	.word	0x08007849
 800764c:	08007919 	.word	0x08007919
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 819e 	beq.w	800799a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007664:	20c8      	movs	r0, #200	; 0xc8
 8007666:	f001 fd9d 	bl	80091a4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 fc93 	bl	8008f96 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007680:	e18b      	b.n	800799a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007688:	2b01      	cmp	r3, #1
 800768a:	d107      	bne.n	800769c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800769a:	e18d      	b.n	80079b8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076a6:	d914      	bls.n	80076d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076ae:	3301      	adds	r3, #1
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d903      	bls.n	80076ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	220d      	movs	r2, #13
 80076c6:	701a      	strb	r2, [r3, #0]
      break;
 80076c8:	e176      	b.n	80079b8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
      break;
 80076d0:	e172      	b.n	80079b8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076d8:	f103 020a 	add.w	r2, r3, #10
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80076e2:	200a      	movs	r0, #10
 80076e4:	f001 fd5e 	bl	80091a4 <USBH_Delay>
      break;
 80076e8:	e166      	b.n	80079b8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d005      	beq.n	8007700 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076fa:	2104      	movs	r1, #4
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007700:	2064      	movs	r0, #100	; 0x64
 8007702:	f001 fd4f 	bl	80091a4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 fc1e 	bl	8008f48 <USBH_LL_GetSpeed>
 800770c:	4603      	mov	r3, r0
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2205      	movs	r2, #5
 800771a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800771c:	2100      	movs	r1, #0
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 fa29 	bl	8008b76 <USBH_AllocPipe>
 8007724:	4603      	mov	r3, r0
 8007726:	461a      	mov	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800772c:	2180      	movs	r1, #128	; 0x80
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 fa21 	bl	8008b76 <USBH_AllocPipe>
 8007734:	4603      	mov	r3, r0
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	7919      	ldrb	r1, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007750:	b292      	uxth	r2, r2
 8007752:	9202      	str	r2, [sp, #8]
 8007754:	2200      	movs	r2, #0
 8007756:	9201      	str	r2, [sp, #4]
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	4603      	mov	r3, r0
 800775c:	2280      	movs	r2, #128	; 0x80
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 f9da 	bl	8008b18 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	7959      	ldrb	r1, [r3, #5]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007778:	b292      	uxth	r2, r2
 800777a:	9202      	str	r2, [sp, #8]
 800777c:	2200      	movs	r2, #0
 800777e:	9201      	str	r2, [sp, #4]
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	4603      	mov	r3, r0
 8007784:	2200      	movs	r2, #0
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 f9c6 	bl	8008b18 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800778c:	e114      	b.n	80079b8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f918 	bl	80079c4 <USBH_HandleEnum>
 8007794:	4603      	mov	r3, r0
 8007796:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 80fe 	bne.w	800799e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d103      	bne.n	80077bc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2208      	movs	r2, #8
 80077b8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077ba:	e0f0      	b.n	800799e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2207      	movs	r2, #7
 80077c0:	701a      	strb	r2, [r3, #0]
      break;
 80077c2:	e0ec      	b.n	800799e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 80e9 	beq.w	80079a2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077d6:	2101      	movs	r1, #1
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2208      	movs	r2, #8
 80077e0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80077e2:	e0de      	b.n	80079a2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fc2c 	bl	800804c <USBH_SetCfg>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 80d5 	bne.w	80079a6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2209      	movs	r2, #9
 8007800:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007802:	e0d0      	b.n	80079a6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b00      	cmp	r3, #0
 8007810:	d016      	beq.n	8007840 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007812:	2101      	movs	r1, #1
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fc3c 	bl	8008092 <USBH_SetFeature>
 800781a:	4603      	mov	r3, r0
 800781c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d103      	bne.n	800782e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	220a      	movs	r2, #10
 800782a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800782c:	e0bd      	b.n	80079aa <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b03      	cmp	r3, #3
 8007834:	f040 80b9 	bne.w	80079aa <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	220a      	movs	r2, #10
 800783c:	701a      	strb	r2, [r3, #0]
      break;
 800783e:	e0b4      	b.n	80079aa <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	220a      	movs	r2, #10
 8007844:	701a      	strb	r2, [r3, #0]
      break;
 8007846:	e0b0      	b.n	80079aa <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 80ad 	beq.w	80079ae <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
 8007860:	e016      	b.n	8007890 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007862:	7bfa      	ldrb	r2, [r7, #15]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	32de      	adds	r2, #222	; 0xde
 8007868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786c:	791a      	ldrb	r2, [r3, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007874:	429a      	cmp	r2, r3
 8007876:	d108      	bne.n	800788a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007878:	7bfa      	ldrb	r2, [r7, #15]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	32de      	adds	r2, #222	; 0xde
 800787e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007888:	e005      	b.n	8007896 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	3301      	adds	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0e5      	beq.n	8007862 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800789c:	2b00      	cmp	r3, #0
 800789e:	d016      	beq.n	80078ce <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4798      	blx	r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2206      	movs	r2, #6
 80078b6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078be:	2103      	movs	r1, #3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078c4:	e073      	b.n	80079ae <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	220d      	movs	r2, #13
 80078ca:	701a      	strb	r2, [r3, #0]
      break;
 80078cc:	e06f      	b.n	80079ae <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	220d      	movs	r2, #13
 80078d2:	701a      	strb	r2, [r3, #0]
      break;
 80078d4:	e06b      	b.n	80079ae <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d017      	beq.n	8007910 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
 80078ec:	4603      	mov	r3, r0
 80078ee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d103      	bne.n	8007900 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	220b      	movs	r2, #11
 80078fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078fe:	e058      	b.n	80079b2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b02      	cmp	r3, #2
 8007906:	d154      	bne.n	80079b2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	220d      	movs	r2, #13
 800790c:	701a      	strb	r2, [r3, #0]
      break;
 800790e:	e050      	b.n	80079b2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	220d      	movs	r2, #13
 8007914:	701a      	strb	r2, [r3, #0]
      break;
 8007916:	e04c      	b.n	80079b2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d049      	beq.n	80079b6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	4798      	blx	r3
      }
      break;
 800792e:	e042      	b.n	80079b6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff fd67 	bl	800740c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d009      	beq.n	800795c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800796c:	2105      	movs	r1, #5
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b01      	cmp	r3, #1
 800797c:	d107      	bne.n	800798e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fe20 	bl	80075cc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800798c:	e014      	b.n	80079b8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 faa4 	bl	8008edc <USBH_LL_Start>
      break;
 8007994:	e010      	b.n	80079b8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007996:	bf00      	nop
 8007998:	e00e      	b.n	80079b8 <USBH_Process+0x3cc>
      break;
 800799a:	bf00      	nop
 800799c:	e00c      	b.n	80079b8 <USBH_Process+0x3cc>
      break;
 800799e:	bf00      	nop
 80079a0:	e00a      	b.n	80079b8 <USBH_Process+0x3cc>
    break;
 80079a2:	bf00      	nop
 80079a4:	e008      	b.n	80079b8 <USBH_Process+0x3cc>
      break;
 80079a6:	bf00      	nop
 80079a8:	e006      	b.n	80079b8 <USBH_Process+0x3cc>
      break;
 80079aa:	bf00      	nop
 80079ac:	e004      	b.n	80079b8 <USBH_Process+0x3cc>
      break;
 80079ae:	bf00      	nop
 80079b0:	e002      	b.n	80079b8 <USBH_Process+0x3cc>
      break;
 80079b2:	bf00      	nop
 80079b4:	e000      	b.n	80079b8 <USBH_Process+0x3cc>
      break;
 80079b6:	bf00      	nop
  }
  return USBH_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop

080079c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af04      	add	r7, sp, #16
 80079ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80079cc:	2301      	movs	r3, #1
 80079ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80079d0:	2301      	movs	r3, #1
 80079d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	2b07      	cmp	r3, #7
 80079da:	f200 81c1 	bhi.w	8007d60 <USBH_HandleEnum+0x39c>
 80079de:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <USBH_HandleEnum+0x20>)
 80079e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e4:	08007a05 	.word	0x08007a05
 80079e8:	08007ac3 	.word	0x08007ac3
 80079ec:	08007b2d 	.word	0x08007b2d
 80079f0:	08007bbb 	.word	0x08007bbb
 80079f4:	08007c25 	.word	0x08007c25
 80079f8:	08007c95 	.word	0x08007c95
 80079fc:	08007cdb 	.word	0x08007cdb
 8007a00:	08007d21 	.word	0x08007d21
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a04:	2108      	movs	r1, #8
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa50 	bl	8007eac <USBH_Get_DevDesc>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d130      	bne.n	8007a78 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	7919      	ldrb	r1, [r3, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a3a:	b292      	uxth	r2, r2
 8007a3c:	9202      	str	r2, [sp, #8]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	9201      	str	r2, [sp, #4]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	4603      	mov	r3, r0
 8007a46:	2280      	movs	r2, #128	; 0x80
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f865 	bl	8008b18 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	7959      	ldrb	r1, [r3, #5]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a62:	b292      	uxth	r2, r2
 8007a64:	9202      	str	r2, [sp, #8]
 8007a66:	2200      	movs	r2, #0
 8007a68:	9201      	str	r2, [sp, #4]
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2200      	movs	r2, #0
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 f851 	bl	8008b18 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a76:	e175      	b.n	8007d64 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	f040 8172 	bne.w	8007d64 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a86:	3301      	adds	r3, #1
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d903      	bls.n	8007aa2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	220d      	movs	r2, #13
 8007a9e:	701a      	strb	r2, [r3, #0]
      break;
 8007aa0:	e160      	b.n	8007d64 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	795b      	ldrb	r3, [r3, #5]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 f885 	bl	8008bb8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	791b      	ldrb	r3, [r3, #4]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 f87f 	bl	8008bb8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	701a      	strb	r2, [r3, #0]
      break;
 8007ac0:	e150      	b.n	8007d64 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007ac2:	2112      	movs	r1, #18
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f9f1 	bl	8007eac <USBH_Get_DevDesc>
 8007aca:	4603      	mov	r3, r0
 8007acc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d103      	bne.n	8007adc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ada:	e145      	b.n	8007d68 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	f040 8142 	bne.w	8007d68 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aea:	3301      	adds	r3, #1
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d903      	bls.n	8007b06 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	220d      	movs	r2, #13
 8007b02:	701a      	strb	r2, [r3, #0]
      break;
 8007b04:	e130      	b.n	8007d68 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	795b      	ldrb	r3, [r3, #5]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 f853 	bl	8008bb8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	791b      	ldrb	r3, [r3, #4]
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f001 f84d 	bl	8008bb8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	701a      	strb	r2, [r3, #0]
      break;
 8007b2a:	e11d      	b.n	8007d68 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa68 	bl	8008004 <USBH_SetAddress>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d132      	bne.n	8007ba4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007b3e:	2002      	movs	r0, #2
 8007b40:	f001 fb30 	bl	80091a4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2203      	movs	r2, #3
 8007b50:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	7919      	ldrb	r1, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b66:	b292      	uxth	r2, r2
 8007b68:	9202      	str	r2, [sp, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	9201      	str	r2, [sp, #4]
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	4603      	mov	r3, r0
 8007b72:	2280      	movs	r2, #128	; 0x80
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 ffcf 	bl	8008b18 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7959      	ldrb	r1, [r3, #5]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b8e:	b292      	uxth	r2, r2
 8007b90:	9202      	str	r2, [sp, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	9201      	str	r2, [sp, #4]
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 ffbb 	bl	8008b18 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ba2:	e0e3      	b.n	8007d6c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	f040 80e0 	bne.w	8007d6c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	220d      	movs	r2, #13
 8007bb0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	705a      	strb	r2, [r3, #1]
      break;
 8007bb8:	e0d8      	b.n	8007d6c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007bba:	2109      	movs	r1, #9
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f99d 	bl	8007efc <USBH_Get_CfgDesc>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2204      	movs	r2, #4
 8007bd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bd2:	e0cd      	b.n	8007d70 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	f040 80ca 	bne.w	8007d70 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007be2:	3301      	adds	r3, #1
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d903      	bls.n	8007bfe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	220d      	movs	r2, #13
 8007bfa:	701a      	strb	r2, [r3, #0]
      break;
 8007bfc:	e0b8      	b.n	8007d70 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	795b      	ldrb	r3, [r3, #5]
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 ffd7 	bl	8008bb8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	791b      	ldrb	r3, [r3, #4]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 ffd1 	bl	8008bb8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]
      break;
 8007c22:	e0a5      	b.n	8007d70 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f965 	bl	8007efc <USBH_Get_CfgDesc>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d103      	bne.n	8007c44 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2205      	movs	r2, #5
 8007c40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c42:	e097      	b.n	8007d74 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	f040 8094 	bne.w	8007d74 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c52:	3301      	adds	r3, #1
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d903      	bls.n	8007c6e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	220d      	movs	r2, #13
 8007c6a:	701a      	strb	r2, [r3, #0]
      break;
 8007c6c:	e082      	b.n	8007d74 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	795b      	ldrb	r3, [r3, #5]
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 ff9f 	bl	8008bb8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	791b      	ldrb	r3, [r3, #4]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 ff99 	bl	8008bb8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	701a      	strb	r2, [r3, #0]
      break;
 8007c92:	e06f      	b.n	8007d74 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d019      	beq.n	8007cd2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007caa:	23ff      	movs	r3, #255	; 0xff
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f949 	bl	8007f44 <USBH_Get_StringDesc>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d103      	bne.n	8007cc4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2206      	movs	r2, #6
 8007cc0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cc2:	e059      	b.n	8007d78 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d156      	bne.n	8007d78 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2206      	movs	r2, #6
 8007cce:	705a      	strb	r2, [r3, #1]
      break;
 8007cd0:	e052      	b.n	8007d78 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2206      	movs	r2, #6
 8007cd6:	705a      	strb	r2, [r3, #1]
      break;
 8007cd8:	e04e      	b.n	8007d78 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d019      	beq.n	8007d18 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cf0:	23ff      	movs	r3, #255	; 0xff
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f926 	bl	8007f44 <USBH_Get_StringDesc>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2207      	movs	r2, #7
 8007d06:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d08:	e038      	b.n	8007d7c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d135      	bne.n	8007d7c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2207      	movs	r2, #7
 8007d14:	705a      	strb	r2, [r3, #1]
      break;
 8007d16:	e031      	b.n	8007d7c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2207      	movs	r2, #7
 8007d1c:	705a      	strb	r2, [r3, #1]
      break;
 8007d1e:	e02d      	b.n	8007d7c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d017      	beq.n	8007d5a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d36:	23ff      	movs	r3, #255	; 0xff
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f903 	bl	8007f44 <USBH_Get_StringDesc>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d4c:	e018      	b.n	8007d80 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d115      	bne.n	8007d80 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
      break;
 8007d58:	e012      	b.n	8007d80 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d5e:	e00f      	b.n	8007d80 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007d60:	bf00      	nop
 8007d62:	e00e      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d64:	bf00      	nop
 8007d66:	e00c      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d68:	bf00      	nop
 8007d6a:	e00a      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d6c:	bf00      	nop
 8007d6e:	e008      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d70:	bf00      	nop
 8007d72:	e006      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d74:	bf00      	nop
 8007d76:	e004      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d78:	bf00      	nop
 8007d7a:	e002      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d7c:	bf00      	nop
 8007d7e:	e000      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d80:	bf00      	nop
  }
  return Status;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f804 	bl	8007dce <USBH_HandleSof>
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b0b      	cmp	r3, #11
 8007dde:	d10a      	bne.n	8007df6 <USBH_HandleSof+0x28>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
  }
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007e0e:	bf00      	nop
}
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007e2a:	bf00      	nop
}
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 f844 	bl	8008f12 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	791b      	ldrb	r3, [r3, #4]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fe91 	bl	8008bb8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	795b      	ldrb	r3, [r3, #5]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fe8b 	bl	8008bb8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af02      	add	r7, sp, #8
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007eca:	2100      	movs	r1, #0
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f864 	bl	8007f9a <USBH_GetDescriptor>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ee8:	78fa      	ldrb	r2, [r7, #3]
 8007eea:	b292      	uxth	r2, r2
 8007eec:	4619      	mov	r1, r3
 8007eee:	f000 f918 	bl	8008122 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	331c      	adds	r3, #28
 8007f0c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f0e:	887b      	ldrh	r3, [r7, #2]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f18:	2100      	movs	r1, #0
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f83d 	bl	8007f9a <USBH_GetDescriptor>
 8007f20:	4603      	mov	r3, r0
 8007f22:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d107      	bne.n	8007f3a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007f2a:	887b      	ldrh	r3, [r7, #2]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f987 	bl	8008244 <USBH_ParseCfgDesc>
 8007f36:	4603      	mov	r3, r0
 8007f38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af02      	add	r7, sp, #8
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	607a      	str	r2, [r7, #4]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	460b      	mov	r3, r1
 8007f52:	72fb      	strb	r3, [r7, #11]
 8007f54:	4613      	mov	r3, r2
 8007f56:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007f58:	7afb      	ldrb	r3, [r7, #11]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007f60:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007f68:	893b      	ldrh	r3, [r7, #8]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	2100      	movs	r1, #0
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 f812 	bl	8007f9a <USBH_GetDescriptor>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d107      	bne.n	8007f90 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f86:	893a      	ldrh	r2, [r7, #8]
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fb24 	bl	80085d8 <USBH_ParseStringDesc>
  }

  return status;
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	607b      	str	r3, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	72fb      	strb	r3, [r7, #11]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	789b      	ldrb	r3, [r3, #2]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d11c      	bne.n	8007fee <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
 8007fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2206      	movs	r2, #6
 8007fc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	893a      	ldrh	r2, [r7, #8]
 8007fca:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007fcc:	893b      	ldrh	r3, [r7, #8]
 8007fce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fd6:	d104      	bne.n	8007fe2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f240 4209 	movw	r2, #1033	; 0x409
 8007fde:	829a      	strh	r2, [r3, #20]
 8007fe0:	e002      	b.n	8007fe8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8b3a      	ldrh	r2, [r7, #24]
 8007fec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007fee:	8b3b      	ldrh	r3, [r7, #24]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fb3d 	bl	8008674 <USBH_CtlReq>
 8007ffa:	4603      	mov	r3, r0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	789b      	ldrb	r3, [r3, #2]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d10f      	bne.n	8008038 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2205      	movs	r2, #5
 8008022:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	b29a      	uxth	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008038:	2200      	movs	r2, #0
 800803a:	2100      	movs	r1, #0
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fb19 	bl	8008674 <USBH_CtlReq>
 8008042:	4603      	mov	r3, r0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	789b      	ldrb	r3, [r3, #2]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d10e      	bne.n	800807e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2209      	movs	r2, #9
 800806a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	887a      	ldrh	r2, [r7, #2]
 8008070:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800807e:	2200      	movs	r2, #0
 8008080:	2100      	movs	r1, #0
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 faf6 	bl	8008674 <USBH_CtlReq>
 8008088:	4603      	mov	r3, r0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b082      	sub	sp, #8
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	460b      	mov	r3, r1
 800809c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	789b      	ldrb	r3, [r3, #2]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d10f      	bne.n	80080c6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2203      	movs	r2, #3
 80080b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080c6:	2200      	movs	r2, #0
 80080c8:	2100      	movs	r1, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fad2 	bl	8008674 <USBH_CtlReq>
 80080d0:	4603      	mov	r3, r0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	789b      	ldrb	r3, [r3, #2]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d10f      	bne.n	800810e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2202      	movs	r2, #2
 80080f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	b29a      	uxth	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800810e:	2200      	movs	r2, #0
 8008110:	2100      	movs	r1, #0
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 faae 	bl	8008674 <USBH_CtlReq>
 8008118:	4603      	mov	r3, r0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008122:	b480      	push	{r7}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	4613      	mov	r3, r2
 800812e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	781a      	ldrb	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	785a      	ldrb	r2, [r3, #1]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	3302      	adds	r3, #2
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	b29a      	uxth	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	3303      	adds	r3, #3
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	b29b      	uxth	r3, r3
 8008154:	4313      	orrs	r3, r2
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	791a      	ldrb	r2, [r3, #4]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	795a      	ldrb	r2, [r3, #5]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	799a      	ldrb	r2, [r3, #6]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	79da      	ldrb	r2, [r3, #7]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	79db      	ldrb	r3, [r3, #7]
 8008180:	2b20      	cmp	r3, #32
 8008182:	dc11      	bgt.n	80081a8 <USBH_ParseDevDesc+0x86>
 8008184:	2b08      	cmp	r3, #8
 8008186:	db16      	blt.n	80081b6 <USBH_ParseDevDesc+0x94>
 8008188:	3b08      	subs	r3, #8
 800818a:	2201      	movs	r2, #1
 800818c:	fa02 f303 	lsl.w	r3, r2, r3
 8008190:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008198:	2b00      	cmp	r3, #0
 800819a:	bf14      	ite	ne
 800819c:	2301      	movne	r3, #1
 800819e:	2300      	moveq	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <USBH_ParseDevDesc+0x8a>
 80081a6:	e006      	b.n	80081b6 <USBH_ParseDevDesc+0x94>
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d104      	bne.n	80081b6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	79da      	ldrb	r2, [r3, #7]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	71da      	strb	r2, [r3, #7]
      break;
 80081b4:	e003      	b.n	80081be <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2240      	movs	r2, #64	; 0x40
 80081ba:	71da      	strb	r2, [r3, #7]
      break;
 80081bc:	bf00      	nop
  }

  if (length > 8U)
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	2b08      	cmp	r3, #8
 80081c2:	d939      	bls.n	8008238 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	3308      	adds	r3, #8
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	3309      	adds	r3, #9
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	4313      	orrs	r3, r2
 80081da:	b29a      	uxth	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	330a      	adds	r3, #10
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	330b      	adds	r3, #11
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	4313      	orrs	r3, r2
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	330c      	adds	r3, #12
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	b29a      	uxth	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	330d      	adds	r3, #13
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	b29b      	uxth	r3, r3
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	b29b      	uxth	r3, r3
 8008210:	4313      	orrs	r3, r2
 8008212:	b29a      	uxth	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	7b9a      	ldrb	r2, [r3, #14]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	7bda      	ldrb	r2, [r3, #15]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	7c1a      	ldrb	r2, [r3, #16]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	7c5a      	ldrb	r2, [r3, #17]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	745a      	strb	r2, [r3, #17]
  }
}
 8008238:	bf00      	nop
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08c      	sub	sp, #48	; 0x30
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008258:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	781a      	ldrb	r2, [r3, #0]
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	785a      	ldrb	r2, [r3, #1]
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	3302      	adds	r3, #2
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	b29a      	uxth	r2, r3
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	3303      	adds	r3, #3
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	b29b      	uxth	r3, r3
 8008298:	4313      	orrs	r3, r2
 800829a:	b29b      	uxth	r3, r3
 800829c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a0:	bf28      	it	cs
 80082a2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	791a      	ldrb	r2, [r3, #4]
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	795a      	ldrb	r2, [r3, #5]
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	799a      	ldrb	r2, [r3, #6]
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	79da      	ldrb	r2, [r3, #7]
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	7a1a      	ldrb	r2, [r3, #8]
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b09      	cmp	r3, #9
 80082da:	d002      	beq.n	80082e2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	2209      	movs	r2, #9
 80082e0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082e2:	88fb      	ldrh	r3, [r7, #6]
 80082e4:	2b09      	cmp	r3, #9
 80082e6:	f240 809d 	bls.w	8008424 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80082ea:	2309      	movs	r3, #9
 80082ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082f2:	e081      	b.n	80083f8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082f4:	f107 0316 	add.w	r3, r7, #22
 80082f8:	4619      	mov	r1, r3
 80082fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082fc:	f000 f99f 	bl	800863e <USBH_GetNextDesc>
 8008300:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	2b04      	cmp	r3, #4
 8008308:	d176      	bne.n	80083f8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b09      	cmp	r3, #9
 8008310:	d002      	beq.n	8008318 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	2209      	movs	r2, #9
 8008316:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800831c:	221a      	movs	r2, #26
 800831e:	fb02 f303 	mul.w	r3, r2, r3
 8008322:	3308      	adds	r3, #8
 8008324:	6a3a      	ldr	r2, [r7, #32]
 8008326:	4413      	add	r3, r2
 8008328:	3302      	adds	r3, #2
 800832a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800832c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800832e:	69f8      	ldr	r0, [r7, #28]
 8008330:	f000 f87e 	bl	8008430 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800833a:	2300      	movs	r3, #0
 800833c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800833e:	e043      	b.n	80083c8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008340:	f107 0316 	add.w	r3, r7, #22
 8008344:	4619      	mov	r1, r3
 8008346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008348:	f000 f979 	bl	800863e <USBH_GetNextDesc>
 800834c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	785b      	ldrb	r3, [r3, #1]
 8008352:	2b05      	cmp	r3, #5
 8008354:	d138      	bne.n	80083c8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	795b      	ldrb	r3, [r3, #5]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d10f      	bne.n	800837e <USBH_ParseCfgDesc+0x13a>
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	799b      	ldrb	r3, [r3, #6]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d10b      	bne.n	800837e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	79db      	ldrb	r3, [r3, #7]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10f      	bne.n	800838e <USBH_ParseCfgDesc+0x14a>
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b09      	cmp	r3, #9
 8008374:	d00b      	beq.n	800838e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008378:	2209      	movs	r2, #9
 800837a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800837c:	e007      	b.n	800838e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b07      	cmp	r3, #7
 8008384:	d004      	beq.n	8008390 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	2207      	movs	r2, #7
 800838a:	701a      	strb	r2, [r3, #0]
 800838c:	e000      	b.n	8008390 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800838e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008394:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008398:	3201      	adds	r2, #1
 800839a:	00d2      	lsls	r2, r2, #3
 800839c:	211a      	movs	r1, #26
 800839e:	fb01 f303 	mul.w	r3, r1, r3
 80083a2:	4413      	add	r3, r2
 80083a4:	3308      	adds	r3, #8
 80083a6:	6a3a      	ldr	r2, [r7, #32]
 80083a8:	4413      	add	r3, r2
 80083aa:	3304      	adds	r3, #4
 80083ac:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80083ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083b0:	69b9      	ldr	r1, [r7, #24]
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f000 f86b 	bl	800848e <USBH_ParseEPDesc>
 80083b8:	4603      	mov	r3, r0
 80083ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80083be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083c2:	3301      	adds	r3, #1
 80083c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	791b      	ldrb	r3, [r3, #4]
 80083cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d204      	bcs.n	80083de <USBH_ParseCfgDesc+0x19a>
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	885a      	ldrh	r2, [r3, #2]
 80083d8:	8afb      	ldrh	r3, [r7, #22]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d8b0      	bhi.n	8008340 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	791b      	ldrb	r3, [r3, #4]
 80083e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d201      	bcs.n	80083ee <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e01c      	b.n	8008428 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80083ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083f2:	3301      	adds	r3, #1
 80083f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d805      	bhi.n	800840c <USBH_ParseCfgDesc+0x1c8>
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	885a      	ldrh	r2, [r3, #2]
 8008404:	8afb      	ldrh	r3, [r7, #22]
 8008406:	429a      	cmp	r2, r3
 8008408:	f63f af74 	bhi.w	80082f4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	791b      	ldrb	r3, [r3, #4]
 8008410:	2b02      	cmp	r3, #2
 8008412:	bf28      	it	cs
 8008414:	2302      	movcs	r3, #2
 8008416:	b2db      	uxtb	r3, r3
 8008418:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800841c:	429a      	cmp	r2, r3
 800841e:	d201      	bcs.n	8008424 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008420:	2303      	movs	r3, #3
 8008422:	e001      	b.n	8008428 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008428:	4618      	mov	r0, r3
 800842a:	3730      	adds	r7, #48	; 0x30
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781a      	ldrb	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	785a      	ldrb	r2, [r3, #1]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	789a      	ldrb	r2, [r3, #2]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	78da      	ldrb	r2, [r3, #3]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	791a      	ldrb	r2, [r3, #4]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	795a      	ldrb	r2, [r3, #5]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	799a      	ldrb	r2, [r3, #6]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	79da      	ldrb	r2, [r3, #7]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	7a1a      	ldrb	r2, [r3, #8]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	721a      	strb	r2, [r3, #8]
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800848e:	b480      	push	{r7}
 8008490:	b087      	sub	sp, #28
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	781a      	ldrb	r2, [r3, #0]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	785a      	ldrb	r2, [r3, #1]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	789a      	ldrb	r2, [r3, #2]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	78da      	ldrb	r2, [r3, #3]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3304      	adds	r3, #4
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	3305      	adds	r3, #5
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	021b      	lsls	r3, r3, #8
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	4313      	orrs	r3, r2
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	799a      	ldrb	r2, [r3, #6]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	889b      	ldrh	r3, [r3, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d102      	bne.n	80084f0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80084ea:	2303      	movs	r3, #3
 80084ec:	75fb      	strb	r3, [r7, #23]
 80084ee:	e033      	b.n	8008558 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	889b      	ldrh	r3, [r3, #4]
 80084f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80084f8:	f023 0307 	bic.w	r3, r3, #7
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	889b      	ldrh	r3, [r3, #4]
 8008506:	b21a      	sxth	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3304      	adds	r3, #4
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	b299      	uxth	r1, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3305      	adds	r3, #5
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	b29b      	uxth	r3, r3
 800851c:	430b      	orrs	r3, r1
 800851e:	b29b      	uxth	r3, r3
 8008520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008524:	2b00      	cmp	r3, #0
 8008526:	d110      	bne.n	800854a <USBH_ParseEPDesc+0xbc>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3304      	adds	r3, #4
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	b299      	uxth	r1, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3305      	adds	r3, #5
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	b29b      	uxth	r3, r3
 800853c:	430b      	orrs	r3, r1
 800853e:	b29b      	uxth	r3, r3
 8008540:	b21b      	sxth	r3, r3
 8008542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008546:	b21b      	sxth	r3, r3
 8008548:	e001      	b.n	800854e <USBH_ParseEPDesc+0xc0>
 800854a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800854e:	4313      	orrs	r3, r2
 8008550:	b21b      	sxth	r3, r3
 8008552:	b29a      	uxth	r2, r3
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800855e:	2b00      	cmp	r3, #0
 8008560:	d116      	bne.n	8008590 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	78db      	ldrb	r3, [r3, #3]
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	2b01      	cmp	r3, #1
 800856c:	d005      	beq.n	800857a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	78db      	ldrb	r3, [r3, #3]
 8008572:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008576:	2b03      	cmp	r3, #3
 8008578:	d127      	bne.n	80085ca <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	799b      	ldrb	r3, [r3, #6]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <USBH_ParseEPDesc+0xfc>
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	799b      	ldrb	r3, [r3, #6]
 8008586:	2b10      	cmp	r3, #16
 8008588:	d91f      	bls.n	80085ca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800858a:	2303      	movs	r3, #3
 800858c:	75fb      	strb	r3, [r7, #23]
 800858e:	e01c      	b.n	80085ca <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	78db      	ldrb	r3, [r3, #3]
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	2b01      	cmp	r3, #1
 800859a:	d10a      	bne.n	80085b2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	799b      	ldrb	r3, [r3, #6]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <USBH_ParseEPDesc+0x11e>
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	799b      	ldrb	r3, [r3, #6]
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d90e      	bls.n	80085ca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80085ac:	2303      	movs	r3, #3
 80085ae:	75fb      	strb	r3, [r7, #23]
 80085b0:	e00b      	b.n	80085ca <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	78db      	ldrb	r3, [r3, #3]
 80085b6:	f003 0303 	and.w	r3, r3, #3
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d105      	bne.n	80085ca <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	799b      	ldrb	r3, [r3, #6]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80085c6:	2303      	movs	r3, #3
 80085c8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	371c      	adds	r7, #28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3301      	adds	r3, #1
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d120      	bne.n	8008632 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	1e9a      	subs	r2, r3, #2
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	4293      	cmp	r3, r2
 80085fa:	bf28      	it	cs
 80085fc:	4613      	movcs	r3, r2
 80085fe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3302      	adds	r3, #2
 8008604:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008606:	2300      	movs	r3, #0
 8008608:	82fb      	strh	r3, [r7, #22]
 800860a:	e00b      	b.n	8008624 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800860c:	8afb      	ldrh	r3, [r7, #22]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	4413      	add	r3, r2
 8008612:	781a      	ldrb	r2, [r3, #0]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	3301      	adds	r3, #1
 800861c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800861e:	8afb      	ldrh	r3, [r7, #22]
 8008620:	3302      	adds	r3, #2
 8008622:	82fb      	strh	r3, [r7, #22]
 8008624:	8afa      	ldrh	r2, [r7, #22]
 8008626:	8abb      	ldrh	r3, [r7, #20]
 8008628:	429a      	cmp	r2, r3
 800862a:	d3ef      	bcc.n	800860c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2200      	movs	r2, #0
 8008630:	701a      	strb	r2, [r3, #0]
  }
}
 8008632:	bf00      	nop
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800863e:	b480      	push	{r7}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	881a      	ldrh	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	b29b      	uxth	r3, r3
 8008652:	4413      	add	r3, r2
 8008654:	b29a      	uxth	r2, r3
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4413      	add	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008666:	68fb      	ldr	r3, [r7, #12]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008682:	2301      	movs	r3, #1
 8008684:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	789b      	ldrb	r3, [r3, #2]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d002      	beq.n	8008694 <USBH_CtlReq+0x20>
 800868e:	2b02      	cmp	r3, #2
 8008690:	d00f      	beq.n	80086b2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008692:	e027      	b.n	80086e4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	88fa      	ldrh	r2, [r7, #6]
 800869e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2201      	movs	r2, #1
 80086a4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2202      	movs	r2, #2
 80086aa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80086ac:	2301      	movs	r3, #1
 80086ae:	75fb      	strb	r3, [r7, #23]
      break;
 80086b0:	e018      	b.n	80086e4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 f81c 	bl	80086f0 <USBH_HandleControl>
 80086b8:	4603      	mov	r3, r0
 80086ba:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <USBH_CtlReq+0x54>
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d106      	bne.n	80086d6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2201      	movs	r2, #1
 80086cc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	761a      	strb	r2, [r3, #24]
      break;
 80086d4:	e005      	b.n	80086e2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d102      	bne.n	80086e2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	709a      	strb	r2, [r3, #2]
      break;
 80086e2:	bf00      	nop
  }
  return status;
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af02      	add	r7, sp, #8
 80086f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80086f8:	2301      	movs	r3, #1
 80086fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	7e1b      	ldrb	r3, [r3, #24]
 8008704:	3b01      	subs	r3, #1
 8008706:	2b0a      	cmp	r3, #10
 8008708:	f200 8156 	bhi.w	80089b8 <USBH_HandleControl+0x2c8>
 800870c:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <USBH_HandleControl+0x24>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	08008741 	.word	0x08008741
 8008718:	0800875b 	.word	0x0800875b
 800871c:	080087c5 	.word	0x080087c5
 8008720:	080087eb 	.word	0x080087eb
 8008724:	08008823 	.word	0x08008823
 8008728:	0800884d 	.word	0x0800884d
 800872c:	0800889f 	.word	0x0800889f
 8008730:	080088c1 	.word	0x080088c1
 8008734:	080088fd 	.word	0x080088fd
 8008738:	08008923 	.word	0x08008923
 800873c:	08008961 	.word	0x08008961
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f103 0110 	add.w	r1, r3, #16
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	795b      	ldrb	r3, [r3, #5]
 800874a:	461a      	mov	r2, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f943 	bl	80089d8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2202      	movs	r2, #2
 8008756:	761a      	strb	r2, [r3, #24]
      break;
 8008758:	e139      	b.n	80089ce <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	795b      	ldrb	r3, [r3, #5]
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fcc5 	bl	80090f0 <USBH_LL_GetURBState>
 8008766:	4603      	mov	r3, r0
 8008768:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d11e      	bne.n	80087ae <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7c1b      	ldrb	r3, [r3, #16]
 8008774:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008778:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	8adb      	ldrh	r3, [r3, #22]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008782:	7b7b      	ldrb	r3, [r7, #13]
 8008784:	2b80      	cmp	r3, #128	; 0x80
 8008786:	d103      	bne.n	8008790 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2203      	movs	r2, #3
 800878c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800878e:	e115      	b.n	80089bc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2205      	movs	r2, #5
 8008794:	761a      	strb	r2, [r3, #24]
      break;
 8008796:	e111      	b.n	80089bc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008798:	7b7b      	ldrb	r3, [r7, #13]
 800879a:	2b80      	cmp	r3, #128	; 0x80
 800879c:	d103      	bne.n	80087a6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2209      	movs	r2, #9
 80087a2:	761a      	strb	r2, [r3, #24]
      break;
 80087a4:	e10a      	b.n	80089bc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2207      	movs	r2, #7
 80087aa:	761a      	strb	r2, [r3, #24]
      break;
 80087ac:	e106      	b.n	80089bc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d003      	beq.n	80087bc <USBH_HandleControl+0xcc>
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	f040 8100 	bne.w	80089bc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	220b      	movs	r2, #11
 80087c0:	761a      	strb	r2, [r3, #24]
      break;
 80087c2:	e0fb      	b.n	80089bc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6899      	ldr	r1, [r3, #8]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	899a      	ldrh	r2, [r3, #12]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	791b      	ldrb	r3, [r3, #4]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f93a 	bl	8008a56 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2204      	movs	r2, #4
 80087e6:	761a      	strb	r2, [r3, #24]
      break;
 80087e8:	e0f1      	b.n	80089ce <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	791b      	ldrb	r3, [r3, #4]
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fc7d 	bl	80090f0 <USBH_LL_GetURBState>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d102      	bne.n	8008806 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2209      	movs	r2, #9
 8008804:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	2b05      	cmp	r3, #5
 800880a:	d102      	bne.n	8008812 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800880c:	2303      	movs	r3, #3
 800880e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008810:	e0d6      	b.n	80089c0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b04      	cmp	r3, #4
 8008816:	f040 80d3 	bne.w	80089c0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	220b      	movs	r2, #11
 800881e:	761a      	strb	r2, [r3, #24]
      break;
 8008820:	e0ce      	b.n	80089c0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6899      	ldr	r1, [r3, #8]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	899a      	ldrh	r2, [r3, #12]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	795b      	ldrb	r3, [r3, #5]
 800882e:	2001      	movs	r0, #1
 8008830:	9000      	str	r0, [sp, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f8ea 	bl	8008a0c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800883e:	b29a      	uxth	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2206      	movs	r2, #6
 8008848:	761a      	strb	r2, [r3, #24]
      break;
 800884a:	e0c0      	b.n	80089ce <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	795b      	ldrb	r3, [r3, #5]
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fc4c 	bl	80090f0 <USBH_LL_GetURBState>
 8008858:	4603      	mov	r3, r0
 800885a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d103      	bne.n	800886a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2207      	movs	r2, #7
 8008866:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008868:	e0ac      	b.n	80089c4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800886a:	7bbb      	ldrb	r3, [r7, #14]
 800886c:	2b05      	cmp	r3, #5
 800886e:	d105      	bne.n	800887c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	220c      	movs	r2, #12
 8008874:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008876:	2303      	movs	r3, #3
 8008878:	73fb      	strb	r3, [r7, #15]
      break;
 800887a:	e0a3      	b.n	80089c4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d103      	bne.n	800888a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2205      	movs	r2, #5
 8008886:	761a      	strb	r2, [r3, #24]
      break;
 8008888:	e09c      	b.n	80089c4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	2b04      	cmp	r3, #4
 800888e:	f040 8099 	bne.w	80089c4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	220b      	movs	r2, #11
 8008896:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008898:	2302      	movs	r3, #2
 800889a:	73fb      	strb	r3, [r7, #15]
      break;
 800889c:	e092      	b.n	80089c4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	791b      	ldrb	r3, [r3, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	2100      	movs	r1, #0
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f8d5 	bl	8008a56 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2208      	movs	r2, #8
 80088bc:	761a      	strb	r2, [r3, #24]

      break;
 80088be:	e086      	b.n	80089ce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	791b      	ldrb	r3, [r3, #4]
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fc12 	bl	80090f0 <USBH_LL_GetURBState>
 80088cc:	4603      	mov	r3, r0
 80088ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d105      	bne.n	80088e2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	220d      	movs	r2, #13
 80088da:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088e0:	e072      	b.n	80089c8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d103      	bne.n	80088f0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	220b      	movs	r2, #11
 80088ec:	761a      	strb	r2, [r3, #24]
      break;
 80088ee:	e06b      	b.n	80089c8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	d168      	bne.n	80089c8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80088f6:	2303      	movs	r3, #3
 80088f8:	73fb      	strb	r3, [r7, #15]
      break;
 80088fa:	e065      	b.n	80089c8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	795b      	ldrb	r3, [r3, #5]
 8008900:	2201      	movs	r2, #1
 8008902:	9200      	str	r2, [sp, #0]
 8008904:	2200      	movs	r2, #0
 8008906:	2100      	movs	r1, #0
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f87f 	bl	8008a0c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008914:	b29a      	uxth	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	220a      	movs	r2, #10
 800891e:	761a      	strb	r2, [r3, #24]
      break;
 8008920:	e055      	b.n	80089ce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	795b      	ldrb	r3, [r3, #5]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fbe1 	bl	80090f0 <USBH_LL_GetURBState>
 800892e:	4603      	mov	r3, r0
 8008930:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d105      	bne.n	8008944 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	220d      	movs	r2, #13
 8008940:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008942:	e043      	b.n	80089cc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	2b02      	cmp	r3, #2
 8008948:	d103      	bne.n	8008952 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2209      	movs	r2, #9
 800894e:	761a      	strb	r2, [r3, #24]
      break;
 8008950:	e03c      	b.n	80089cc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008952:	7bbb      	ldrb	r3, [r7, #14]
 8008954:	2b04      	cmp	r3, #4
 8008956:	d139      	bne.n	80089cc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	220b      	movs	r2, #11
 800895c:	761a      	strb	r2, [r3, #24]
      break;
 800895e:	e035      	b.n	80089cc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	7e5b      	ldrb	r3, [r3, #25]
 8008964:	3301      	adds	r3, #1
 8008966:	b2da      	uxtb	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	765a      	strb	r2, [r3, #25]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	7e5b      	ldrb	r3, [r3, #25]
 8008970:	2b02      	cmp	r3, #2
 8008972:	d806      	bhi.n	8008982 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008980:	e025      	b.n	80089ce <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008988:	2106      	movs	r1, #6
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	795b      	ldrb	r3, [r3, #5]
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f90c 	bl	8008bb8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	791b      	ldrb	r3, [r3, #4]
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f906 	bl	8008bb8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80089b2:	2302      	movs	r3, #2
 80089b4:	73fb      	strb	r3, [r7, #15]
      break;
 80089b6:	e00a      	b.n	80089ce <USBH_HandleControl+0x2de>

    default:
      break;
 80089b8:	bf00      	nop
 80089ba:	e008      	b.n	80089ce <USBH_HandleControl+0x2de>
      break;
 80089bc:	bf00      	nop
 80089be:	e006      	b.n	80089ce <USBH_HandleControl+0x2de>
      break;
 80089c0:	bf00      	nop
 80089c2:	e004      	b.n	80089ce <USBH_HandleControl+0x2de>
      break;
 80089c4:	bf00      	nop
 80089c6:	e002      	b.n	80089ce <USBH_HandleControl+0x2de>
      break;
 80089c8:	bf00      	nop
 80089ca:	e000      	b.n	80089ce <USBH_HandleControl+0x2de>
      break;
 80089cc:	bf00      	nop
  }

  return status;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b088      	sub	sp, #32
 80089dc:	af04      	add	r7, sp, #16
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	4613      	mov	r3, r2
 80089e4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089e6:	79f9      	ldrb	r1, [r7, #7]
 80089e8:	2300      	movs	r3, #0
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	2308      	movs	r3, #8
 80089ee:	9302      	str	r3, [sp, #8]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	2300      	movs	r3, #0
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	2300      	movs	r3, #0
 80089fa:	2200      	movs	r2, #0
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 fb46 	bl	800908e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af04      	add	r7, sp, #16
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	4611      	mov	r1, r2
 8008a18:	461a      	mov	r2, r3
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	80fb      	strh	r3, [r7, #6]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a30:	7979      	ldrb	r1, [r7, #5]
 8008a32:	7e3b      	ldrb	r3, [r7, #24]
 8008a34:	9303      	str	r3, [sp, #12]
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	9302      	str	r3, [sp, #8]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	2301      	movs	r3, #1
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	2300      	movs	r3, #0
 8008a44:	2200      	movs	r2, #0
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fb21 	bl	800908e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b088      	sub	sp, #32
 8008a5a:	af04      	add	r7, sp, #16
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	4611      	mov	r1, r2
 8008a62:	461a      	mov	r2, r3
 8008a64:	460b      	mov	r3, r1
 8008a66:	80fb      	strh	r3, [r7, #6]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a6c:	7979      	ldrb	r1, [r7, #5]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9303      	str	r3, [sp, #12]
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	9302      	str	r3, [sp, #8]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	2201      	movs	r2, #1
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 fb03 	bl	800908e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a88:	2300      	movs	r3, #0

}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b088      	sub	sp, #32
 8008a96:	af04      	add	r7, sp, #16
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	80fb      	strh	r3, [r7, #6]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ab6:	7979      	ldrb	r1, [r7, #5]
 8008ab8:	7e3b      	ldrb	r3, [r7, #24]
 8008aba:	9303      	str	r3, [sp, #12]
 8008abc:	88fb      	ldrh	r3, [r7, #6]
 8008abe:	9302      	str	r3, [sp, #8]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	2302      	movs	r3, #2
 8008aca:	2200      	movs	r2, #0
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 fade 	bl	800908e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b088      	sub	sp, #32
 8008ae0:	af04      	add	r7, sp, #16
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	461a      	mov	r2, r3
 8008aea:	460b      	mov	r3, r1
 8008aec:	80fb      	strh	r3, [r7, #6]
 8008aee:	4613      	mov	r3, r2
 8008af0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008af2:	7979      	ldrb	r1, [r7, #5]
 8008af4:	2300      	movs	r3, #0
 8008af6:	9303      	str	r3, [sp, #12]
 8008af8:	88fb      	ldrh	r3, [r7, #6]
 8008afa:	9302      	str	r3, [sp, #8]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	2301      	movs	r3, #1
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	2302      	movs	r3, #2
 8008b06:	2201      	movs	r2, #1
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 fac0 	bl	800908e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af04      	add	r7, sp, #16
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	461a      	mov	r2, r3
 8008b26:	4603      	mov	r3, r0
 8008b28:	70fb      	strb	r3, [r7, #3]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	70bb      	strb	r3, [r7, #2]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b32:	7878      	ldrb	r0, [r7, #1]
 8008b34:	78ba      	ldrb	r2, [r7, #2]
 8008b36:	78f9      	ldrb	r1, [r7, #3]
 8008b38:	8b3b      	ldrh	r3, [r7, #24]
 8008b3a:	9302      	str	r3, [sp, #8]
 8008b3c:	7d3b      	ldrb	r3, [r7, #20]
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	7c3b      	ldrb	r3, [r7, #16]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	4603      	mov	r3, r0
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa53 	bl	8008ff2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fa72 	bl	8009050 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f836 	bl	8008bf4 <USBH_GetFreePipe>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b8c:	89fb      	ldrh	r3, [r7, #14]
 8008b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d00a      	beq.n	8008bac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008b96:	78fa      	ldrb	r2, [r7, #3]
 8008b98:	89fb      	ldrh	r3, [r7, #14]
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	33e0      	adds	r3, #224	; 0xe0
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	440b      	add	r3, r1
 8008baa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008bac:	89fb      	ldrh	r3, [r7, #14]
 8008bae:	b2db      	uxtb	r3, r3
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	2b0f      	cmp	r3, #15
 8008bc8:	d80d      	bhi.n	8008be6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	33e0      	adds	r3, #224	; 0xe0
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	78fb      	ldrb	r3, [r7, #3]
 8008bd8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008bdc:	6879      	ldr	r1, [r7, #4]
 8008bde:	33e0      	adds	r3, #224	; 0xe0
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	440b      	add	r3, r1
 8008be4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
 8008c04:	e00f      	b.n	8008c26 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	33e0      	adds	r3, #224	; 0xe0
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d102      	bne.n	8008c20 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	e007      	b.n	8008c30 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	3301      	adds	r3, #1
 8008c24:	73fb      	strb	r3, [r7, #15]
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	2b0f      	cmp	r3, #15
 8008c2a:	d9ec      	bls.n	8008c06 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008c40:	2201      	movs	r2, #1
 8008c42:	490e      	ldr	r1, [pc, #56]	; (8008c7c <MX_USB_HOST_Init+0x40>)
 8008c44:	480e      	ldr	r0, [pc, #56]	; (8008c80 <MX_USB_HOST_Init+0x44>)
 8008c46:	f7fe fba7 	bl	8007398 <USBH_Init>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008c50:	f7f8 f9c6 	bl	8000fe0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008c54:	490b      	ldr	r1, [pc, #44]	; (8008c84 <MX_USB_HOST_Init+0x48>)
 8008c56:	480a      	ldr	r0, [pc, #40]	; (8008c80 <MX_USB_HOST_Init+0x44>)
 8008c58:	f7fe fc2c 	bl	80074b4 <USBH_RegisterClass>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008c62:	f7f8 f9bd 	bl	8000fe0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008c66:	4806      	ldr	r0, [pc, #24]	; (8008c80 <MX_USB_HOST_Init+0x44>)
 8008c68:	f7fe fcb0 	bl	80075cc <USBH_Start>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008c72:	f7f8 f9b5 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008c76:	bf00      	nop
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	08008c9d 	.word	0x08008c9d
 8008c80:	200003d0 	.word	0x200003d0
 8008c84:	20000150 	.word	0x20000150

08008c88 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008c8c:	4802      	ldr	r0, [pc, #8]	; (8008c98 <MX_USB_HOST_Process+0x10>)
 8008c8e:	f7fe fcad 	bl	80075ec <USBH_Process>
}
 8008c92:	bf00      	nop
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	200003d0 	.word	0x200003d0

08008c9c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008ca8:	78fb      	ldrb	r3, [r7, #3]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	2b04      	cmp	r3, #4
 8008cae:	d819      	bhi.n	8008ce4 <USBH_UserProcess+0x48>
 8008cb0:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <USBH_UserProcess+0x1c>)
 8008cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb6:	bf00      	nop
 8008cb8:	08008ce5 	.word	0x08008ce5
 8008cbc:	08008cd5 	.word	0x08008cd5
 8008cc0:	08008ce5 	.word	0x08008ce5
 8008cc4:	08008cdd 	.word	0x08008cdd
 8008cc8:	08008ccd 	.word	0x08008ccd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008ccc:	4b09      	ldr	r3, [pc, #36]	; (8008cf4 <USBH_UserProcess+0x58>)
 8008cce:	2203      	movs	r2, #3
 8008cd0:	701a      	strb	r2, [r3, #0]
  break;
 8008cd2:	e008      	b.n	8008ce6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008cd4:	4b07      	ldr	r3, [pc, #28]	; (8008cf4 <USBH_UserProcess+0x58>)
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	701a      	strb	r2, [r3, #0]
  break;
 8008cda:	e004      	b.n	8008ce6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008cdc:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <USBH_UserProcess+0x58>)
 8008cde:	2201      	movs	r2, #1
 8008ce0:	701a      	strb	r2, [r3, #0]
  break;
 8008ce2:	e000      	b.n	8008ce6 <USBH_UserProcess+0x4a>

  default:
  break;
 8008ce4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	200007a8 	.word	0x200007a8

08008cf8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08a      	sub	sp, #40	; 0x28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d00:	f107 0314 	add.w	r3, r7, #20
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	605a      	str	r2, [r3, #4]
 8008d0a:	609a      	str	r2, [r3, #8]
 8008d0c:	60da      	str	r2, [r3, #12]
 8008d0e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d18:	d147      	bne.n	8008daa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	613b      	str	r3, [r7, #16]
 8008d1e:	4b25      	ldr	r3, [pc, #148]	; (8008db4 <HAL_HCD_MspInit+0xbc>)
 8008d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d22:	4a24      	ldr	r2, [pc, #144]	; (8008db4 <HAL_HCD_MspInit+0xbc>)
 8008d24:	f043 0301 	orr.w	r3, r3, #1
 8008d28:	6313      	str	r3, [r2, #48]	; 0x30
 8008d2a:	4b22      	ldr	r3, [pc, #136]	; (8008db4 <HAL_HCD_MspInit+0xbc>)
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	613b      	str	r3, [r7, #16]
 8008d34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008d44:	f107 0314 	add.w	r3, r7, #20
 8008d48:	4619      	mov	r1, r3
 8008d4a:	481b      	ldr	r0, [pc, #108]	; (8008db8 <HAL_HCD_MspInit+0xc0>)
 8008d4c:	f7f8 fdb4 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008d50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d56:	2302      	movs	r3, #2
 8008d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d62:	230a      	movs	r3, #10
 8008d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d66:	f107 0314 	add.w	r3, r7, #20
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4812      	ldr	r0, [pc, #72]	; (8008db8 <HAL_HCD_MspInit+0xc0>)
 8008d6e:	f7f8 fda3 	bl	80018b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d72:	4b10      	ldr	r3, [pc, #64]	; (8008db4 <HAL_HCD_MspInit+0xbc>)
 8008d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d76:	4a0f      	ldr	r2, [pc, #60]	; (8008db4 <HAL_HCD_MspInit+0xbc>)
 8008d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d7c:	6353      	str	r3, [r2, #52]	; 0x34
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <HAL_HCD_MspInit+0xbc>)
 8008d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d86:	4a0b      	ldr	r2, [pc, #44]	; (8008db4 <HAL_HCD_MspInit+0xbc>)
 8008d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8008d8e:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <HAL_HCD_MspInit+0xbc>)
 8008d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d96:	60fb      	str	r3, [r7, #12]
 8008d98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	2043      	movs	r0, #67	; 0x43
 8008da0:	f7f8 fd53 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008da4:	2043      	movs	r0, #67	; 0x43
 8008da6:	f7f8 fd6c 	bl	8001882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008daa:	bf00      	nop
 8008dac:	3728      	adds	r7, #40	; 0x28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	40023800 	.word	0x40023800
 8008db8:	40020000 	.word	0x40020000

08008dbc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe ffed 	bl	8007daa <USBH_LL_IncTimer>
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff f825 	bl	8007e36 <USBH_LL_Connect>
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff f82e 	bl	8007e64 <USBH_LL_Disconnect>
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	460b      	mov	r3, r1
 8008e1a:	70fb      	strb	r3, [r7, #3]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe ffdf 	bl	8007dfe <USBH_LL_PortEnabled>
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe ffdf 	bl	8007e1a <USBH_LL_PortDisabled>
}
 8008e5c:	bf00      	nop
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d12a      	bne.n	8008ecc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008e76:	4a18      	ldr	r2, [pc, #96]	; (8008ed8 <USBH_LL_Init+0x74>)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a15      	ldr	r2, [pc, #84]	; (8008ed8 <USBH_LL_Init+0x74>)
 8008e82:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e86:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <USBH_LL_Init+0x74>)
 8008e88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e8c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008e8e:	4b12      	ldr	r3, [pc, #72]	; (8008ed8 <USBH_LL_Init+0x74>)
 8008e90:	2208      	movs	r2, #8
 8008e92:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008e94:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <USBH_LL_Init+0x74>)
 8008e96:	2201      	movs	r2, #1
 8008e98:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e9a:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <USBH_LL_Init+0x74>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ea0:	4b0d      	ldr	r3, [pc, #52]	; (8008ed8 <USBH_LL_Init+0x74>)
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <USBH_LL_Init+0x74>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008eac:	480a      	ldr	r0, [pc, #40]	; (8008ed8 <USBH_LL_Init+0x74>)
 8008eae:	f7f8 fed0 	bl	8001c52 <HAL_HCD_Init>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008eb8:	f7f8 f892 	bl	8000fe0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ebc:	4806      	ldr	r0, [pc, #24]	; (8008ed8 <USBH_LL_Init+0x74>)
 8008ebe:	f7f9 fab4 	bl	800242a <HAL_HCD_GetCurrentFrame>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7fe ff60 	bl	8007d8c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	200007ac 	.word	0x200007ac

08008edc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7f9 fa23 	bl	800233e <HAL_HCD_Start>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 f95c 	bl	80091bc <USBH_Get_USB_Status>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7f9 fa2b 	bl	8002384 <HAL_HCD_Stop>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 f941 	bl	80091bc <USBH_Get_USB_Status>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7f9 fa73 	bl	8002446 <HAL_HCD_GetCurrentSpeed>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d00c      	beq.n	8008f80 <USBH_LL_GetSpeed+0x38>
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d80d      	bhi.n	8008f86 <USBH_LL_GetSpeed+0x3e>
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <USBH_LL_GetSpeed+0x2c>
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d003      	beq.n	8008f7a <USBH_LL_GetSpeed+0x32>
 8008f72:	e008      	b.n	8008f86 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73fb      	strb	r3, [r7, #15]
    break;
 8008f78:	e008      	b.n	8008f8c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f7e:	e005      	b.n	8008f8c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008f80:	2302      	movs	r3, #2
 8008f82:	73fb      	strb	r3, [r7, #15]
    break;
 8008f84:	e002      	b.n	8008f8c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008f86:	2301      	movs	r3, #1
 8008f88:	73fb      	strb	r3, [r7, #15]
    break;
 8008f8a:	bf00      	nop
  }
  return  speed;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7f9 fa06 	bl	80023be <HAL_HCD_ResetPort>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 f8ff 	bl	80091bc <USBH_Get_USB_Status>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fde:	78fa      	ldrb	r2, [r7, #3]
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7f9 fa0d 	bl	8002402 <HAL_HCD_HC_GetXferCount>
 8008fe8:	4603      	mov	r3, r0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ff2:	b590      	push	{r4, r7, lr}
 8008ff4:	b089      	sub	sp, #36	; 0x24
 8008ff6:	af04      	add	r7, sp, #16
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	4608      	mov	r0, r1
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	461a      	mov	r2, r3
 8009000:	4603      	mov	r3, r0
 8009002:	70fb      	strb	r3, [r7, #3]
 8009004:	460b      	mov	r3, r1
 8009006:	70bb      	strb	r3, [r7, #2]
 8009008:	4613      	mov	r3, r2
 800900a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800901a:	787c      	ldrb	r4, [r7, #1]
 800901c:	78ba      	ldrb	r2, [r7, #2]
 800901e:	78f9      	ldrb	r1, [r7, #3]
 8009020:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009022:	9302      	str	r3, [sp, #8]
 8009024:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009028:	9301      	str	r3, [sp, #4]
 800902a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	4623      	mov	r3, r4
 8009032:	f7f8 fe70 	bl	8001d16 <HAL_HCD_HC_Init>
 8009036:	4603      	mov	r3, r0
 8009038:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	4618      	mov	r0, r3
 800903e:	f000 f8bd 	bl	80091bc <USBH_Get_USB_Status>
 8009042:	4603      	mov	r3, r0
 8009044:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009046:	7bbb      	ldrb	r3, [r7, #14]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	bd90      	pop	{r4, r7, pc}

08009050 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800906a:	78fa      	ldrb	r2, [r7, #3]
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f7f8 fee0 	bl	8001e34 <HAL_HCD_HC_Halt>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 f89e 	bl	80091bc <USBH_Get_USB_Status>
 8009080:	4603      	mov	r3, r0
 8009082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009084:	7bbb      	ldrb	r3, [r7, #14]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800908e:	b590      	push	{r4, r7, lr}
 8009090:	b089      	sub	sp, #36	; 0x24
 8009092:	af04      	add	r7, sp, #16
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	4608      	mov	r0, r1
 8009098:	4611      	mov	r1, r2
 800909a:	461a      	mov	r2, r3
 800909c:	4603      	mov	r3, r0
 800909e:	70fb      	strb	r3, [r7, #3]
 80090a0:	460b      	mov	r3, r1
 80090a2:	70bb      	strb	r3, [r7, #2]
 80090a4:	4613      	mov	r3, r2
 80090a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80090b6:	787c      	ldrb	r4, [r7, #1]
 80090b8:	78ba      	ldrb	r2, [r7, #2]
 80090ba:	78f9      	ldrb	r1, [r7, #3]
 80090bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090c0:	9303      	str	r3, [sp, #12]
 80090c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80090c4:	9302      	str	r3, [sp, #8]
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	4623      	mov	r3, r4
 80090d2:	f7f8 fed3 	bl	8001e7c <HAL_HCD_HC_SubmitRequest>
 80090d6:	4603      	mov	r3, r0
 80090d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 f86d 	bl	80091bc <USBH_Get_USB_Status>
 80090e2:	4603      	mov	r3, r0
 80090e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd90      	pop	{r4, r7, pc}

080090f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7f9 f967 	bl	80023da <HAL_HCD_HC_GetURBState>
 800910c:	4603      	mov	r3, r0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009128:	2b01      	cmp	r3, #1
 800912a:	d103      	bne.n	8009134 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800912c:	78fb      	ldrb	r3, [r7, #3]
 800912e:	4618      	mov	r0, r3
 8009130:	f000 f870 	bl	8009214 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009134:	20c8      	movs	r0, #200	; 0xc8
 8009136:	f7f8 fa89 	bl	800164c <HAL_Delay>
  return USBH_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
 8009150:	4613      	mov	r3, r2
 8009152:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800915a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	212c      	movs	r1, #44	; 0x2c
 8009162:	fb01 f303 	mul.w	r3, r1, r3
 8009166:	4413      	add	r3, r2
 8009168:	333b      	adds	r3, #59	; 0x3b
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d009      	beq.n	8009184 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009170:	78fb      	ldrb	r3, [r7, #3]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	212c      	movs	r1, #44	; 0x2c
 8009176:	fb01 f303 	mul.w	r3, r1, r3
 800917a:	4413      	add	r3, r2
 800917c:	3354      	adds	r3, #84	; 0x54
 800917e:	78ba      	ldrb	r2, [r7, #2]
 8009180:	701a      	strb	r2, [r3, #0]
 8009182:	e008      	b.n	8009196 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	212c      	movs	r1, #44	; 0x2c
 800918a:	fb01 f303 	mul.w	r3, r1, r3
 800918e:	4413      	add	r3, r2
 8009190:	3355      	adds	r3, #85	; 0x55
 8009192:	78ba      	ldrb	r2, [r7, #2]
 8009194:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7f8 fa4d 	bl	800164c <HAL_Delay>
}
 80091b2:	bf00      	nop
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091ca:	79fb      	ldrb	r3, [r7, #7]
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d817      	bhi.n	8009200 <USBH_Get_USB_Status+0x44>
 80091d0:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <USBH_Get_USB_Status+0x1c>)
 80091d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d6:	bf00      	nop
 80091d8:	080091e9 	.word	0x080091e9
 80091dc:	080091ef 	.word	0x080091ef
 80091e0:	080091f5 	.word	0x080091f5
 80091e4:	080091fb 	.word	0x080091fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
    break;
 80091ec:	e00b      	b.n	8009206 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80091ee:	2302      	movs	r3, #2
 80091f0:	73fb      	strb	r3, [r7, #15]
    break;
 80091f2:	e008      	b.n	8009206 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80091f4:	2301      	movs	r3, #1
 80091f6:	73fb      	strb	r3, [r7, #15]
    break;
 80091f8:	e005      	b.n	8009206 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80091fa:	2302      	movs	r3, #2
 80091fc:	73fb      	strb	r3, [r7, #15]
    break;
 80091fe:	e002      	b.n	8009206 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009200:	2302      	movs	r3, #2
 8009202:	73fb      	strb	r3, [r7, #15]
    break;
 8009204:	bf00      	nop
  }
  return usb_status;
 8009206:	7bfb      	ldrb	r3, [r7, #15]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d102      	bne.n	800922e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]
 800922c:	e001      	b.n	8009232 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800922e:	2301      	movs	r3, #1
 8009230:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009232:	7bfb      	ldrb	r3, [r7, #15]
 8009234:	461a      	mov	r2, r3
 8009236:	2101      	movs	r1, #1
 8009238:	4803      	ldr	r0, [pc, #12]	; (8009248 <MX_DriverVbusFS+0x34>)
 800923a:	f7f8 fcf1 	bl	8001c20 <HAL_GPIO_WritePin>
}
 800923e:	bf00      	nop
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	40020800 	.word	0x40020800

0800924c <__errno>:
 800924c:	4b01      	ldr	r3, [pc, #4]	; (8009254 <__errno+0x8>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20000170 	.word	0x20000170

08009258 <__libc_init_array>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	4d0d      	ldr	r5, [pc, #52]	; (8009290 <__libc_init_array+0x38>)
 800925c:	4c0d      	ldr	r4, [pc, #52]	; (8009294 <__libc_init_array+0x3c>)
 800925e:	1b64      	subs	r4, r4, r5
 8009260:	10a4      	asrs	r4, r4, #2
 8009262:	2600      	movs	r6, #0
 8009264:	42a6      	cmp	r6, r4
 8009266:	d109      	bne.n	800927c <__libc_init_array+0x24>
 8009268:	4d0b      	ldr	r5, [pc, #44]	; (8009298 <__libc_init_array+0x40>)
 800926a:	4c0c      	ldr	r4, [pc, #48]	; (800929c <__libc_init_array+0x44>)
 800926c:	f000 f92e 	bl	80094cc <_init>
 8009270:	1b64      	subs	r4, r4, r5
 8009272:	10a4      	asrs	r4, r4, #2
 8009274:	2600      	movs	r6, #0
 8009276:	42a6      	cmp	r6, r4
 8009278:	d105      	bne.n	8009286 <__libc_init_array+0x2e>
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009280:	4798      	blx	r3
 8009282:	3601      	adds	r6, #1
 8009284:	e7ee      	b.n	8009264 <__libc_init_array+0xc>
 8009286:	f855 3b04 	ldr.w	r3, [r5], #4
 800928a:	4798      	blx	r3
 800928c:	3601      	adds	r6, #1
 800928e:	e7f2      	b.n	8009276 <__libc_init_array+0x1e>
 8009290:	08009508 	.word	0x08009508
 8009294:	08009508 	.word	0x08009508
 8009298:	08009508 	.word	0x08009508
 800929c:	0800950c 	.word	0x0800950c

080092a0 <malloc>:
 80092a0:	4b02      	ldr	r3, [pc, #8]	; (80092ac <malloc+0xc>)
 80092a2:	4601      	mov	r1, r0
 80092a4:	6818      	ldr	r0, [r3, #0]
 80092a6:	f000 b87f 	b.w	80093a8 <_malloc_r>
 80092aa:	bf00      	nop
 80092ac:	20000170 	.word	0x20000170

080092b0 <free>:
 80092b0:	4b02      	ldr	r3, [pc, #8]	; (80092bc <free+0xc>)
 80092b2:	4601      	mov	r1, r0
 80092b4:	6818      	ldr	r0, [r3, #0]
 80092b6:	f000 b80b 	b.w	80092d0 <_free_r>
 80092ba:	bf00      	nop
 80092bc:	20000170 	.word	0x20000170

080092c0 <memset>:
 80092c0:	4402      	add	r2, r0
 80092c2:	4603      	mov	r3, r0
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d100      	bne.n	80092ca <memset+0xa>
 80092c8:	4770      	bx	lr
 80092ca:	f803 1b01 	strb.w	r1, [r3], #1
 80092ce:	e7f9      	b.n	80092c4 <memset+0x4>

080092d0 <_free_r>:
 80092d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092d2:	2900      	cmp	r1, #0
 80092d4:	d044      	beq.n	8009360 <_free_r+0x90>
 80092d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092da:	9001      	str	r0, [sp, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f1a1 0404 	sub.w	r4, r1, #4
 80092e2:	bfb8      	it	lt
 80092e4:	18e4      	addlt	r4, r4, r3
 80092e6:	f000 f8e3 	bl	80094b0 <__malloc_lock>
 80092ea:	4a1e      	ldr	r2, [pc, #120]	; (8009364 <_free_r+0x94>)
 80092ec:	9801      	ldr	r0, [sp, #4]
 80092ee:	6813      	ldr	r3, [r2, #0]
 80092f0:	b933      	cbnz	r3, 8009300 <_free_r+0x30>
 80092f2:	6063      	str	r3, [r4, #4]
 80092f4:	6014      	str	r4, [r2, #0]
 80092f6:	b003      	add	sp, #12
 80092f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092fc:	f000 b8de 	b.w	80094bc <__malloc_unlock>
 8009300:	42a3      	cmp	r3, r4
 8009302:	d908      	bls.n	8009316 <_free_r+0x46>
 8009304:	6825      	ldr	r5, [r4, #0]
 8009306:	1961      	adds	r1, r4, r5
 8009308:	428b      	cmp	r3, r1
 800930a:	bf01      	itttt	eq
 800930c:	6819      	ldreq	r1, [r3, #0]
 800930e:	685b      	ldreq	r3, [r3, #4]
 8009310:	1949      	addeq	r1, r1, r5
 8009312:	6021      	streq	r1, [r4, #0]
 8009314:	e7ed      	b.n	80092f2 <_free_r+0x22>
 8009316:	461a      	mov	r2, r3
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	b10b      	cbz	r3, 8009320 <_free_r+0x50>
 800931c:	42a3      	cmp	r3, r4
 800931e:	d9fa      	bls.n	8009316 <_free_r+0x46>
 8009320:	6811      	ldr	r1, [r2, #0]
 8009322:	1855      	adds	r5, r2, r1
 8009324:	42a5      	cmp	r5, r4
 8009326:	d10b      	bne.n	8009340 <_free_r+0x70>
 8009328:	6824      	ldr	r4, [r4, #0]
 800932a:	4421      	add	r1, r4
 800932c:	1854      	adds	r4, r2, r1
 800932e:	42a3      	cmp	r3, r4
 8009330:	6011      	str	r1, [r2, #0]
 8009332:	d1e0      	bne.n	80092f6 <_free_r+0x26>
 8009334:	681c      	ldr	r4, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	6053      	str	r3, [r2, #4]
 800933a:	4421      	add	r1, r4
 800933c:	6011      	str	r1, [r2, #0]
 800933e:	e7da      	b.n	80092f6 <_free_r+0x26>
 8009340:	d902      	bls.n	8009348 <_free_r+0x78>
 8009342:	230c      	movs	r3, #12
 8009344:	6003      	str	r3, [r0, #0]
 8009346:	e7d6      	b.n	80092f6 <_free_r+0x26>
 8009348:	6825      	ldr	r5, [r4, #0]
 800934a:	1961      	adds	r1, r4, r5
 800934c:	428b      	cmp	r3, r1
 800934e:	bf04      	itt	eq
 8009350:	6819      	ldreq	r1, [r3, #0]
 8009352:	685b      	ldreq	r3, [r3, #4]
 8009354:	6063      	str	r3, [r4, #4]
 8009356:	bf04      	itt	eq
 8009358:	1949      	addeq	r1, r1, r5
 800935a:	6021      	streq	r1, [r4, #0]
 800935c:	6054      	str	r4, [r2, #4]
 800935e:	e7ca      	b.n	80092f6 <_free_r+0x26>
 8009360:	b003      	add	sp, #12
 8009362:	bd30      	pop	{r4, r5, pc}
 8009364:	20000ab0 	.word	0x20000ab0

08009368 <sbrk_aligned>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	4e0e      	ldr	r6, [pc, #56]	; (80093a4 <sbrk_aligned+0x3c>)
 800936c:	460c      	mov	r4, r1
 800936e:	6831      	ldr	r1, [r6, #0]
 8009370:	4605      	mov	r5, r0
 8009372:	b911      	cbnz	r1, 800937a <sbrk_aligned+0x12>
 8009374:	f000 f88c 	bl	8009490 <_sbrk_r>
 8009378:	6030      	str	r0, [r6, #0]
 800937a:	4621      	mov	r1, r4
 800937c:	4628      	mov	r0, r5
 800937e:	f000 f887 	bl	8009490 <_sbrk_r>
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	d00a      	beq.n	800939c <sbrk_aligned+0x34>
 8009386:	1cc4      	adds	r4, r0, #3
 8009388:	f024 0403 	bic.w	r4, r4, #3
 800938c:	42a0      	cmp	r0, r4
 800938e:	d007      	beq.n	80093a0 <sbrk_aligned+0x38>
 8009390:	1a21      	subs	r1, r4, r0
 8009392:	4628      	mov	r0, r5
 8009394:	f000 f87c 	bl	8009490 <_sbrk_r>
 8009398:	3001      	adds	r0, #1
 800939a:	d101      	bne.n	80093a0 <sbrk_aligned+0x38>
 800939c:	f04f 34ff 	mov.w	r4, #4294967295
 80093a0:	4620      	mov	r0, r4
 80093a2:	bd70      	pop	{r4, r5, r6, pc}
 80093a4:	20000ab4 	.word	0x20000ab4

080093a8 <_malloc_r>:
 80093a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ac:	1ccd      	adds	r5, r1, #3
 80093ae:	f025 0503 	bic.w	r5, r5, #3
 80093b2:	3508      	adds	r5, #8
 80093b4:	2d0c      	cmp	r5, #12
 80093b6:	bf38      	it	cc
 80093b8:	250c      	movcc	r5, #12
 80093ba:	2d00      	cmp	r5, #0
 80093bc:	4607      	mov	r7, r0
 80093be:	db01      	blt.n	80093c4 <_malloc_r+0x1c>
 80093c0:	42a9      	cmp	r1, r5
 80093c2:	d905      	bls.n	80093d0 <_malloc_r+0x28>
 80093c4:	230c      	movs	r3, #12
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	2600      	movs	r6, #0
 80093ca:	4630      	mov	r0, r6
 80093cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d0:	4e2e      	ldr	r6, [pc, #184]	; (800948c <_malloc_r+0xe4>)
 80093d2:	f000 f86d 	bl	80094b0 <__malloc_lock>
 80093d6:	6833      	ldr	r3, [r6, #0]
 80093d8:	461c      	mov	r4, r3
 80093da:	bb34      	cbnz	r4, 800942a <_malloc_r+0x82>
 80093dc:	4629      	mov	r1, r5
 80093de:	4638      	mov	r0, r7
 80093e0:	f7ff ffc2 	bl	8009368 <sbrk_aligned>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	4604      	mov	r4, r0
 80093e8:	d14d      	bne.n	8009486 <_malloc_r+0xde>
 80093ea:	6834      	ldr	r4, [r6, #0]
 80093ec:	4626      	mov	r6, r4
 80093ee:	2e00      	cmp	r6, #0
 80093f0:	d140      	bne.n	8009474 <_malloc_r+0xcc>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	4631      	mov	r1, r6
 80093f6:	4638      	mov	r0, r7
 80093f8:	eb04 0803 	add.w	r8, r4, r3
 80093fc:	f000 f848 	bl	8009490 <_sbrk_r>
 8009400:	4580      	cmp	r8, r0
 8009402:	d13a      	bne.n	800947a <_malloc_r+0xd2>
 8009404:	6821      	ldr	r1, [r4, #0]
 8009406:	3503      	adds	r5, #3
 8009408:	1a6d      	subs	r5, r5, r1
 800940a:	f025 0503 	bic.w	r5, r5, #3
 800940e:	3508      	adds	r5, #8
 8009410:	2d0c      	cmp	r5, #12
 8009412:	bf38      	it	cc
 8009414:	250c      	movcc	r5, #12
 8009416:	4629      	mov	r1, r5
 8009418:	4638      	mov	r0, r7
 800941a:	f7ff ffa5 	bl	8009368 <sbrk_aligned>
 800941e:	3001      	adds	r0, #1
 8009420:	d02b      	beq.n	800947a <_malloc_r+0xd2>
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	442b      	add	r3, r5
 8009426:	6023      	str	r3, [r4, #0]
 8009428:	e00e      	b.n	8009448 <_malloc_r+0xa0>
 800942a:	6822      	ldr	r2, [r4, #0]
 800942c:	1b52      	subs	r2, r2, r5
 800942e:	d41e      	bmi.n	800946e <_malloc_r+0xc6>
 8009430:	2a0b      	cmp	r2, #11
 8009432:	d916      	bls.n	8009462 <_malloc_r+0xba>
 8009434:	1961      	adds	r1, r4, r5
 8009436:	42a3      	cmp	r3, r4
 8009438:	6025      	str	r5, [r4, #0]
 800943a:	bf18      	it	ne
 800943c:	6059      	strne	r1, [r3, #4]
 800943e:	6863      	ldr	r3, [r4, #4]
 8009440:	bf08      	it	eq
 8009442:	6031      	streq	r1, [r6, #0]
 8009444:	5162      	str	r2, [r4, r5]
 8009446:	604b      	str	r3, [r1, #4]
 8009448:	4638      	mov	r0, r7
 800944a:	f104 060b 	add.w	r6, r4, #11
 800944e:	f000 f835 	bl	80094bc <__malloc_unlock>
 8009452:	f026 0607 	bic.w	r6, r6, #7
 8009456:	1d23      	adds	r3, r4, #4
 8009458:	1af2      	subs	r2, r6, r3
 800945a:	d0b6      	beq.n	80093ca <_malloc_r+0x22>
 800945c:	1b9b      	subs	r3, r3, r6
 800945e:	50a3      	str	r3, [r4, r2]
 8009460:	e7b3      	b.n	80093ca <_malloc_r+0x22>
 8009462:	6862      	ldr	r2, [r4, #4]
 8009464:	42a3      	cmp	r3, r4
 8009466:	bf0c      	ite	eq
 8009468:	6032      	streq	r2, [r6, #0]
 800946a:	605a      	strne	r2, [r3, #4]
 800946c:	e7ec      	b.n	8009448 <_malloc_r+0xa0>
 800946e:	4623      	mov	r3, r4
 8009470:	6864      	ldr	r4, [r4, #4]
 8009472:	e7b2      	b.n	80093da <_malloc_r+0x32>
 8009474:	4634      	mov	r4, r6
 8009476:	6876      	ldr	r6, [r6, #4]
 8009478:	e7b9      	b.n	80093ee <_malloc_r+0x46>
 800947a:	230c      	movs	r3, #12
 800947c:	603b      	str	r3, [r7, #0]
 800947e:	4638      	mov	r0, r7
 8009480:	f000 f81c 	bl	80094bc <__malloc_unlock>
 8009484:	e7a1      	b.n	80093ca <_malloc_r+0x22>
 8009486:	6025      	str	r5, [r4, #0]
 8009488:	e7de      	b.n	8009448 <_malloc_r+0xa0>
 800948a:	bf00      	nop
 800948c:	20000ab0 	.word	0x20000ab0

08009490 <_sbrk_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d06      	ldr	r5, [pc, #24]	; (80094ac <_sbrk_r+0x1c>)
 8009494:	2300      	movs	r3, #0
 8009496:	4604      	mov	r4, r0
 8009498:	4608      	mov	r0, r1
 800949a:	602b      	str	r3, [r5, #0]
 800949c:	f7f7 fe9e 	bl	80011dc <_sbrk>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_sbrk_r+0x1a>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_sbrk_r+0x1a>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	20000ab8 	.word	0x20000ab8

080094b0 <__malloc_lock>:
 80094b0:	4801      	ldr	r0, [pc, #4]	; (80094b8 <__malloc_lock+0x8>)
 80094b2:	f000 b809 	b.w	80094c8 <__retarget_lock_acquire_recursive>
 80094b6:	bf00      	nop
 80094b8:	20000abc 	.word	0x20000abc

080094bc <__malloc_unlock>:
 80094bc:	4801      	ldr	r0, [pc, #4]	; (80094c4 <__malloc_unlock+0x8>)
 80094be:	f000 b804 	b.w	80094ca <__retarget_lock_release_recursive>
 80094c2:	bf00      	nop
 80094c4:	20000abc 	.word	0x20000abc

080094c8 <__retarget_lock_acquire_recursive>:
 80094c8:	4770      	bx	lr

080094ca <__retarget_lock_release_recursive>:
 80094ca:	4770      	bx	lr

080094cc <_init>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr

080094d8 <_fini>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr
