
P1_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009534  08009534  00019534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009550  08009550  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08009550  08009550  00019550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009558  08009558  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009558  08009558  00019558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          000008f0  20000204  20000204  00020204  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000af4  20000af4  00020204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c886  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045c9  00000000  00000000  0003caba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001800  00000000  00000000  00041088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001610  00000000  00000000  00042888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ba9  00000000  00000000  00043e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4dc  00000000  00000000  00069a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3f39  00000000  00000000  00088f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015ce56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000667c  00000000  00000000  0015cea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000204 	.word	0x20000204
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800951c 	.word	0x0800951c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000208 	.word	0x20000208
 80001c4:	0800951c 	.word	0x0800951c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <fsm_new>:
#include <stdlib.h>
#include "fsm.h"

fsm_t*
fsm_new (fsm_trans_t* tt)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 80004d4:	2008      	movs	r0, #8
 80004d6:	f008 ff0b 	bl	80092f0 <malloc>
 80004da:	4603      	mov	r3, r0
 80004dc:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f000 f805 	bl	80004f0 <fsm_init>
  return this;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <fsm_init>:

void
fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  this->current_state=0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
  this->tt = tt;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	605a      	str	r2, [r3, #4]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <fsm_fire>:

void
fsm_fire (fsm_t* this)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b084      	sub	sp, #16
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e01c      	b.n	800055c <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	429a      	cmp	r2, r3
 800052c:	d113      	bne.n	8000556 <fsm_fire+0x44>
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	4798      	blx	r3
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d00c      	beq.n	8000556 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00c      	beq.n	8000566 <fsm_fire+0x54>
        t->out(this);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	4798      	blx	r3
      break;
 8000554:	e007      	b.n	8000566 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3310      	adds	r3, #16
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	dade      	bge.n	8000522 <fsm_fire+0x10>
    }
  }
}
 8000564:	e000      	b.n	8000568 <fsm_fire+0x56>
      break;
 8000566:	bf00      	nop
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	4b71      	ldr	r3, [pc, #452]	; (8000750 <MX_GPIO_Init+0x1e0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a70      	ldr	r2, [pc, #448]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b6e      	ldr	r3, [pc, #440]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0310 	and.w	r3, r3, #16
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	4b6a      	ldr	r3, [pc, #424]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a69      	ldr	r2, [pc, #420]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b67      	ldr	r3, [pc, #412]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b63      	ldr	r3, [pc, #396]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a62      	ldr	r2, [pc, #392]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b60      	ldr	r3, [pc, #384]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b5c      	ldr	r3, [pc, #368]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a5b      	ldr	r2, [pc, #364]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b59      	ldr	r3, [pc, #356]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b55      	ldr	r3, [pc, #340]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a54      	ldr	r2, [pc, #336]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b52      	ldr	r3, [pc, #328]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b4e      	ldr	r3, [pc, #312]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a4d      	ldr	r2, [pc, #308]	; (8000750 <MX_GPIO_Init+0x1e0>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	4848      	ldr	r0, [pc, #288]	; (8000754 <MX_GPIO_Init+0x1e4>)
 8000634:	f001 fb1c 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	4846      	ldr	r0, [pc, #280]	; (8000758 <MX_GPIO_Init+0x1e8>)
 800063e:	f001 fb17 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	2200      	movs	r2, #0
 8000644:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000648:	4844      	ldr	r0, [pc, #272]	; (800075c <MX_GPIO_Init+0x1ec>)
 800064a:	f001 fb11 	bl	8001c70 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800064e:	2308      	movs	r3, #8
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	483b      	ldr	r0, [pc, #236]	; (8000754 <MX_GPIO_Init+0x1e4>)
 8000666:	f001 f94f 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800066a:	2301      	movs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4835      	ldr	r0, [pc, #212]	; (8000758 <MX_GPIO_Init+0x1e8>)
 8000682:	f001 f941 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000686:	2308      	movs	r3, #8
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000696:	2305      	movs	r3, #5
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	482d      	ldr	r0, [pc, #180]	; (8000758 <MX_GPIO_Init+0x1e8>)
 80006a2:	f001 f931 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006a6:	230e      	movs	r3, #14
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4829      	ldr	r0, [pc, #164]	; (8000760 <MX_GPIO_Init+0x1f0>)
 80006ba:	f001 f925 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006be:	2304      	movs	r3, #4
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	4824      	ldr	r0, [pc, #144]	; (8000764 <MX_GPIO_Init+0x1f4>)
 80006d2:	f001 f919 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006e8:	2305      	movs	r3, #5
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	481c      	ldr	r0, [pc, #112]	; (8000764 <MX_GPIO_Init+0x1f4>)
 80006f4:	f001 f908 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006f8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <MX_GPIO_Init+0x1ec>)
 8000712:	f001 f8f9 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000716:	2320      	movs	r3, #32
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_GPIO_Init+0x1ec>)
 800072a:	f001 f8ed 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800072e:	2302      	movs	r3, #2
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000732:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_GPIO_Init+0x1e4>)
 8000744:	f001 f8e0 	bl	8001908 <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3730      	adds	r7, #48	; 0x30
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40021000 	.word	0x40021000
 8000758:	40020800 	.word	0x40020800
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40020000 	.word	0x40020000
 8000764:	40020400 	.word	0x40020400

08000768 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_I2C1_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x58>)
 8000776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a6:	f002 fe87 	bl	80034b8 <HAL_I2C_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 fc3e 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000220 	.word	0x20000220
 80007bc:	40005400 	.word	0x40005400
 80007c0:	000186a0 	.word	0x000186a0

080007c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a19      	ldr	r2, [pc, #100]	; (8000848 <HAL_I2C_MspInit+0x84>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d12c      	bne.n	8000840 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <HAL_I2C_MspInit+0x88>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <HAL_I2C_MspInit+0x88>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_I2C_MspInit+0x88>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000802:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000808:	2312      	movs	r3, #18
 800080a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080c:	2301      	movs	r3, #1
 800080e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000814:	2304      	movs	r3, #4
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	480c      	ldr	r0, [pc, #48]	; (8000850 <HAL_I2C_MspInit+0x8c>)
 8000820:	f001 f872 	bl	8001908 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_I2C_MspInit+0x88>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <HAL_I2C_MspInit+0x88>)
 800082e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_I2C_MspInit+0x88>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40005400 	.word	0x40005400
 800084c:	40023800 	.word	0x40023800
 8000850:	40020400 	.word	0x40020400

08000854 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_I2S3_Init+0x54>)
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <MX_I2S3_Init+0x58>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000864:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2S3_Init+0x54>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000878:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_I2S3_Init+0x54>)
 800087c:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <MX_I2S3_Init+0x5c>)
 800087e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2S3_Init+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000894:	f002 ff54 	bl	8003740 <HAL_I2S_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800089e:	f000 fbc7 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000274 	.word	0x20000274
 80008ac:	40003c00 	.word	0x40003c00
 80008b0:	00017700 	.word	0x00017700

080008b4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	; 0x38
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a31      	ldr	r2, [pc, #196]	; (80009a4 <HAL_I2S_MspInit+0xf0>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d15a      	bne.n	800099a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008e4:	2301      	movs	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008e8:	23c0      	movs	r3, #192	; 0xc0
 80008ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 f847 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000900:	f000 fb96 	bl	8001030 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800090e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a18      	ldr	r2, [pc, #96]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000958:	2310      	movs	r3, #16
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000968:	2306      	movs	r3, #6
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	480e      	ldr	r0, [pc, #56]	; (80009ac <HAL_I2S_MspInit+0xf8>)
 8000974:	f000 ffc8 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000978:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098a:	2306      	movs	r3, #6
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <HAL_I2S_MspInit+0xfc>)
 8000996:	f000 ffb7 	bl	8001908 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800099a:	bf00      	nop
 800099c:	3738      	adds	r7, #56	; 0x38
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40003c00 	.word	0x40003c00
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020800 	.word	0x40020800

080009b4 <boton_presionado>:

//salidas
static uint8_t faultx, faulty, faultz;

//funciones de transicion
static int boton_presionado (fsm_t* this) { if (timer_boton)return boton; else return 0; }
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <boton_presionado+0x24>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <boton_presionado+0x16>
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <boton_presionado+0x28>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	e000      	b.n	80009cc <boton_presionado+0x18>
 80009ca:	2300      	movs	r3, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20000000 	.word	0x20000000
 80009dc:	200002bc 	.word	0x200002bc

080009e0 <boton_no_presionado>:
static int boton_no_presionado (fsm_t* this) {return !boton; }
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <boton_no_presionado+0x24>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	200002bc 	.word	0x200002bc

08000a08 <sensorx_on>:

static int sensorx_on (fsm_t* this) { return sensorx; }
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <sensorx_on+0x18>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	200002bd 	.word	0x200002bd

08000a24 <sensory_on>:
static int sensory_on (fsm_t* this) { return sensory; }
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <sensory_on+0x18>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	200002be 	.word	0x200002be

08000a40 <sensorz_on>:
static int sensorz_on (fsm_t* this) { return sensorz; }
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <sensorz_on+0x18>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	200002bf 	.word	0x200002bf

08000a5c <sensorx_off>:
static int sensorx_off (fsm_t* this) { return !sensorx; }
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <sensorx_off+0x24>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bf0c      	ite	eq
 8000a6c:	2301      	moveq	r3, #1
 8000a6e:	2300      	movne	r3, #0
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200002bd 	.word	0x200002bd

08000a84 <sensory_off>:
static int sensory_off (fsm_t* this) { return !sensory; }
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <sensory_off+0x24>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bf0c      	ite	eq
 8000a94:	2301      	moveq	r3, #1
 8000a96:	2300      	movne	r3, #0
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200002be 	.word	0x200002be

08000aac <sensorz_off>:
static int sensorz_off (fsm_t* this) { return !sensorz; }
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <sensorz_off+0x24>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf0c      	ite	eq
 8000abc:	2301      	moveq	r3, #1
 8000abe:	2300      	movne	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200002bf 	.word	0x200002bf

08000ad4 <activado_on>:

static int activado_on (fsm_t* this) { if (timer_lectura) return activado; else return 0; }
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <activado_on+0x24>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <activado_on+0x16>
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <activado_on+0x28>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	e000      	b.n	8000aec <activado_on+0x18>
 8000aea:	2300      	movs	r3, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	200002c1 	.word	0x200002c1
 8000afc:	200002c0 	.word	0x200002c0

08000b00 <activado_off>:
static int activado_off (fsm_t* this) { if (!timer_lectura || !activado) return 1; else return 0; }
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <activado_off+0x2c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <activado_off+0x18>
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <activado_off+0x30>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <activado_off+0x1c>
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e000      	b.n	8000b1e <activado_off+0x1e>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200002c1 	.word	0x200002c1
 8000b30:	200002c0 	.word	0x200002c0

08000b34 <activado_on_led>:
static int activado_on_led (fsm_t* this) { if (timer_led && activado) return 1; else return 0; }
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <activado_on_led+0x2c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d005      	beq.n	8000b50 <activado_on_led+0x1c>
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <activado_on_led+0x30>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <activado_on_led+0x1c>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <activado_on_led+0x1e>
 8000b50:	2300      	movs	r3, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200002c2 	.word	0x200002c2
 8000b64:	200002c0 	.word	0x200002c0

08000b68 <activado_off_led>:
static int activado_off_led (fsm_t* this) { if (!timer_led||!activado) return 1; else return 0; }
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <activado_off_led+0x2c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <activado_off_led+0x18>
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <activado_off_led+0x30>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <activado_off_led+0x1c>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <activado_off_led+0x1e>
 8000b84:	2300      	movs	r3, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200002c2 	.word	0x200002c2
 8000b98:	200002c0 	.word	0x200002c0

08000b9c <defecto>:

static int defecto (fsm_t* this)  {return 1;}
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <activacion>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void activacion (fsm_t* this)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  activado = 1;
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <activacion+0x1c>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200002c0 	.word	0x200002c0

08000bd4 <desactivacion>:

static void desactivacion (fsm_t* this)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  activado = 0;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <desactivacion+0x1c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200002c0 	.word	0x200002c0

08000bf4 <lectura_x>:

static void lectura_x (fsm_t* this)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  faultx = 1;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <lectura_x+0x24>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <lectura_x+0x28>)
 8000c0a:	f001 f831 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200002c8 	.word	0x200002c8
 8000c1c:	40020c00 	.word	0x40020c00

08000c20 <lectura_y>:

static void lectura_y (fsm_t* this)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  faulty = 1;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <lectura_y+0x24>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <lectura_y+0x28>)
 8000c36:	f001 f81b 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200002c9 	.word	0x200002c9
 8000c48:	40020c00 	.word	0x40020c00

08000c4c <lectura_z>:

static void lectura_z (fsm_t* this)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  faultz = 1;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <lectura_z+0x24>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <lectura_z+0x28>)
 8000c62:	f001 f805 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200002ca 	.word	0x200002ca
 8000c74:	40020c00 	.word	0x40020c00

08000c78 <lectura_x_fin>:

static void lectura_x_fin (fsm_t* this)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  faultx = 0;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <lectura_x_fin+0x24>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <lectura_x_fin+0x28>)
 8000c8e:	f000 ffef 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200002c8 	.word	0x200002c8
 8000ca0:	40020c00 	.word	0x40020c00

08000ca4 <lectura_y_fin>:

static void lectura_y_fin (fsm_t* this)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  faulty = 0;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <lectura_y_fin+0x24>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <lectura_y_fin+0x28>)
 8000cba:	f000 ffd9 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200002c9 	.word	0x200002c9
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <lectura_z_fin>:

static void lectura_z_fin (fsm_t* this)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  faultz = 0;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <lectura_z_fin+0x24>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <lectura_z_fin+0x28>)
 8000ce6:	f000 ffc3 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200002ca 	.word	0x200002ca
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <lectura_fin>:

static void lectura_fin (fsm_t* this)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  faultx = 0;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <lectura_fin+0x48>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
  faulty = 0;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <lectura_fin+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
  faultz = 0;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <lectura_fin+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <lectura_fin+0x54>)
 8000d1e:	f000 ffa7 	bl	8001c70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <lectura_fin+0x54>)
 8000d2a:	f000 ffa1 	bl	8001c70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d34:	4806      	ldr	r0, [pc, #24]	; (8000d50 <lectura_fin+0x54>)
 8000d36:	f000 ff9b 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200002c8 	.word	0x200002c8
 8000d48:	200002c9 	.word	0x200002c9
 8000d4c:	200002ca 	.word	0x200002ca
 8000d50:	40020c00 	.word	0x40020c00

08000d54 <led_activado>:

static void led_activado (fsm_t* this)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <led_activado+0x1c>)
 8000d64:	f000 ff84 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40020c00 	.word	0x40020c00

08000d74 <led_no_activado>:

static void led_no_activado (fsm_t* this)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d82:	4803      	ldr	r0, [pc, #12]	; (8000d90 <led_no_activado+0x1c>)
 8000d84:	f000 ff74 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40020c00 	.word	0x40020c00

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9a:	f000 fc0d 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9e:	f000 f893 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da2:	f7ff fbe5 	bl	8000570 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000da6:	f7ff fcdf 	bl	8000768 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000daa:	f7ff fd53 	bl	8000854 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000dae:	f000 f945 	bl	800103c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000db2:	f007 ff6b 	bl	8008c8c <MX_USB_HOST_Init>
  MX_TIM6_Init();
 8000db6:	f000 faf1 	bl	800139c <MX_TIM6_Init>
  MX_TIM10_Init();
 8000dba:	f000 fb25 	bl	8001408 <MX_TIM10_Init>
  MX_TIM2_Init();
 8000dbe:	f000 fa7d 	bl	80012bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Temporizadores
  HAL_TIM_Base_Start_IT(&htim6); //Temporizador del led azul
 8000dc2:	4833      	ldr	r0, [pc, #204]	; (8000e90 <main+0xfc>)
 8000dc4:	f003 fff8 	bl	8004db8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10); //Temporizador para hacer las lecturas
 8000dc8:	4832      	ldr	r0, [pc, #200]	; (8000e94 <main+0x100>)
 8000dca:	f003 fff5 	bl	8004db8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1); //Temporizador boton
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4831      	ldr	r0, [pc, #196]	; (8000e98 <main+0x104>)
 8000dd2:	f004 f8bb 	bl	8004f4c <HAL_TIM_IC_Start_IT>

  //Creación de las FSM
  fsm_t* fsm_inicio = fsm_new (inicio);
 8000dd6:	4831      	ldr	r0, [pc, #196]	; (8000e9c <main+0x108>)
 8000dd8:	f7ff fb78 	bl	80004cc <fsm_new>
 8000ddc:	6178      	str	r0, [r7, #20]
  fsm_t* fsm_lectura_x = fsm_new (lecturax);
 8000dde:	4830      	ldr	r0, [pc, #192]	; (8000ea0 <main+0x10c>)
 8000de0:	f7ff fb74 	bl	80004cc <fsm_new>
 8000de4:	6138      	str	r0, [r7, #16]
  fsm_t* fsm_lectura_y = fsm_new (lecturay);
 8000de6:	482f      	ldr	r0, [pc, #188]	; (8000ea4 <main+0x110>)
 8000de8:	f7ff fb70 	bl	80004cc <fsm_new>
 8000dec:	60f8      	str	r0, [r7, #12]
  fsm_t* fsm_lectura_z = fsm_new (lecturaz);
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <main+0x114>)
 8000df0:	f7ff fb6c 	bl	80004cc <fsm_new>
 8000df4:	60b8      	str	r0, [r7, #8]
  fsm_t* fsm_led_activo = fsm_new (led_activo);
 8000df6:	482d      	ldr	r0, [pc, #180]	; (8000eac <main+0x118>)
 8000df8:	f7ff fb68 	bl	80004cc <fsm_new>
 8000dfc:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000dfe:	f007 ff6b 	bl	8008cd8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    fsm_fire (fsm_inicio);
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff fb85 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_x);
 8000e08:	6938      	ldr	r0, [r7, #16]
 8000e0a:	f7ff fb82 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_y);
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff fb7f 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_lectura_z);
 8000e14:	68b8      	ldr	r0, [r7, #8]
 8000e16:	f7ff fb7c 	bl	8000512 <fsm_fire>
    fsm_fire (fsm_led_activo);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fb79 	bl	8000512 <fsm_fire>

    if (contador_tiempo_boton> tiempo_boton){
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <main+0x11c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e28:	d903      	bls.n	8000e32 <main+0x9e>
    	timer_boton=1;
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <main+0x120>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e002      	b.n	8000e38 <main+0xa4>
    }
    else
    {
    	timer_boton=0;
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <main+0x120>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
    }
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000e38:	2102      	movs	r1, #2
 8000e3a:	481f      	ldr	r0, [pc, #124]	; (8000eb8 <main+0x124>)
 8000e3c:	f000 ff00 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <main+0xba>
    	sensorx = 1;
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <main+0x128>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e002      	b.n	8000e54 <main+0xc0>
    else
    	sensorx = 0;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <main+0x128>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000e54:	2104      	movs	r1, #4
 8000e56:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <main+0x124>)
 8000e58:	f000 fef2 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <main+0xd6>
       	sensory = 1;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <main+0x12c>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e002      	b.n	8000e70 <main+0xdc>
    else
		sensory = 0;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <main+0x12c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000e70:	2108      	movs	r1, #8
 8000e72:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <main+0x124>)
 8000e74:	f000 fee4 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <main+0xf2>
       	sensorz = 1;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <main+0x130>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e7bb      	b.n	8000dfe <main+0x6a>
    else
		sensorz = 0;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <main+0x130>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000e8c:	e7b7      	b.n	8000dfe <main+0x6a>
 8000e8e:	bf00      	nop
 8000e90:	20000370 	.word	0x20000370
 8000e94:	200003b8 	.word	0x200003b8
 8000e98:	20000328 	.word	0x20000328
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	20000044 	.word	0x20000044
 8000ea4:	20000094 	.word	0x20000094
 8000ea8:	200000e4 	.word	0x200000e4
 8000eac:	20000134 	.word	0x20000134
 8000eb0:	200002c4 	.word	0x200002c4
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	200002bd 	.word	0x200002bd
 8000ec0:	200002be 	.word	0x200002be
 8000ec4:	200002bf 	.word	0x200002bf

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2230      	movs	r2, #48	; 0x30
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f008 fa1a 	bl	8009310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <SystemClock_Config+0xcc>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f46:	2307      	movs	r3, #7
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 f896 	bl	8004080 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f5a:	f000 f869 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2302      	movs	r3, #2
 8000f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000f6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2105      	movs	r1, #5
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 faf7 	bl	8004570 <HAL_RCC_ClockConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f88:	f000 f852 	bl	8001030 <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3750      	adds	r7, #80	; 0x50
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	//Comprobar que viene del timer 2
	if (htim->Instance==TIM2){
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fac:	d10e      	bne.n	8000fcc <HAL_TIM_IC_CaptureCallback+0x30>
		boton=~boton;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000fb8:	701a      	strb	r2, [r3, #0]
		contador_tiempo_boton = __HAL_TIM_GetCounter(htim);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_TIM_IC_CaptureCallback+0x40>)
 8000fc2:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SetCounter(htim,0);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	200002bc 	.word	0x200002bc
 8000fdc:	200002c4 	.word	0x200002c4

08000fe0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM6)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d105      	bne.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		timer_led=~timer_led;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ffc:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance==TIM10)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a09      	ldr	r2, [pc, #36]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d105      	bne.n	8001014 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		timer_lectura=~timer_lectura;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	43db      	mvns	r3, r3
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001012:	701a      	strb	r2, [r3, #0]
	}
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40001000 	.word	0x40001000
 8001024:	200002c2 	.word	0x200002c2
 8001028:	40014400 	.word	0x40014400
 800102c:	200002c1 	.word	0x200002c1

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	e7fe      	b.n	8001038 <Error_Handler+0x8>
	...

0800103c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_SPI1_Init+0x64>)
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <MX_SPI1_Init+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_SPI1_Init+0x64>)
 8001048:	f44f 7282 	mov.w	r2, #260	; 0x104
 800104c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_SPI1_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_SPI1_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_SPI1_Init+0x64>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_SPI1_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_SPI1_Init+0x64>)
 8001068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800106c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_SPI1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <MX_SPI1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_SPI1_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <MX_SPI1_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_SPI1_Init+0x64>)
 8001088:	220a      	movs	r2, #10
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_SPI1_Init+0x64>)
 800108e:	f003 fdbb 	bl	8004c08 <HAL_SPI_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001098:	f7ff ffca 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200002cc 	.word	0x200002cc
 80010a4:	40013000 	.word	0x40013000

080010a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_SPI_MspInit+0x84>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12b      	bne.n	8001122 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001102:	23e0      	movs	r3, #224	; 0xe0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001112:	2305      	movs	r3, #5
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_SPI_MspInit+0x8c>)
 800111e:	f000 fbf3 	bl	8001908 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40013000 	.word	0x40013000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_MspInit+0x4c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <HAL_MspInit+0x4c>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_MspInit+0x4c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_MspInit+0x4c>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001176:	2007      	movs	r0, #7
 8001178:	f000 fb84 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d4:	f000 fa42 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011e2:	f003 ffdb 	bl	800519c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200003b8 	.word	0x200003b8

080011f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <TIM2_IRQHandler+0x10>)
 80011f6:	f003 ffd1 	bl	800519c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000328 	.word	0x20000328

08001204 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <TIM6_DAC_IRQHandler+0x10>)
 800120a:	f003 ffc7 	bl	800519c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000370 	.word	0x20000370

08001218 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <OTG_FS_IRQHandler+0x10>)
 800121e:	f000 ffab 	bl	8002178 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200007e0 	.word	0x200007e0

0800122c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <_sbrk+0x5c>)
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <_sbrk+0x60>)
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <_sbrk+0x64>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <_sbrk+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	429a      	cmp	r2, r3
 800125a:	d207      	bcs.n	800126c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800125c:	f008 f81e 	bl	800929c <__errno>
 8001260:	4603      	mov	r3, r0
 8001262:	220c      	movs	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	e009      	b.n	8001280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <_sbrk+0x64>)
 800127c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20020000 	.word	0x20020000
 800128c:	00000400 	.word	0x00000400
 8001290:	20000324 	.word	0x20000324
 8001294:	20000af8 	.word	0x20000af8

08001298 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <SystemInit+0x20>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <SystemInit+0x20>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <MX_TIM2_Init+0xdc>)
 80012e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <MX_TIM2_Init+0xdc>)
 80012f0:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80012f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b28      	ldr	r3, [pc, #160]	; (8001398 <MX_TIM2_Init+0xdc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <MX_TIM2_Init+0xdc>)
 80012fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <MX_TIM2_Init+0xdc>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <MX_TIM2_Init+0xdc>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001310:	4821      	ldr	r0, [pc, #132]	; (8001398 <MX_TIM2_Init+0xdc>)
 8001312:	f003 fd02 	bl	8004d1a <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800131c:	f7ff fe88 	bl	8001030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0318 	add.w	r3, r7, #24
 800132a:	4619      	mov	r1, r3
 800132c:	481a      	ldr	r0, [pc, #104]	; (8001398 <MX_TIM2_Init+0xdc>)
 800132e:	f004 f8d9 	bl	80054e4 <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001338:	f7ff fe7a 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800133c:	4816      	ldr	r0, [pc, #88]	; (8001398 <MX_TIM2_Init+0xdc>)
 800133e:	f003 fdab 	bl	8004e98 <HAL_TIM_IC_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001348:	f7ff fe72 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4619      	mov	r1, r3
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <MX_TIM2_Init+0xdc>)
 800135c:	f004 fc32 	bl	8005bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001366:	f7ff fe63 	bl	8001030 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800136e:	2301      	movs	r3, #1
 8001370:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_TIM2_Init+0xdc>)
 8001382:	f004 f813 	bl	80053ac <HAL_TIM_IC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 800138c:	f7ff fe50 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000328 	.word	0x20000328

0800139c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a2:	463b      	mov	r3, r7
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_TIM6_Init+0x64>)
 80013ac:	4a15      	ldr	r2, [pc, #84]	; (8001404 <MX_TIM6_Init+0x68>)
 80013ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <MX_TIM6_Init+0x64>)
 80013b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_TIM6_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 41999;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_TIM6_Init+0x64>)
 80013c0:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80013c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_TIM6_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_TIM6_Init+0x64>)
 80013ce:	f003 fca4 	bl	8004d1a <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80013d8:	f7ff fe2a 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_TIM6_Init+0x64>)
 80013ea:	f004 fbeb 	bl	8005bc4 <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80013f4:	f7ff fe1c 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000370 	.word	0x20000370
 8001404:	40001000 	.word	0x40001000

08001408 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_TIM10_Init+0x40>)
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <MX_TIM10_Init+0x44>)
 8001410:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <MX_TIM10_Init+0x40>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_TIM10_Init+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 41999;
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_TIM10_Init+0x40>)
 8001420:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001424:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_TIM10_Init+0x40>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_TIM10_Init+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_TIM10_Init+0x40>)
 8001434:	f003 fc71 	bl	8004d1a <HAL_TIM_Base_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800143e:	f7ff fdf7 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200003b8 	.word	0x200003b8
 800144c:	40014400 	.word	0x40014400

08001450 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001470:	d134      	bne.n	80014dc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	4b37      	ldr	r3, [pc, #220]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a36      	ldr	r2, [pc, #216]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b34      	ldr	r3, [pc, #208]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a2f      	ldr	r2, [pc, #188]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ba:	2301      	movs	r3, #1
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	4824      	ldr	r0, [pc, #144]	; (8001558 <HAL_TIM_Base_MspInit+0x108>)
 80014c6:	f000 fa1f 	bl	8001908 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	201c      	movs	r0, #28
 80014d0:	f000 f9e3 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d4:	201c      	movs	r0, #28
 80014d6:	f000 f9fc 	bl	80018d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80014da:	e036      	b.n	800154a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM6)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <HAL_TIM_Base_MspInit+0x10c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d116      	bne.n	8001514 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a19      	ldr	r2, [pc, #100]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 80014f0:	f043 0310 	orr.w	r3, r3, #16
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2036      	movs	r0, #54	; 0x36
 8001508:	f000 f9c7 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800150c:	2036      	movs	r0, #54	; 0x36
 800150e:	f000 f9e0 	bl	80018d2 <HAL_NVIC_EnableIRQ>
}
 8001512:	e01a      	b.n	800154a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM10)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_TIM_Base_MspInit+0x110>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d115      	bne.n	800154a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_TIM_Base_MspInit+0x104>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2019      	movs	r0, #25
 8001540:	f000 f9ab 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001544:	2019      	movs	r0, #25
 8001546:	f000 f9c4 	bl	80018d2 <HAL_NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	; 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000
 800155c:	40001000 	.word	0x40001000
 8001560:	40014400 	.word	0x40014400

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001580:	4c0b      	ldr	r4, [pc, #44]	; (80015b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800158e:	f7ff fe83 	bl	8001298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001592:	f007 fe89 	bl	80092a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff fbfd 	bl	8000d94 <main>
  bx  lr    
 800159a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800159c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80015a8:	08009560 	.word	0x08009560
  ldr r2, =_sbss
 80015ac:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80015b0:	20000af4 	.word	0x20000af4

080015b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f94f 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fda4 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f967 	bl	80018ee <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f000 f92f 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000174 	.word	0x20000174
 8001654:	2000017c 	.word	0x2000017c
 8001658:	20000178 	.word	0x20000178

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2000017c 	.word	0x2000017c
 8001680:	20000400 	.word	0x20000400

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000400 	.word	0x20000400

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000017c 	.word	0x2000017c

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff8e 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff29 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff3e 	bl	800172c <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff8e 	bl	80017d8 <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff31 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e16b      	b.n	8001bfc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001924:	2201      	movs	r2, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 815a 	bne.w	8001bf6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d005      	beq.n	800195a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001956:	2b02      	cmp	r3, #2
 8001958:	d130      	bne.n	80019bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001990:	2201      	movs	r2, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 0201 	and.w	r2, r3, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d017      	beq.n	80019f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d123      	bne.n	8001a4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3208      	adds	r2, #8
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	08da      	lsrs	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	69b9      	ldr	r1, [r7, #24]
 8001a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80b4 	beq.w	8001bf6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <HAL_GPIO_Init+0x30c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a5f      	ldr	r2, [pc, #380]	; (8001c14 <HAL_GPIO_Init+0x30c>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	; (8001c14 <HAL_GPIO_Init+0x30c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aaa:	4a5b      	ldr	r2, [pc, #364]	; (8001c18 <HAL_GPIO_Init+0x310>)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_GPIO_Init+0x314>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d02b      	beq.n	8001b2e <HAL_GPIO_Init+0x226>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a51      	ldr	r2, [pc, #324]	; (8001c20 <HAL_GPIO_Init+0x318>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d025      	beq.n	8001b2a <HAL_GPIO_Init+0x222>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a50      	ldr	r2, [pc, #320]	; (8001c24 <HAL_GPIO_Init+0x31c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01f      	beq.n	8001b26 <HAL_GPIO_Init+0x21e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4f      	ldr	r2, [pc, #316]	; (8001c28 <HAL_GPIO_Init+0x320>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d019      	beq.n	8001b22 <HAL_GPIO_Init+0x21a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4e      	ldr	r2, [pc, #312]	; (8001c2c <HAL_GPIO_Init+0x324>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0x216>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4d      	ldr	r2, [pc, #308]	; (8001c30 <HAL_GPIO_Init+0x328>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00d      	beq.n	8001b1a <HAL_GPIO_Init+0x212>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4c      	ldr	r2, [pc, #304]	; (8001c34 <HAL_GPIO_Init+0x32c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <HAL_GPIO_Init+0x20e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4b      	ldr	r2, [pc, #300]	; (8001c38 <HAL_GPIO_Init+0x330>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_GPIO_Init+0x20a>
 8001b0e:	2307      	movs	r3, #7
 8001b10:	e00e      	b.n	8001b30 <HAL_GPIO_Init+0x228>
 8001b12:	2308      	movs	r3, #8
 8001b14:	e00c      	b.n	8001b30 <HAL_GPIO_Init+0x228>
 8001b16:	2306      	movs	r3, #6
 8001b18:	e00a      	b.n	8001b30 <HAL_GPIO_Init+0x228>
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	e008      	b.n	8001b30 <HAL_GPIO_Init+0x228>
 8001b1e:	2304      	movs	r3, #4
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x228>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e004      	b.n	8001b30 <HAL_GPIO_Init+0x228>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_Init+0x228>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x228>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	f002 0203 	and.w	r2, r2, #3
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	4093      	lsls	r3, r2
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b40:	4935      	ldr	r1, [pc, #212]	; (8001c18 <HAL_GPIO_Init+0x310>)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b72:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b9c:	4a27      	ldr	r2, [pc, #156]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc6:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf0:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	f67f ae90 	bls.w	8001924 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40021400 	.word	0x40021400
 8001c34:	40021800 	.word	0x40021800
 8001c38:	40021c00 	.word	0x40021c00
 8001c3c:	40013c00 	.word	0x40013c00

08001c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	041a      	lsls	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	619a      	str	r2, [r3, #24]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca4:	b08f      	sub	sp, #60	; 0x3c
 8001ca6:	af0a      	add	r7, sp, #40	; 0x28
 8001ca8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e054      	b.n	8001d5e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f007 f83a 	bl	8008d48 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 f868 	bl	8005dc8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	687e      	ldr	r6, [r7, #4]
 8001d00:	466d      	mov	r5, sp
 8001d02:	f106 0410 	add.w	r4, r6, #16
 8001d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d16:	1d33      	adds	r3, r6, #4
 8001d18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d1a:	6838      	ldr	r0, [r7, #0]
 8001d1c:	f003 ffe2 	bl	8005ce4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2101      	movs	r1, #1
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 f85f 	bl	8005dea <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	687e      	ldr	r6, [r7, #4]
 8001d34:	466d      	mov	r5, sp
 8001d36:	f106 0410 	add.w	r4, r6, #16
 8001d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d4a:	1d33      	adds	r3, r6, #4
 8001d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d4e:	6838      	ldr	r0, [r7, #0]
 8001d50:	f004 f9e8 	bl	8006124 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d66 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d66:	b590      	push	{r4, r7, lr}
 8001d68:	b089      	sub	sp, #36	; 0x24
 8001d6a:	af04      	add	r7, sp, #16
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	4608      	mov	r0, r1
 8001d70:	4611      	mov	r1, r2
 8001d72:	461a      	mov	r2, r3
 8001d74:	4603      	mov	r3, r0
 8001d76:	70fb      	strb	r3, [r7, #3]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70bb      	strb	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_HCD_HC_Init+0x28>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e076      	b.n	8001e7c <HAL_HCD_HC_Init+0x116>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	333d      	adds	r3, #61	; 0x3d
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	212c      	movs	r1, #44	; 0x2c
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	3338      	adds	r3, #56	; 0x38
 8001db6:	787a      	ldrb	r2, [r7, #1]
 8001db8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3340      	adds	r3, #64	; 0x40
 8001dc8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001dca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	212c      	movs	r1, #44	; 0x2c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3339      	adds	r3, #57	; 0x39
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	333f      	adds	r3, #63	; 0x3f
 8001dec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001df0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	78ba      	ldrb	r2, [r7, #2]
 8001df6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dfa:	b2d0      	uxtb	r0, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	333a      	adds	r3, #58	; 0x3a
 8001e08:	4602      	mov	r2, r0
 8001e0a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da09      	bge.n	8001e28 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	212c      	movs	r1, #44	; 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	333b      	adds	r3, #59	; 0x3b
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e008      	b.n	8001e3a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	212c      	movs	r1, #44	; 0x2c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	333b      	adds	r3, #59	; 0x3b
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	212c      	movs	r1, #44	; 0x2c
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	333c      	adds	r3, #60	; 0x3c
 8001e48:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e4c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	787c      	ldrb	r4, [r7, #1]
 8001e54:	78ba      	ldrb	r2, [r7, #2]
 8001e56:	78f9      	ldrb	r1, [r7, #3]
 8001e58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	4623      	mov	r3, r4
 8001e6a:	f004 fae1 	bl	8006430 <USB_HC_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd90      	pop	{r4, r7, pc}

08001e84 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_HCD_HC_Halt+0x1e>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e00f      	b.n	8001ec2 <HAL_HCD_HC_Halt+0x3e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	78fa      	ldrb	r2, [r7, #3]
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fd31 	bl	800691a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	70fb      	strb	r3, [r7, #3]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70bb      	strb	r3, [r7, #2]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	333b      	adds	r3, #59	; 0x3b
 8001ef4:	78ba      	ldrb	r2, [r7, #2]
 8001ef6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	212c      	movs	r1, #44	; 0x2c
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	333f      	adds	r3, #63	; 0x3f
 8001f06:	787a      	ldrb	r2, [r7, #1]
 8001f08:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f0a:	7c3b      	ldrb	r3, [r7, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d112      	bne.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	212c      	movs	r1, #44	; 0x2c
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3342      	adds	r3, #66	; 0x42
 8001f1e:	2203      	movs	r2, #3
 8001f20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	333d      	adds	r3, #61	; 0x3d
 8001f30:	7f3a      	ldrb	r2, [r7, #28]
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e008      	b.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	3342      	adds	r3, #66	; 0x42
 8001f44:	2202      	movs	r2, #2
 8001f46:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f48:	787b      	ldrb	r3, [r7, #1]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	f200 80c6 	bhi.w	80020dc <HAL_HCD_HC_SubmitRequest+0x210>
 8001f50:	a201      	add	r2, pc, #4	; (adr r2, 8001f58 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f56:	bf00      	nop
 8001f58:	08001f69 	.word	0x08001f69
 8001f5c:	080020c9 	.word	0x080020c9
 8001f60:	08001fcd 	.word	0x08001fcd
 8001f64:	0800204b 	.word	0x0800204b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f68:	7c3b      	ldrb	r3, [r7, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	f040 80b8 	bne.w	80020e0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001f70:	78bb      	ldrb	r3, [r7, #2]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 80b4 	bne.w	80020e0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001f78:	8b3b      	ldrh	r3, [r7, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d108      	bne.n	8001f90 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3355      	adds	r3, #85	; 0x55
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3355      	adds	r3, #85	; 0x55
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	212c      	movs	r1, #44	; 0x2c
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	3342      	adds	r3, #66	; 0x42
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fb6:	e093      	b.n	80020e0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	212c      	movs	r1, #44	; 0x2c
 8001fbe:	fb01 f303 	mul.w	r3, r1, r3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3342      	adds	r3, #66	; 0x42
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	701a      	strb	r2, [r3, #0]
      break;
 8001fca:	e089      	b.n	80020e0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001fcc:	78bb      	ldrb	r3, [r7, #2]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d11d      	bne.n	800200e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3355      	adds	r3, #85	; 0x55
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	212c      	movs	r1, #44	; 0x2c
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3342      	adds	r3, #66	; 0x42
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ff8:	e073      	b.n	80020e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	4413      	add	r3, r2
 8002006:	3342      	adds	r3, #66	; 0x42
 8002008:	2202      	movs	r2, #2
 800200a:	701a      	strb	r2, [r3, #0]
      break;
 800200c:	e069      	b.n	80020e2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	212c      	movs	r1, #44	; 0x2c
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	3354      	adds	r3, #84	; 0x54
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	3342      	adds	r3, #66	; 0x42
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
      break;
 8002034:	e055      	b.n	80020e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	212c      	movs	r1, #44	; 0x2c
 800203c:	fb01 f303 	mul.w	r3, r1, r3
 8002040:	4413      	add	r3, r2
 8002042:	3342      	adds	r3, #66	; 0x42
 8002044:	2202      	movs	r2, #2
 8002046:	701a      	strb	r2, [r3, #0]
      break;
 8002048:	e04b      	b.n	80020e2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800204a:	78bb      	ldrb	r3, [r7, #2]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11d      	bne.n	800208c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	212c      	movs	r1, #44	; 0x2c
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	3355      	adds	r3, #85	; 0x55
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	3342      	adds	r3, #66	; 0x42
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002076:	e034      	b.n	80020e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3342      	adds	r3, #66	; 0x42
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
      break;
 800208a:	e02a      	b.n	80020e2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3354      	adds	r3, #84	; 0x54
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	3342      	adds	r3, #66	; 0x42
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
      break;
 80020b2:	e016      	b.n	80020e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3342      	adds	r3, #66	; 0x42
 80020c2:	2202      	movs	r2, #2
 80020c4:	701a      	strb	r2, [r3, #0]
      break;
 80020c6:	e00c      	b.n	80020e2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3342      	adds	r3, #66	; 0x42
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
      break;
 80020da:	e002      	b.n	80020e2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80020dc:	bf00      	nop
 80020de:	e000      	b.n	80020e2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80020e0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3344      	adds	r3, #68	; 0x44
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	8b3a      	ldrh	r2, [r7, #24]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	202c      	movs	r0, #44	; 0x2c
 80020fc:	fb00 f303 	mul.w	r3, r0, r3
 8002100:	440b      	add	r3, r1
 8002102:	334c      	adds	r3, #76	; 0x4c
 8002104:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3360      	adds	r3, #96	; 0x60
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3350      	adds	r3, #80	; 0x50
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3339      	adds	r3, #57	; 0x39
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	3361      	adds	r3, #97	; 0x61
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	222c      	movs	r2, #44	; 0x2c
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	3338      	adds	r3, #56	; 0x38
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	18d1      	adds	r1, r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	f004 fa84 	bl	8006674 <USB_HC_StartXfer>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop

08002178 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f003 ff85 	bl	800609e <USB_GetMode>
 8002194:	4603      	mov	r3, r0
 8002196:	2b01      	cmp	r3, #1
 8002198:	f040 80f6 	bne.w	8002388 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 ff69 	bl	8006078 <USB_ReadInterrupts>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80ec 	beq.w	8002386 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 ff60 	bl	8006078 <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021c2:	d104      	bne.n	80021ce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 ff50 	bl	8006078 <USB_ReadInterrupts>
 80021d8:	4603      	mov	r3, r0
 80021da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021e2:	d104      	bne.n	80021ee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 ff40 	bl	8006078 <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002202:	d104      	bne.n	800220e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800220c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f003 ff30 	bl	8006078 <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b02      	cmp	r3, #2
 8002220:	d103      	bne.n	800222a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2202      	movs	r2, #2
 8002228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f003 ff22 	bl	8006078 <USB_ReadInterrupts>
 8002234:	4603      	mov	r3, r0
 8002236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800223a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800223e:	d11c      	bne.n	800227a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002248:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10f      	bne.n	800227a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800225a:	2110      	movs	r1, #16
 800225c:	6938      	ldr	r0, [r7, #16]
 800225e:	f003 fe11 	bl	8005e84 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002262:	6938      	ldr	r0, [r7, #16]
 8002264:	f003 fe42 	bl	8005eec <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f004 f818 	bl	80062a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f006 fde5 	bl	8008e44 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fefa 	bl	8006078 <USB_ReadInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800228e:	d102      	bne.n	8002296 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f001 f89e 	bl	80033d2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f003 feec 	bl	8006078 <USB_ReadInterrupts>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d106      	bne.n	80022b8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f006 fdae 	bl	8008e0c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2208      	movs	r2, #8
 80022b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f003 fedb 	bl	8006078 <USB_ReadInterrupts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b10      	cmp	r3, #16
 80022ca:	d101      	bne.n	80022d0 <HAL_HCD_IRQHandler+0x158>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_HCD_IRQHandler+0x15a>
 80022d0:	2300      	movs	r3, #0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d012      	beq.n	80022fc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0210 	bic.w	r2, r2, #16
 80022e4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 ffa1 	bl	800322e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0210 	orr.w	r2, r2, #16
 80022fa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f003 feb9 	bl	8006078 <USB_ReadInterrupts>
 8002306:	4603      	mov	r3, r0
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002310:	d13a      	bne.n	8002388 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f004 faee 	bl	80068f8 <USB_HC_ReadInterrupt>
 800231c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	e025      	b.n	8002370 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d018      	beq.n	800236a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800234a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800234e:	d106      	bne.n	800235e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4619      	mov	r1, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f8ab 	bl	80024b2 <HCD_HC_IN_IRQHandler>
 800235c:	e005      	b.n	800236a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fbf9 	bl	8002b5c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	429a      	cmp	r2, r3
 8002378:	d3d4      	bcc.n	8002324 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002382:	615a      	str	r2, [r3, #20]
 8002384:	e000      	b.n	8002388 <HAL_HCD_IRQHandler+0x210>
      return;
 8002386:	bf00      	nop
    }
  }
}
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_HCD_Start+0x16>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e013      	b.n	80023cc <HAL_HCD_Start+0x3e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 ffda 	bl	800636c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 fcf2 	bl	8005da6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_HCD_Stop+0x16>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e00d      	b.n	8002406 <HAL_HCD_Stop+0x32>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f004 fbc8 	bl	8006b8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f003 ff7c 	bl	8006318 <USB_ResetPort>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3360      	adds	r3, #96	; 0x60
 8002444:	781b      	ldrb	r3, [r3, #0]
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	3350      	adds	r3, #80	; 0x50
 800246c:	681b      	ldr	r3, [r3, #0]
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f003 ffc0 	bl	800640c <USB_GetCurrentFrame>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 ff9b 	bl	80063de <USB_GetHostSpeed>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	460b      	mov	r3, r1
 80024bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d11a      	bne.n	8002518 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ee:	461a      	mov	r2, r3
 80024f0:	2304      	movs	r3, #4
 80024f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3361      	adds	r3, #97	; 0x61
 8002502:	2206      	movs	r2, #6
 8002504:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f004 fa02 	bl	800691a <USB_HC_Halt>
 8002516:	e0af      	b.n	8002678 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252e:	d11b      	bne.n	8002568 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	461a      	mov	r2, r3
 800253e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002542:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3361      	adds	r3, #97	; 0x61
 8002552:	2207      	movs	r2, #7
 8002554:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f004 f9da 	bl	800691a <USB_HC_Halt>
 8002566:	e087      	b.n	8002678 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b20      	cmp	r3, #32
 800257c:	d109      	bne.n	8002592 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	461a      	mov	r2, r3
 800258c:	2320      	movs	r3, #32
 800258e:	6093      	str	r3, [r2, #8]
 8002590:	e072      	b.n	8002678 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d11a      	bne.n	80025de <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	461a      	mov	r2, r3
 80025b6:	2308      	movs	r3, #8
 80025b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	3361      	adds	r3, #97	; 0x61
 80025c8:	2205      	movs	r2, #5
 80025ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 f99f 	bl	800691a <USB_HC_Halt>
 80025dc:	e04c      	b.n	8002678 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f4:	d11b      	bne.n	800262e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	461a      	mov	r2, r3
 8002604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002608:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3361      	adds	r3, #97	; 0x61
 8002618:	2208      	movs	r2, #8
 800261a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f004 f977 	bl	800691a <USB_HC_Halt>
 800262c:	e024      	b.n	8002678 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002640:	2b80      	cmp	r3, #128	; 0x80
 8002642:	d119      	bne.n	8002678 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	461a      	mov	r2, r3
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3361      	adds	r3, #97	; 0x61
 8002664:	2206      	movs	r2, #6
 8002666:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f004 f951 	bl	800691a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268e:	d112      	bne.n	80026b6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f004 f93d 	bl	800691a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	461a      	mov	r2, r3
 80026ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026b4:	e24e      	b.n	8002b54 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	f040 80df 	bne.w	800288c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d019      	beq.n	800270a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	3348      	adds	r3, #72	; 0x48
 80026e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	0159      	lsls	r1, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	440b      	add	r3, r1
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026f8:	1ad2      	subs	r2, r2, r3
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	202c      	movs	r0, #44	; 0x2c
 8002700:	fb00 f303 	mul.w	r3, r0, r3
 8002704:	440b      	add	r3, r1
 8002706:	3350      	adds	r3, #80	; 0x50
 8002708:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3361      	adds	r3, #97	; 0x61
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	335c      	adds	r3, #92	; 0x5c
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	461a      	mov	r2, r3
 800273c:	2301      	movs	r3, #1
 800273e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	333f      	adds	r3, #63	; 0x3f
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	212c      	movs	r1, #44	; 0x2c
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	4413      	add	r3, r2
 8002760:	333f      	adds	r3, #63	; 0x3f
 8002762:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002764:	2b02      	cmp	r3, #2
 8002766:	d111      	bne.n	800278c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f004 f8d1 	bl	800691a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	461a      	mov	r2, r3
 8002786:	2310      	movs	r3, #16
 8002788:	6093      	str	r3, [r2, #8]
 800278a:	e03a      	b.n	8002802 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	333f      	adds	r3, #63	; 0x3f
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d009      	beq.n	80027b4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	333f      	adds	r3, #63	; 0x3f
 80027ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d126      	bne.n	8002802 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	0151      	lsls	r1, r2, #5
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	440a      	add	r2, r1
 80027ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3360      	adds	r3, #96	; 0x60
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	b2d9      	uxtb	r1, r3
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	202c      	movs	r0, #44	; 0x2c
 80027f0:	fb00 f303 	mul.w	r3, r0, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	3360      	adds	r3, #96	; 0x60
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f006 fb2f 	bl	8008e60 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d12b      	bne.n	8002862 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	3348      	adds	r3, #72	; 0x48
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	202c      	movs	r0, #44	; 0x2c
 8002820:	fb00 f202 	mul.w	r2, r0, r2
 8002824:	440a      	add	r2, r1
 8002826:	3240      	adds	r2, #64	; 0x40
 8002828:	8812      	ldrh	r2, [r2, #0]
 800282a:	fbb3 f3f2 	udiv	r3, r3, r2
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 818e 	beq.w	8002b54 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	212c      	movs	r1, #44	; 0x2c
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	4413      	add	r3, r2
 8002844:	3354      	adds	r3, #84	; 0x54
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	f083 0301 	eor.w	r3, r3, #1
 800284c:	b2d8      	uxtb	r0, r3
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3354      	adds	r3, #84	; 0x54
 800285c:	4602      	mov	r2, r0
 800285e:	701a      	strb	r2, [r3, #0]
}
 8002860:	e178      	b.n	8002b54 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3354      	adds	r3, #84	; 0x54
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	f083 0301 	eor.w	r3, r3, #1
 8002876:	b2d8      	uxtb	r0, r3
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3354      	adds	r3, #84	; 0x54
 8002886:	4602      	mov	r2, r0
 8002888:	701a      	strb	r2, [r3, #0]
}
 800288a:	e163      	b.n	8002b54 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	f040 80f6 	bne.w	8002a90 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3361      	adds	r3, #97	; 0x61
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d109      	bne.n	80028cc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3360      	adds	r3, #96	; 0x60
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e0c9      	b.n	8002a60 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3361      	adds	r3, #97	; 0x61
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d109      	bne.n	80028f4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3360      	adds	r3, #96	; 0x60
 80028ee:	2205      	movs	r2, #5
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e0b5      	b.n	8002a60 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3361      	adds	r3, #97	; 0x61
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b06      	cmp	r3, #6
 8002906:	d009      	beq.n	800291c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3361      	adds	r3, #97	; 0x61
 8002916:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002918:	2b08      	cmp	r3, #8
 800291a:	d150      	bne.n	80029be <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	335c      	adds	r3, #92	; 0x5c
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	202c      	movs	r0, #44	; 0x2c
 8002934:	fb00 f303 	mul.w	r3, r0, r3
 8002938:	440b      	add	r3, r1
 800293a:	335c      	adds	r3, #92	; 0x5c
 800293c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	335c      	adds	r3, #92	; 0x5c
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d912      	bls.n	8002978 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	335c      	adds	r3, #92	; 0x5c
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3360      	adds	r3, #96	; 0x60
 8002972:	2204      	movs	r2, #4
 8002974:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002976:	e073      	b.n	8002a60 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3360      	adds	r3, #96	; 0x60
 8002986:	2202      	movs	r2, #2
 8002988:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029a0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029a8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029bc:	e050      	b.n	8002a60 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3361      	adds	r3, #97	; 0x61
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d122      	bne.n	8002a18 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	3360      	adds	r3, #96	; 0x60
 80029e0:	2202      	movs	r2, #2
 80029e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a02:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e023      	b.n	8002a60 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3361      	adds	r3, #97	; 0x61
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b07      	cmp	r3, #7
 8002a2a:	d119      	bne.n	8002a60 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	335c      	adds	r3, #92	; 0x5c
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	202c      	movs	r0, #44	; 0x2c
 8002a44:	fb00 f303 	mul.w	r3, r0, r3
 8002a48:	440b      	add	r3, r1
 8002a4a:	335c      	adds	r3, #92	; 0x5c
 8002a4c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3360      	adds	r3, #96	; 0x60
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2302      	movs	r3, #2
 8002a70:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	b2d9      	uxtb	r1, r3
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	202c      	movs	r0, #44	; 0x2c
 8002a7c:	fb00 f303 	mul.w	r3, r0, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	3360      	adds	r3, #96	; 0x60
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f006 f9e9 	bl	8008e60 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a8e:	e061      	b.n	8002b54 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d156      	bne.n	8002b54 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	333f      	adds	r3, #63	; 0x3f
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d111      	bne.n	8002ade <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	335c      	adds	r3, #92	; 0x5c
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 ff1f 	bl	800691a <USB_HC_Halt>
 8002adc:	e031      	b.n	8002b42 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	333f      	adds	r3, #63	; 0x3f
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	333f      	adds	r3, #63	; 0x3f
 8002b00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d11d      	bne.n	8002b42 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	335c      	adds	r3, #92	; 0x5c
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d110      	bne.n	8002b42 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3361      	adds	r3, #97	; 0x61
 8002b2e:	2203      	movs	r2, #3
 8002b30:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 feec 	bl	800691a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2310      	movs	r3, #16
 8002b52:	6093      	str	r3, [r2, #8]
}
 8002b54:	bf00      	nop
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d11a      	bne.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3361      	adds	r3, #97	; 0x61
 8002bac:	2206      	movs	r2, #6
 8002bae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 fead 	bl	800691a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002bc0:	e331      	b.n	8003226 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d12e      	bne.n	8002c36 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	461a      	mov	r2, r3
 8002be6:	2320      	movs	r3, #32
 8002be8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	333d      	adds	r3, #61	; 0x3d
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	f040 8313 	bne.w	8003226 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	333d      	adds	r3, #61	; 0x3d
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3360      	adds	r3, #96	; 0x60
 8002c20:	2202      	movs	r2, #2
 8002c22:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 fe73 	bl	800691a <USB_HC_Halt>
}
 8002c34:	e2f7      	b.n	8003226 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c4c:	d112      	bne.n	8002c74 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c60:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 fe54 	bl	800691a <USB_HC_Halt>
}
 8002c72:	e2d8      	b.n	8003226 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d140      	bne.n	8002d0c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	335c      	adds	r3, #92	; 0x5c
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d111      	bne.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	333d      	adds	r3, #61	; 0x3d
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2340      	movs	r3, #64	; 0x40
 8002cd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3361      	adds	r3, #97	; 0x61
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 fe08 	bl	800691a <USB_HC_Halt>
}
 8002d0a:	e28c      	b.n	8003226 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d12c      	bne.n	8002d7c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3361      	adds	r3, #97	; 0x61
 8002d30:	2204      	movs	r2, #4
 8002d32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	333d      	adds	r3, #61	; 0x3d
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	335c      	adds	r3, #92	; 0x5c
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f003 fdd9 	bl	800691a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	461a      	mov	r2, r3
 8002d76:	2340      	movs	r3, #64	; 0x40
 8002d78:	6093      	str	r3, [r2, #8]
}
 8002d7a:	e254      	b.n	8003226 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d11a      	bne.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2308      	movs	r3, #8
 8002da2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	3361      	adds	r3, #97	; 0x61
 8002db2:	2205      	movs	r2, #5
 8002db4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f003 fdaa 	bl	800691a <USB_HC_Halt>
}
 8002dc6:	e22e      	b.n	8003226 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d140      	bne.n	8002e60 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	335c      	adds	r3, #92	; 0x5c
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3361      	adds	r3, #97	; 0x61
 8002dfe:	2203      	movs	r2, #3
 8002e00:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	333d      	adds	r3, #61	; 0x3d
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d112      	bne.n	8002e3c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	333c      	adds	r3, #60	; 0x3c
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	333d      	adds	r3, #61	; 0x3d
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 fd67 	bl	800691a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	6093      	str	r3, [r2, #8]
}
 8002e5e:	e1e2      	b.n	8003226 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e72:	2b80      	cmp	r3, #128	; 0x80
 8002e74:	d164      	bne.n	8002f40 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d111      	bne.n	8002ea2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3361      	adds	r3, #97	; 0x61
 8002e8c:	2206      	movs	r2, #6
 8002e8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 fd3d 	bl	800691a <USB_HC_Halt>
 8002ea0:	e044      	b.n	8002f2c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	335c      	adds	r3, #92	; 0x5c
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	202c      	movs	r0, #44	; 0x2c
 8002eba:	fb00 f303 	mul.w	r3, r0, r3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	335c      	adds	r3, #92	; 0x5c
 8002ec2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	335c      	adds	r3, #92	; 0x5c
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d920      	bls.n	8002f1a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	335c      	adds	r3, #92	; 0x5c
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	212c      	movs	r1, #44	; 0x2c
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3360      	adds	r3, #96	; 0x60
 8002ef8:	2204      	movs	r2, #4
 8002efa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	b2d9      	uxtb	r1, r3
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	202c      	movs	r0, #44	; 0x2c
 8002f06:	fb00 f303 	mul.w	r3, r0, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3360      	adds	r3, #96	; 0x60
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f005 ffa4 	bl	8008e60 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f18:	e008      	b.n	8002f2c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	3360      	adds	r3, #96	; 0x60
 8002f28:	2202      	movs	r2, #2
 8002f2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	6093      	str	r3, [r2, #8]
}
 8002f3e:	e172      	b.n	8003226 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d11b      	bne.n	8002f90 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3361      	adds	r3, #97	; 0x61
 8002f66:	2208      	movs	r2, #8
 8002f68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 fcd0 	bl	800691a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	461a      	mov	r2, r3
 8002f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f8c:	6093      	str	r3, [r2, #8]
}
 8002f8e:	e14a      	b.n	8003226 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	f040 813f 	bne.w	8003226 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3361      	adds	r3, #97	; 0x61
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d17d      	bne.n	80030b8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3360      	adds	r3, #96	; 0x60
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	212c      	movs	r1, #44	; 0x2c
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	333f      	adds	r3, #63	; 0x3f
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d00a      	beq.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	212c      	movs	r1, #44	; 0x2c
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	333f      	adds	r3, #63	; 0x3f
 8002ff0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	f040 8100 	bne.w	80031f8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d113      	bne.n	8003028 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3355      	adds	r3, #85	; 0x55
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	f083 0301 	eor.w	r3, r3, #1
 8003014:	b2d8      	uxtb	r0, r3
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3355      	adds	r3, #85	; 0x55
 8003024:	4602      	mov	r2, r0
 8003026:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b01      	cmp	r3, #1
 800302e:	f040 80e3 	bne.w	80031f8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	334c      	adds	r3, #76	; 0x4c
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80d8 	beq.w	80031f8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	334c      	adds	r3, #76	; 0x4c
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	202c      	movs	r0, #44	; 0x2c
 800305e:	fb00 f202 	mul.w	r2, r0, r2
 8003062:	440a      	add	r2, r1
 8003064:	3240      	adds	r2, #64	; 0x40
 8003066:	8812      	ldrh	r2, [r2, #0]
 8003068:	4413      	add	r3, r2
 800306a:	3b01      	subs	r3, #1
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	202c      	movs	r0, #44	; 0x2c
 8003072:	fb00 f202 	mul.w	r2, r0, r2
 8003076:	440a      	add	r2, r1
 8003078:	3240      	adds	r2, #64	; 0x40
 800307a:	8812      	ldrh	r2, [r2, #0]
 800307c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80b5 	beq.w	80031f8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	3355      	adds	r3, #85	; 0x55
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	f083 0301 	eor.w	r3, r3, #1
 80030a2:	b2d8      	uxtb	r0, r3
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3355      	adds	r3, #85	; 0x55
 80030b2:	4602      	mov	r2, r0
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e09f      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3361      	adds	r3, #97	; 0x61
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d109      	bne.n	80030e0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3360      	adds	r3, #96	; 0x60
 80030da:	2202      	movs	r2, #2
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e08b      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3361      	adds	r3, #97	; 0x61
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d109      	bne.n	8003108 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3360      	adds	r3, #96	; 0x60
 8003102:	2202      	movs	r2, #2
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	e077      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3361      	adds	r3, #97	; 0x61
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b05      	cmp	r3, #5
 800311a:	d109      	bne.n	8003130 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3360      	adds	r3, #96	; 0x60
 800312a:	2205      	movs	r2, #5
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e063      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	212c      	movs	r1, #44	; 0x2c
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4413      	add	r3, r2
 800313c:	3361      	adds	r3, #97	; 0x61
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b06      	cmp	r3, #6
 8003142:	d009      	beq.n	8003158 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	3361      	adds	r3, #97	; 0x61
 8003152:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003154:	2b08      	cmp	r3, #8
 8003156:	d14f      	bne.n	80031f8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	335c      	adds	r3, #92	; 0x5c
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	202c      	movs	r0, #44	; 0x2c
 8003170:	fb00 f303 	mul.w	r3, r0, r3
 8003174:	440b      	add	r3, r1
 8003176:	335c      	adds	r3, #92	; 0x5c
 8003178:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	335c      	adds	r3, #92	; 0x5c
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d912      	bls.n	80031b4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	212c      	movs	r1, #44	; 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	335c      	adds	r3, #92	; 0x5c
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3360      	adds	r3, #96	; 0x60
 80031ae:	2204      	movs	r2, #4
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e021      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3360      	adds	r3, #96	; 0x60
 80031c2:	2202      	movs	r2, #2
 80031c4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031dc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031e4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f2:	461a      	mov	r2, r3
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	461a      	mov	r2, r3
 8003206:	2302      	movs	r3, #2
 8003208:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	b2d9      	uxtb	r1, r3
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	202c      	movs	r0, #44	; 0x2c
 8003214:	fb00 f303 	mul.w	r3, r0, r3
 8003218:	4413      	add	r3, r2
 800321a:	3360      	adds	r3, #96	; 0x60
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f005 fe1d 	bl	8008e60 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003226:	bf00      	nop
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b08a      	sub	sp, #40	; 0x28
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	0c5b      	lsrs	r3, r3, #17
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003262:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d004      	beq.n	8003274 <HCD_RXQLVL_IRQHandler+0x46>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b05      	cmp	r3, #5
 800326e:	f000 80a9 	beq.w	80033c4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003272:	e0aa      	b.n	80033ca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80a6 	beq.w	80033c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3344      	adds	r3, #68	; 0x44
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 809b 	beq.w	80033c8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	3350      	adds	r3, #80	; 0x50
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	441a      	add	r2, r3
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	202c      	movs	r0, #44	; 0x2c
 80032ac:	fb00 f303 	mul.w	r3, r0, r3
 80032b0:	440b      	add	r3, r1
 80032b2:	334c      	adds	r3, #76	; 0x4c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d87a      	bhi.n	80033b0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3344      	adds	r3, #68	; 0x44
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	b292      	uxth	r2, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	f002 fe78 	bl	8005fc8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3344      	adds	r3, #68	; 0x44
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	441a      	add	r2, r3
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	202c      	movs	r0, #44	; 0x2c
 80032f2:	fb00 f303 	mul.w	r3, r0, r3
 80032f6:	440b      	add	r3, r1
 80032f8:	3344      	adds	r3, #68	; 0x44
 80032fa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3350      	adds	r3, #80	; 0x50
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	441a      	add	r2, r3
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	202c      	movs	r0, #44	; 0x2c
 8003316:	fb00 f303 	mul.w	r3, r0, r3
 800331a:	440b      	add	r3, r1
 800331c:	3350      	adds	r3, #80	; 0x50
 800331e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	0cdb      	lsrs	r3, r3, #19
 8003330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003334:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3340      	adds	r3, #64	; 0x40
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4293      	cmp	r3, r2
 800334c:	d13c      	bne.n	80033c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d039      	beq.n	80033c8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800336a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003372:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	461a      	mov	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	3354      	adds	r3, #84	; 0x54
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	f083 0301 	eor.w	r3, r3, #1
 800339a:	b2d8      	uxtb	r0, r3
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3354      	adds	r3, #84	; 0x54
 80033aa:	4602      	mov	r2, r0
 80033ac:	701a      	strb	r2, [r3, #0]
      break;
 80033ae:	e00b      	b.n	80033c8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3360      	adds	r3, #96	; 0x60
 80033be:	2204      	movs	r2, #4
 80033c0:	701a      	strb	r2, [r3, #0]
      break;
 80033c2:	e001      	b.n	80033c8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80033c4:	bf00      	nop
 80033c6:	e000      	b.n	80033ca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80033c8:	bf00      	nop
  }
}
 80033ca:	bf00      	nop
 80033cc:	3728      	adds	r7, #40	; 0x28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033fe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b02      	cmp	r3, #2
 8003408:	d10b      	bne.n	8003422 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d102      	bne.n	800341a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f005 fd07 	bl	8008e28 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b08      	cmp	r3, #8
 800342a:	d132      	bne.n	8003492 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f043 0308 	orr.w	r3, r3, #8
 8003432:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b04      	cmp	r3, #4
 800343c:	d126      	bne.n	800348c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d113      	bne.n	800346e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800344c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003450:	d106      	bne.n	8003460 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2102      	movs	r1, #2
 8003458:	4618      	mov	r0, r3
 800345a:	f002 ff23 	bl	80062a4 <USB_InitFSLSPClkSel>
 800345e:	e011      	b.n	8003484 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f002 ff1c 	bl	80062a4 <USB_InitFSLSPClkSel>
 800346c:	e00a      	b.n	8003484 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d106      	bne.n	8003484 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800347c:	461a      	mov	r2, r3
 800347e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003482:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f005 fcf9 	bl	8008e7c <HAL_HCD_PortEnabled_Callback>
 800348a:	e002      	b.n	8003492 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f005 fd03 	bl	8008e98 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b20      	cmp	r3, #32
 800349a:	d103      	bne.n	80034a4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f043 0320 	orr.w	r3, r3, #32
 80034a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034aa:	461a      	mov	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6013      	str	r3, [r2, #0]
}
 80034b0:	bf00      	nop
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e12b      	b.n	8003722 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd f970 	bl	80007c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800350a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800351a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800351c:	f001 fa20 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8003520:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a81      	ldr	r2, [pc, #516]	; (800372c <HAL_I2C_Init+0x274>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d807      	bhi.n	800353c <HAL_I2C_Init+0x84>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a80      	ldr	r2, [pc, #512]	; (8003730 <HAL_I2C_Init+0x278>)
 8003530:	4293      	cmp	r3, r2
 8003532:	bf94      	ite	ls
 8003534:	2301      	movls	r3, #1
 8003536:	2300      	movhi	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e006      	b.n	800354a <HAL_I2C_Init+0x92>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a7d      	ldr	r2, [pc, #500]	; (8003734 <HAL_I2C_Init+0x27c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	bf94      	ite	ls
 8003544:	2301      	movls	r3, #1
 8003546:	2300      	movhi	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0e7      	b.n	8003722 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a78      	ldr	r2, [pc, #480]	; (8003738 <HAL_I2C_Init+0x280>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	0c9b      	lsrs	r3, r3, #18
 800355c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a6a      	ldr	r2, [pc, #424]	; (800372c <HAL_I2C_Init+0x274>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d802      	bhi.n	800358c <HAL_I2C_Init+0xd4>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	3301      	adds	r3, #1
 800358a:	e009      	b.n	80035a0 <HAL_I2C_Init+0xe8>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	4a69      	ldr	r2, [pc, #420]	; (800373c <HAL_I2C_Init+0x284>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	3301      	adds	r3, #1
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	495c      	ldr	r1, [pc, #368]	; (800372c <HAL_I2C_Init+0x274>)
 80035bc:	428b      	cmp	r3, r1
 80035be:	d819      	bhi.n	80035f4 <HAL_I2C_Init+0x13c>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e59      	subs	r1, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ce:	1c59      	adds	r1, r3, #1
 80035d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035d4:	400b      	ands	r3, r1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_I2C_Init+0x138>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1e59      	subs	r1, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ee:	e051      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 80035f0:	2304      	movs	r3, #4
 80035f2:	e04f      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d111      	bne.n	8003620 <HAL_I2C_Init+0x168>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1e58      	subs	r0, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	440b      	add	r3, r1
 800360a:	fbb0 f3f3 	udiv	r3, r0, r3
 800360e:	3301      	adds	r3, #1
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e012      	b.n	8003646 <HAL_I2C_Init+0x18e>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	0099      	lsls	r1, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Init+0x196>
 800364a:	2301      	movs	r3, #1
 800364c:	e022      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10e      	bne.n	8003674 <HAL_I2C_Init+0x1bc>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1e58      	subs	r0, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	440b      	add	r3, r1
 8003664:	fbb0 f3f3 	udiv	r3, r0, r3
 8003668:	3301      	adds	r3, #1
 800366a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003672:	e00f      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1e58      	subs	r0, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	0099      	lsls	r1, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	fbb0 f3f3 	udiv	r3, r0, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	6809      	ldr	r1, [r1, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6911      	ldr	r1, [r2, #16]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68d2      	ldr	r2, [r2, #12]
 80036ce:	4311      	orrs	r1, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	000186a0 	.word	0x000186a0
 8003730:	001e847f 	.word	0x001e847f
 8003734:	003d08ff 	.word	0x003d08ff
 8003738:	431bde83 	.word	0x431bde83
 800373c:	10624dd3 	.word	0x10624dd3

08003740 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e128      	b.n	80039a4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a90      	ldr	r2, [pc, #576]	; (80039ac <HAL_I2S_Init+0x26c>)
 800376a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fd f8a1 	bl	80008b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003788:	f023 030f 	bic.w	r3, r3, #15
 800378c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2202      	movs	r2, #2
 8003794:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d060      	beq.n	8003860 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d102      	bne.n	80037ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037a6:	2310      	movs	r3, #16
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e001      	b.n	80037b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80037ac:	2320      	movs	r3, #32
 80037ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d802      	bhi.n	80037be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037be:	2001      	movs	r0, #1
 80037c0:	f001 f9c4 	bl	8004b4c <HAL_RCCEx_GetPeriphCLKFreq>
 80037c4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ce:	d125      	bne.n	800381c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d010      	beq.n	80037fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	461a      	mov	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	3305      	adds	r3, #5
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	e01f      	b.n	800383a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	fbb2 f2f3 	udiv	r2, r2, r3
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	461a      	mov	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	3305      	adds	r3, #5
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	e00e      	b.n	800383a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	fbb2 f2f3 	udiv	r2, r2, r3
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	461a      	mov	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	3305      	adds	r3, #5
 8003838:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4a5c      	ldr	r2, [pc, #368]	; (80039b0 <HAL_I2S_Init+0x270>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	08db      	lsrs	r3, r3, #3
 8003844:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	e003      	b.n	8003868 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003860:	2302      	movs	r3, #2
 8003862:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d902      	bls.n	8003874 <HAL_I2S_Init+0x134>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2bff      	cmp	r3, #255	; 0xff
 8003872:	d907      	bls.n	8003884 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	f043 0210 	orr.w	r2, r3, #16
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e08f      	b.n	80039a4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	ea42 0103 	orr.w	r1, r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	430a      	orrs	r2, r1
 8003896:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038a2:	f023 030f 	bic.w	r3, r3, #15
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6851      	ldr	r1, [r2, #4]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6892      	ldr	r2, [r2, #8]
 80038ae:	4311      	orrs	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	68d2      	ldr	r2, [r2, #12]
 80038b4:	4311      	orrs	r1, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6992      	ldr	r2, [r2, #24]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038c6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d161      	bne.n	8003994 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a38      	ldr	r2, [pc, #224]	; (80039b4 <HAL_I2S_Init+0x274>)
 80038d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a37      	ldr	r2, [pc, #220]	; (80039b8 <HAL_I2S_Init+0x278>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d101      	bne.n	80038e4 <HAL_I2S_Init+0x1a4>
 80038e0:	4b36      	ldr	r3, [pc, #216]	; (80039bc <HAL_I2S_Init+0x27c>)
 80038e2:	e001      	b.n	80038e8 <HAL_I2S_Init+0x1a8>
 80038e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	4932      	ldr	r1, [pc, #200]	; (80039b8 <HAL_I2S_Init+0x278>)
 80038f0:	428a      	cmp	r2, r1
 80038f2:	d101      	bne.n	80038f8 <HAL_I2S_Init+0x1b8>
 80038f4:	4a31      	ldr	r2, [pc, #196]	; (80039bc <HAL_I2S_Init+0x27c>)
 80038f6:	e001      	b.n	80038fc <HAL_I2S_Init+0x1bc>
 80038f8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80038fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003900:	f023 030f 	bic.w	r3, r3, #15
 8003904:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a2b      	ldr	r2, [pc, #172]	; (80039b8 <HAL_I2S_Init+0x278>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d101      	bne.n	8003914 <HAL_I2S_Init+0x1d4>
 8003910:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <HAL_I2S_Init+0x27c>)
 8003912:	e001      	b.n	8003918 <HAL_I2S_Init+0x1d8>
 8003914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003918:	2202      	movs	r2, #2
 800391a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a25      	ldr	r2, [pc, #148]	; (80039b8 <HAL_I2S_Init+0x278>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <HAL_I2S_Init+0x1ea>
 8003926:	4b25      	ldr	r3, [pc, #148]	; (80039bc <HAL_I2S_Init+0x27c>)
 8003928:	e001      	b.n	800392e <HAL_I2S_Init+0x1ee>
 800392a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393a:	d003      	beq.n	8003944 <HAL_I2S_Init+0x204>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d103      	bne.n	800394c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e001      	b.n	8003950 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800395a:	4313      	orrs	r3, r2
 800395c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003964:	4313      	orrs	r3, r2
 8003966:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800396e:	4313      	orrs	r3, r2
 8003970:	b29a      	uxth	r2, r3
 8003972:	897b      	ldrh	r3, [r7, #10]
 8003974:	4313      	orrs	r3, r2
 8003976:	b29b      	uxth	r3, r3
 8003978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800397c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a0d      	ldr	r2, [pc, #52]	; (80039b8 <HAL_I2S_Init+0x278>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d101      	bne.n	800398c <HAL_I2S_Init+0x24c>
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_I2S_Init+0x27c>)
 800398a:	e001      	b.n	8003990 <HAL_I2S_Init+0x250>
 800398c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003990:	897a      	ldrh	r2, [r7, #10]
 8003992:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3720      	adds	r7, #32
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	08003ab7 	.word	0x08003ab7
 80039b0:	cccccccd 	.word	0xcccccccd
 80039b4:	08003bcd 	.word	0x08003bcd
 80039b8:	40003800 	.word	0x40003800
 80039bc:	40003400 	.word	0x40003400

080039c0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c9a      	adds	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10e      	bne.n	8003a50 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a40:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ffb8 	bl	80039c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	b292      	uxth	r2, r2
 8003a6c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	1c9a      	adds	r2, r3, #2
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10e      	bne.n	8003aae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a9e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ff93 	bl	80039d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d13a      	bne.n	8003b48 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d109      	bne.n	8003af0 <I2S_IRQHandler+0x3a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	d102      	bne.n	8003af0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff ffb4 	bl	8003a58 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d126      	bne.n	8003b48 <I2S_IRQHandler+0x92>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d11f      	bne.n	8003b48 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f043 0202 	orr.w	r2, r3, #2
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff ff50 	bl	80039e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d136      	bne.n	8003bc2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d109      	bne.n	8003b72 <I2S_IRQHandler+0xbc>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b68:	2b80      	cmp	r3, #128	; 0x80
 8003b6a:	d102      	bne.n	8003b72 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff45 	bl	80039fc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d122      	bne.n	8003bc2 <I2S_IRQHandler+0x10c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d11b      	bne.n	8003bc2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b98:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff13 	bl	80039e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a92      	ldr	r2, [pc, #584]	; (8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003be6:	4b92      	ldr	r3, [pc, #584]	; (8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003be8:	e001      	b.n	8003bee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003bea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a8b      	ldr	r2, [pc, #556]	; (8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c04:	4b8a      	ldr	r3, [pc, #552]	; (8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c06:	e001      	b.n	8003c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c18:	d004      	beq.n	8003c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f040 8099 	bne.w	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d107      	bne.n	8003c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f925 	bl	8003e88 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9c8 	bl	8003fe8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d13a      	bne.n	8003cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d035      	beq.n	8003cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a6e      	ldr	r2, [pc, #440]	; (8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c76:	4b6e      	ldr	r3, [pc, #440]	; (8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c78:	e001      	b.n	8003c7e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4969      	ldr	r1, [pc, #420]	; (8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c86:	428b      	cmp	r3, r1
 8003c88:	d101      	bne.n	8003c8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c8a:	4b69      	ldr	r3, [pc, #420]	; (8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c8c:	e001      	b.n	8003c92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c96:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ca6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff fe88 	bl	80039e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	f040 80c3 	bne.w	8003e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80bd 	beq.w	8003e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cfe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a49      	ldr	r2, [pc, #292]	; (8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d101      	bne.n	8003d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d0a:	4b49      	ldr	r3, [pc, #292]	; (8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d0c:	e001      	b.n	8003d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4944      	ldr	r1, [pc, #272]	; (8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d1a:	428b      	cmp	r3, r1
 8003d1c:	d101      	bne.n	8003d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d1e:	4b44      	ldr	r3, [pc, #272]	; (8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d20:	e001      	b.n	8003d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d2a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f043 0204 	orr.w	r2, r3, #4
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fe4a 	bl	80039e8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d54:	e089      	b.n	8003e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d107      	bne.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f8be 	bl	8003eec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d107      	bne.n	8003d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f8fd 	bl	8003f84 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d12f      	bne.n	8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d02a      	beq.n	8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dba:	e001      	b.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4919      	ldr	r1, [pc, #100]	; (8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dc8:	428b      	cmp	r3, r1
 8003dca:	d101      	bne.n	8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003dcc:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dce:	e001      	b.n	8003dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f043 0202 	orr.w	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff fdfa 	bl	80039e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d136      	bne.n	8003e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d031      	beq.n	8003e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e14:	e001      	b.n	8003e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4902      	ldr	r1, [pc, #8]	; (8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e22:	428b      	cmp	r3, r1
 8003e24:	d106      	bne.n	8003e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003e26:	4b02      	ldr	r3, [pc, #8]	; (8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e28:	e006      	b.n	8003e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003e2a:	bf00      	nop
 8003e2c:	40003800 	.word	0x40003800
 8003e30:	40003400 	.word	0x40003400
 8003e34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e3c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	f043 0204 	orr.w	r2, r3, #4
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff fdc0 	bl	80039e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e68:	e000      	b.n	8003e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e6a:	bf00      	nop
}
 8003e6c:	bf00      	nop
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c99      	adds	r1, r3, #2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6251      	str	r1, [r2, #36]	; 0x24
 8003e9a:	881a      	ldrh	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d113      	bne.n	8003ee2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ec8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d106      	bne.n	8003ee2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ffc9 	bl	8003e74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c99      	adds	r1, r3, #2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6251      	str	r1, [r2, #36]	; 0x24
 8003efe:	8819      	ldrh	r1, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <I2SEx_TxISR_I2SExt+0x90>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d101      	bne.n	8003f0e <I2SEx_TxISR_I2SExt+0x22>
 8003f0a:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <I2SEx_TxISR_I2SExt+0x94>)
 8003f0c:	e001      	b.n	8003f12 <I2SEx_TxISR_I2SExt+0x26>
 8003f0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f12:	460a      	mov	r2, r1
 8003f14:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d121      	bne.n	8003f72 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <I2SEx_TxISR_I2SExt+0x90>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d101      	bne.n	8003f3c <I2SEx_TxISR_I2SExt+0x50>
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <I2SEx_TxISR_I2SExt+0x94>)
 8003f3a:	e001      	b.n	8003f40 <I2SEx_TxISR_I2SExt+0x54>
 8003f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	490d      	ldr	r1, [pc, #52]	; (8003f7c <I2SEx_TxISR_I2SExt+0x90>)
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	d101      	bne.n	8003f50 <I2SEx_TxISR_I2SExt+0x64>
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <I2SEx_TxISR_I2SExt+0x94>)
 8003f4e:	e001      	b.n	8003f54 <I2SEx_TxISR_I2SExt+0x68>
 8003f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f58:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ff81 	bl	8003e74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40003800 	.word	0x40003800
 8003f80:	40003400 	.word	0x40003400

08003f84 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68d8      	ldr	r0, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	1c99      	adds	r1, r3, #2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f9c:	b282      	uxth	r2, r0
 8003f9e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d113      	bne.n	8003fe0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fc6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff ff4a 	bl	8003e74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a20      	ldr	r2, [pc, #128]	; (8004078 <I2SEx_RxISR_I2SExt+0x90>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <I2SEx_RxISR_I2SExt+0x16>
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <I2SEx_RxISR_I2SExt+0x94>)
 8003ffc:	e001      	b.n	8004002 <I2SEx_RxISR_I2SExt+0x1a>
 8003ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004002:	68d8      	ldr	r0, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	1c99      	adds	r1, r3, #2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800400e:	b282      	uxth	r2, r0
 8004010:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d121      	bne.n	800406e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <I2SEx_RxISR_I2SExt+0x90>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <I2SEx_RxISR_I2SExt+0x50>
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <I2SEx_RxISR_I2SExt+0x94>)
 8004036:	e001      	b.n	800403c <I2SEx_RxISR_I2SExt+0x54>
 8004038:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	490d      	ldr	r1, [pc, #52]	; (8004078 <I2SEx_RxISR_I2SExt+0x90>)
 8004044:	428b      	cmp	r3, r1
 8004046:	d101      	bne.n	800404c <I2SEx_RxISR_I2SExt+0x64>
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <I2SEx_RxISR_I2SExt+0x94>)
 800404a:	e001      	b.n	8004050 <I2SEx_RxISR_I2SExt+0x68>
 800404c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004050:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004054:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ff03 	bl	8003e74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40003800 	.word	0x40003800
 800407c:	40003400 	.word	0x40003400

08004080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e267      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d075      	beq.n	800418a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409e:	4b88      	ldr	r3, [pc, #544]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d00c      	beq.n	80040c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040aa:	4b85      	ldr	r3, [pc, #532]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d112      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b6:	4b82      	ldr	r3, [pc, #520]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c2:	d10b      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4b7e      	ldr	r3, [pc, #504]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d05b      	beq.n	8004188 <HAL_RCC_OscConfig+0x108>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d157      	bne.n	8004188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e242      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x74>
 80040e6:	4b76      	ldr	r3, [pc, #472]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a75      	ldr	r2, [pc, #468]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e01d      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x98>
 80040fe:	4b70      	ldr	r3, [pc, #448]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6f      	ldr	r2, [pc, #444]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b6d      	ldr	r3, [pc, #436]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6c      	ldr	r2, [pc, #432]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 8004118:	4b69      	ldr	r3, [pc, #420]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a68      	ldr	r2, [pc, #416]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b66      	ldr	r3, [pc, #408]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a65      	ldr	r2, [pc, #404]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fd faa4 	bl	8001684 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004140:	f7fd faa0 	bl	8001684 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e207      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b5b      	ldr	r3, [pc, #364]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0xc0>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fd fa90 	bl	8001684 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004168:	f7fd fa8c 	bl	8001684 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1f3      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	4b51      	ldr	r3, [pc, #324]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0xe8>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d063      	beq.n	800425e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a2:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d11c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ae:	4b44      	ldr	r3, [pc, #272]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d116      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ba:	4b41      	ldr	r3, [pc, #260]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e1c7      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d2:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4937      	ldr	r1, [pc, #220]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	e03a      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f0:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <HAL_RCC_OscConfig+0x244>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fd fa45 	bl	8001684 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fd fa41 	bl	8001684 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1a8      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4925      	ldr	r1, [pc, #148]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	e015      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004232:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCC_OscConfig+0x244>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fd fa24 	bl	8001684 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004240:	f7fd fa20 	bl	8001684 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e187      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d036      	beq.n	80042d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <HAL_RCC_OscConfig+0x248>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fd fa04 	bl	8001684 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004280:	f7fd fa00 	bl	8001684 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e167      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x200>
 800429e:	e01b      	b.n	80042d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_RCC_OscConfig+0x248>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a6:	f7fd f9ed 	bl	8001684 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	e00e      	b.n	80042cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fd f9e9 	bl	8001684 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d907      	bls.n	80042cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e150      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	42470000 	.word	0x42470000
 80042c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	4b88      	ldr	r3, [pc, #544]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ea      	bne.n	80042ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8097 	beq.w	8004414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ea:	4b81      	ldr	r3, [pc, #516]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10f      	bne.n	8004316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	4b7d      	ldr	r3, [pc, #500]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a7c      	ldr	r2, [pc, #496]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
 8004306:	4b7a      	ldr	r3, [pc, #488]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004316:	4b77      	ldr	r3, [pc, #476]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004322:	4b74      	ldr	r3, [pc, #464]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a73      	ldr	r2, [pc, #460]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432e:	f7fd f9a9 	bl	8001684 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004336:	f7fd f9a5 	bl	8001684 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e10c      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	4b6a      	ldr	r3, [pc, #424]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x2ea>
 800435c:	4b64      	ldr	r3, [pc, #400]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4a63      	ldr	r2, [pc, #396]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6713      	str	r3, [r2, #112]	; 0x70
 8004368:	e01c      	b.n	80043a4 <HAL_RCC_OscConfig+0x324>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b05      	cmp	r3, #5
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x30c>
 8004372:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	4a5e      	ldr	r2, [pc, #376]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004378:	f043 0304 	orr.w	r3, r3, #4
 800437c:	6713      	str	r3, [r2, #112]	; 0x70
 800437e:	4b5c      	ldr	r3, [pc, #368]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4a5b      	ldr	r2, [pc, #364]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6713      	str	r3, [r2, #112]	; 0x70
 800438a:	e00b      	b.n	80043a4 <HAL_RCC_OscConfig+0x324>
 800438c:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	4a57      	ldr	r2, [pc, #348]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	6713      	str	r3, [r2, #112]	; 0x70
 8004398:	4b55      	ldr	r3, [pc, #340]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	4a54      	ldr	r2, [pc, #336]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800439e:	f023 0304 	bic.w	r3, r3, #4
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fd f96a 	bl	8001684 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b4:	f7fd f966 	bl	8001684 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e0cb      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ca:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ee      	beq.n	80043b4 <HAL_RCC_OscConfig+0x334>
 80043d6:	e014      	b.n	8004402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d8:	f7fd f954 	bl	8001684 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fd f950 	bl	8001684 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e0b5      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f6:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1ee      	bne.n	80043e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	4a38      	ldr	r2, [pc, #224]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800440e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004412:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80a1 	beq.w	8004560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800441e:	4b34      	ldr	r3, [pc, #208]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b08      	cmp	r3, #8
 8004428:	d05c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d141      	bne.n	80044b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fd f924 	bl	8001684 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004440:	f7fd f920 	bl	8001684 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e087      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	3b01      	subs	r3, #1
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	491b      	ldr	r1, [pc, #108]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448e:	f7fd f8f9 	bl	8001684 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004496:	f7fd f8f5 	bl	8001684 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e05c      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a8:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x416>
 80044b4:	e054      	b.n	8004560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fd f8e2 	bl	8001684 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c4:	f7fd f8de 	bl	8001684 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e045      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x444>
 80044e2:	e03d      	b.n	8004560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e038      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40007000 	.word	0x40007000
 80044f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_RCC_OscConfig+0x4ec>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d028      	beq.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d121      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d11a      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004534:	4293      	cmp	r3, r2
 8004536:	d111      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	3b01      	subs	r3, #1
 8004546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d107      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800

08004570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0cc      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b68      	ldr	r3, [pc, #416]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d90c      	bls.n	80045ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b65      	ldr	r3, [pc, #404]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b63      	ldr	r3, [pc, #396]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0b8      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c4:	4b59      	ldr	r3, [pc, #356]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a58      	ldr	r2, [pc, #352]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045dc:	4b53      	ldr	r3, [pc, #332]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a52      	ldr	r2, [pc, #328]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	494d      	ldr	r1, [pc, #308]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d044      	beq.n	8004690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b47      	ldr	r3, [pc, #284]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d119      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e07f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d003      	beq.n	800462e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462a:	2b03      	cmp	r3, #3
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e067      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b37      	ldr	r3, [pc, #220]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4934      	ldr	r1, [pc, #208]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004660:	f7fd f810 	bl	8001684 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fd f80c 	bl	8001684 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e04f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 020c 	and.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d1eb      	bne.n	8004668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d20c      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b22      	ldr	r3, [pc, #136]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e032      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4916      	ldr	r1, [pc, #88]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490e      	ldr	r1, [pc, #56]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046f6:	f000 f821 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490a      	ldr	r1, [pc, #40]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fc ff70 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40023c00 	.word	0x40023c00
 800472c:	40023800 	.word	0x40023800
 8004730:	08009538 	.word	0x08009538
 8004734:	20000174 	.word	0x20000174
 8004738:	20000178 	.word	0x20000178

0800473c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800473c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004740:	b094      	sub	sp, #80	; 0x50
 8004742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	647b      	str	r3, [r7, #68]	; 0x44
 8004748:	2300      	movs	r3, #0
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474c:	2300      	movs	r3, #0
 800474e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004754:	4b79      	ldr	r3, [pc, #484]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d00d      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x40>
 8004760:	2b08      	cmp	r3, #8
 8004762:	f200 80e1 	bhi.w	8004928 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x34>
 800476a:	2b04      	cmp	r3, #4
 800476c:	d003      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x3a>
 800476e:	e0db      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004770:	4b73      	ldr	r3, [pc, #460]	; (8004940 <HAL_RCC_GetSysClockFreq+0x204>)
 8004772:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004774:	e0db      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004776:	4b73      	ldr	r3, [pc, #460]	; (8004944 <HAL_RCC_GetSysClockFreq+0x208>)
 8004778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800477a:	e0d8      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800477c:	4b6f      	ldr	r3, [pc, #444]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004784:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004786:	4b6d      	ldr	r3, [pc, #436]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d063      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004792:	4b6a      	ldr	r3, [pc, #424]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	2200      	movs	r2, #0
 800479a:	63bb      	str	r3, [r7, #56]	; 0x38
 800479c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30
 80047a6:	2300      	movs	r3, #0
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
 80047aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047ae:	4622      	mov	r2, r4
 80047b0:	462b      	mov	r3, r5
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f04f 0100 	mov.w	r1, #0
 80047ba:	0159      	lsls	r1, r3, #5
 80047bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c0:	0150      	lsls	r0, r2, #5
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4621      	mov	r1, r4
 80047c8:	1a51      	subs	r1, r2, r1
 80047ca:	6139      	str	r1, [r7, #16]
 80047cc:	4629      	mov	r1, r5
 80047ce:	eb63 0301 	sbc.w	r3, r3, r1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047e0:	4659      	mov	r1, fp
 80047e2:	018b      	lsls	r3, r1, #6
 80047e4:	4651      	mov	r1, sl
 80047e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ea:	4651      	mov	r1, sl
 80047ec:	018a      	lsls	r2, r1, #6
 80047ee:	4651      	mov	r1, sl
 80047f0:	ebb2 0801 	subs.w	r8, r2, r1
 80047f4:	4659      	mov	r1, fp
 80047f6:	eb63 0901 	sbc.w	r9, r3, r1
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800480e:	4690      	mov	r8, r2
 8004810:	4699      	mov	r9, r3
 8004812:	4623      	mov	r3, r4
 8004814:	eb18 0303 	adds.w	r3, r8, r3
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	462b      	mov	r3, r5
 800481c:	eb49 0303 	adc.w	r3, r9, r3
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800482e:	4629      	mov	r1, r5
 8004830:	024b      	lsls	r3, r1, #9
 8004832:	4621      	mov	r1, r4
 8004834:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004838:	4621      	mov	r1, r4
 800483a:	024a      	lsls	r2, r1, #9
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004842:	2200      	movs	r2, #0
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
 8004846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800484c:	f7fb fcbc 	bl	80001c8 <__aeabi_uldivmod>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4613      	mov	r3, r2
 8004856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004858:	e058      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485a:	4b38      	ldr	r3, [pc, #224]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	2200      	movs	r2, #0
 8004862:	4618      	mov	r0, r3
 8004864:	4611      	mov	r1, r2
 8004866:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	2300      	movs	r3, #0
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004874:	4642      	mov	r2, r8
 8004876:	464b      	mov	r3, r9
 8004878:	f04f 0000 	mov.w	r0, #0
 800487c:	f04f 0100 	mov.w	r1, #0
 8004880:	0159      	lsls	r1, r3, #5
 8004882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004886:	0150      	lsls	r0, r2, #5
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4641      	mov	r1, r8
 800488e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004892:	4649      	mov	r1, r9
 8004894:	eb63 0b01 	sbc.w	fp, r3, r1
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048ac:	ebb2 040a 	subs.w	r4, r2, sl
 80048b0:	eb63 050b 	sbc.w	r5, r3, fp
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	00eb      	lsls	r3, r5, #3
 80048be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048c2:	00e2      	lsls	r2, r4, #3
 80048c4:	4614      	mov	r4, r2
 80048c6:	461d      	mov	r5, r3
 80048c8:	4643      	mov	r3, r8
 80048ca:	18e3      	adds	r3, r4, r3
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	464b      	mov	r3, r9
 80048d0:	eb45 0303 	adc.w	r3, r5, r3
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048e2:	4629      	mov	r1, r5
 80048e4:	028b      	lsls	r3, r1, #10
 80048e6:	4621      	mov	r1, r4
 80048e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048ec:	4621      	mov	r1, r4
 80048ee:	028a      	lsls	r2, r1, #10
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f6:	2200      	movs	r2, #0
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	61fa      	str	r2, [r7, #28]
 80048fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004900:	f7fb fc62 	bl	80001c8 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4613      	mov	r3, r2
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	3301      	adds	r3, #1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800491c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800491e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004926:	e002      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCC_GetSysClockFreq+0x204>)
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800492c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800492e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004930:	4618      	mov	r0, r3
 8004932:	3750      	adds	r7, #80	; 0x50
 8004934:	46bd      	mov	sp, r7
 8004936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	00f42400 	.word	0x00f42400
 8004944:	007a1200 	.word	0x007a1200

08004948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <HAL_RCC_GetHCLKFreq+0x14>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000174 	.word	0x20000174

08004960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004964:	f7ff fff0 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0a9b      	lsrs	r3, r3, #10
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4903      	ldr	r1, [pc, #12]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800
 8004984:	08009548 	.word	0x08009548

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d035      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049b0:	4b62      	ldr	r3, [pc, #392]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049b6:	f7fc fe65 	bl	8001684 <HAL_GetTick>
 80049ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049be:	f7fc fe61 	bl	8001684 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0b0      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d0:	4b5b      	ldr	r3, [pc, #364]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	019a      	lsls	r2, r3, #6
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	071b      	lsls	r3, r3, #28
 80049e8:	4955      	ldr	r1, [pc, #340]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049f0:	4b52      	ldr	r3, [pc, #328]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049f6:	f7fc fe45 	bl	8001684 <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049fe:	f7fc fe41 	bl	8001684 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e090      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a10:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8083 	beq.w	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	4b44      	ldr	r3, [pc, #272]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	4a43      	ldr	r2, [pc, #268]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a38:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3a:	4b41      	ldr	r3, [pc, #260]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a46:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3e      	ldr	r2, [pc, #248]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a52:	f7fc fe17 	bl	8001684 <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a58:	e008      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a5a:	f7fc fe13 	bl	8001684 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e062      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a6c:	4b35      	ldr	r3, [pc, #212]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a78:	4b31      	ldr	r3, [pc, #196]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02f      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d028      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a96:	4b2a      	ldr	r3, [pc, #168]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aa0:	4b29      	ldr	r3, [pc, #164]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aa6:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004aac:	4a24      	ldr	r2, [pc, #144]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ab2:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d114      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004abe:	f7fc fde1 	bl	8001684 <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	e00a      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac6:	f7fc fddd 	bl	8001684 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e02a      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004adc:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ee      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af4:	d10d      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004af6:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0a:	490d      	ldr	r1, [pc, #52]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	608b      	str	r3, [r1, #8]
 8004b10:	e005      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b1c:	6093      	str	r3, [r2, #8]
 8004b1e:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2a:	4905      	ldr	r1, [pc, #20]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	42470068 	.word	0x42470068
 8004b40:	40023800 	.word	0x40023800
 8004b44:	40007000 	.word	0x40007000
 8004b48:	42470e40 	.word	0x42470e40

08004b4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d13e      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b6a:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d12f      	bne.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b80:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b82:	617b      	str	r3, [r7, #20]
          break;
 8004b84:	e02f      	b.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b86:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b92:	d108      	bne.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b94:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b9c:	4a18      	ldr	r2, [pc, #96]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	e007      	b.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bbc:	099b      	lsrs	r3, r3, #6
 8004bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	fb02 f303 	mul.w	r3, r2, r3
 8004bc8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd0:	0f1b      	lsrs	r3, r3, #28
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]
          break;
 8004bde:	e002      	b.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
          break;
 8004be4:	bf00      	nop
        }
      }
      break;
 8004be6:	bf00      	nop
    }
  }
  return frequency;
 8004be8:	697b      	ldr	r3, [r7, #20]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	00bb8000 	.word	0x00bb8000
 8004c00:	007a1200 	.word	0x007a1200
 8004c04:	00f42400 	.word	0x00f42400

08004c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e07b      	b.n	8004d12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d108      	bne.n	8004c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c2a:	d009      	beq.n	8004c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	61da      	str	r2, [r3, #28]
 8004c32:	e005      	b.n	8004c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fc fa24 	bl	80010a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	ea42 0103 	orr.w	r1, r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	0c1b      	lsrs	r3, r3, #16
 8004cde:	f003 0104 	and.w	r1, r3, #4
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	f003 0210 	and.w	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e041      	b.n	8004db0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fc fb85 	bl	8001450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f000 fca9 	bl	80056b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d001      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e04e      	b.n	8004e6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a23      	ldr	r2, [pc, #140]	; (8004e7c <HAL_TIM_Base_Start_IT+0xc4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d022      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfa:	d01d      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d018      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1e      	ldr	r2, [pc, #120]	; (8004e84 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00e      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	; (8004e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a19      	ldr	r2, [pc, #100]	; (8004e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d111      	bne.n	8004e5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b06      	cmp	r3, #6
 8004e48:	d010      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5a:	e007      	b.n	8004e6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40000c00 	.word	0x40000c00
 8004e8c:	40010400 	.word	0x40010400
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40001800 	.word	0x40001800

08004e98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e041      	b.n	8004f2e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f839 	bl	8004f36 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f000 fbea 	bl	80056b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <HAL_TIM_IC_Start_IT+0x1e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	e013      	b.n	8004f92 <HAL_TIM_IC_Start_IT+0x46>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_IC_Start_IT+0x2e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	e00b      	b.n	8004f92 <HAL_TIM_IC_Start_IT+0x46>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_IC_Start_IT+0x3e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	e003      	b.n	8004f92 <HAL_TIM_IC_Start_IT+0x46>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <HAL_TIM_IC_Start_IT+0x58>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	e013      	b.n	8004fcc <HAL_TIM_IC_Start_IT+0x80>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d104      	bne.n	8004fb4 <HAL_TIM_IC_Start_IT+0x68>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	e00b      	b.n	8004fcc <HAL_TIM_IC_Start_IT+0x80>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d104      	bne.n	8004fc4 <HAL_TIM_IC_Start_IT+0x78>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	e003      	b.n	8004fcc <HAL_TIM_IC_Start_IT+0x80>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fce:	7bbb      	ldrb	r3, [r7, #14]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d102      	bne.n	8004fda <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fd4:	7b7b      	ldrb	r3, [r7, #13]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d001      	beq.n	8004fde <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e0cc      	b.n	8005178 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <HAL_TIM_IC_Start_IT+0xa2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fec:	e013      	b.n	8005016 <HAL_TIM_IC_Start_IT+0xca>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d104      	bne.n	8004ffe <HAL_TIM_IC_Start_IT+0xb2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ffc:	e00b      	b.n	8005016 <HAL_TIM_IC_Start_IT+0xca>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d104      	bne.n	800500e <HAL_TIM_IC_Start_IT+0xc2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800500c:	e003      	b.n	8005016 <HAL_TIM_IC_Start_IT+0xca>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2202      	movs	r2, #2
 8005012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <HAL_TIM_IC_Start_IT+0xda>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005024:	e013      	b.n	800504e <HAL_TIM_IC_Start_IT+0x102>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b04      	cmp	r3, #4
 800502a:	d104      	bne.n	8005036 <HAL_TIM_IC_Start_IT+0xea>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005034:	e00b      	b.n	800504e <HAL_TIM_IC_Start_IT+0x102>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b08      	cmp	r3, #8
 800503a:	d104      	bne.n	8005046 <HAL_TIM_IC_Start_IT+0xfa>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005044:	e003      	b.n	800504e <HAL_TIM_IC_Start_IT+0x102>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b0c      	cmp	r3, #12
 8005052:	d841      	bhi.n	80050d8 <HAL_TIM_IC_Start_IT+0x18c>
 8005054:	a201      	add	r2, pc, #4	; (adr r2, 800505c <HAL_TIM_IC_Start_IT+0x110>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	08005091 	.word	0x08005091
 8005060:	080050d9 	.word	0x080050d9
 8005064:	080050d9 	.word	0x080050d9
 8005068:	080050d9 	.word	0x080050d9
 800506c:	080050a3 	.word	0x080050a3
 8005070:	080050d9 	.word	0x080050d9
 8005074:	080050d9 	.word	0x080050d9
 8005078:	080050d9 	.word	0x080050d9
 800507c:	080050b5 	.word	0x080050b5
 8005080:	080050d9 	.word	0x080050d9
 8005084:	080050d9 	.word	0x080050d9
 8005088:	080050d9 	.word	0x080050d9
 800508c:	080050c7 	.word	0x080050c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0202 	orr.w	r2, r2, #2
 800509e:	60da      	str	r2, [r3, #12]
      break;
 80050a0:	e01d      	b.n	80050de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0204 	orr.w	r2, r2, #4
 80050b0:	60da      	str	r2, [r3, #12]
      break;
 80050b2:	e014      	b.n	80050de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0208 	orr.w	r2, r2, #8
 80050c2:	60da      	str	r2, [r3, #12]
      break;
 80050c4:	e00b      	b.n	80050de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0210 	orr.w	r2, r2, #16
 80050d4:	60da      	str	r2, [r3, #12]
      break;
 80050d6:	e002      	b.n	80050de <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      break;
 80050dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d148      	bne.n	8005176 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2201      	movs	r2, #1
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fd43 	bl	8005b78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a22      	ldr	r2, [pc, #136]	; (8005180 <HAL_TIM_IC_Start_IT+0x234>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d022      	beq.n	8005142 <HAL_TIM_IC_Start_IT+0x1f6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005104:	d01d      	beq.n	8005142 <HAL_TIM_IC_Start_IT+0x1f6>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <HAL_TIM_IC_Start_IT+0x238>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d018      	beq.n	8005142 <HAL_TIM_IC_Start_IT+0x1f6>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <HAL_TIM_IC_Start_IT+0x23c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_TIM_IC_Start_IT+0x1f6>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1b      	ldr	r2, [pc, #108]	; (800518c <HAL_TIM_IC_Start_IT+0x240>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_TIM_IC_Start_IT+0x1f6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a19      	ldr	r2, [pc, #100]	; (8005190 <HAL_TIM_IC_Start_IT+0x244>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_TIM_IC_Start_IT+0x1f6>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a18      	ldr	r2, [pc, #96]	; (8005194 <HAL_TIM_IC_Start_IT+0x248>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_TIM_IC_Start_IT+0x1f6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a16      	ldr	r2, [pc, #88]	; (8005198 <HAL_TIM_IC_Start_IT+0x24c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d111      	bne.n	8005166 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b06      	cmp	r3, #6
 8005152:	d010      	beq.n	8005176 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005164:	e007      	b.n	8005176 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005176:	7bfb      	ldrb	r3, [r7, #15]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40010000 	.word	0x40010000
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00
 8005190:	40010400 	.word	0x40010400
 8005194:	40014000 	.word	0x40014000
 8005198:	40001800 	.word	0x40001800

0800519c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d122      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d11b      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0202 	mvn.w	r2, #2
 80051c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fb fedc 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fa43 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fa4a 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b04      	cmp	r3, #4
 8005204:	d122      	bne.n	800524c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b04      	cmp	r3, #4
 8005212:	d11b      	bne.n	800524c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0204 	mvn.w	r2, #4
 800521c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fb feb2 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
 8005238:	e005      	b.n	8005246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fa19 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fa20 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b08      	cmp	r3, #8
 8005258:	d122      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b08      	cmp	r3, #8
 8005266:	d11b      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0208 	mvn.w	r2, #8
 8005270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2204      	movs	r2, #4
 8005276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fb fe88 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
 800528c:	e005      	b.n	800529a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f9ef 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f9f6 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b10      	cmp	r3, #16
 80052ac:	d122      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d11b      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0210 	mvn.w	r2, #16
 80052c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2208      	movs	r2, #8
 80052ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fb fe5e 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
 80052e0:	e005      	b.n	80052ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f9c5 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f9cc 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d10e      	bne.n	8005320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b01      	cmp	r3, #1
 800530e:	d107      	bne.n	8005320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0201 	mvn.w	r2, #1
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fb fe60 	bl	8000fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d10e      	bne.n	800534c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005338:	2b80      	cmp	r3, #128	; 0x80
 800533a:	d107      	bne.n	800534c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fcc2 	bl	8005cd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d10e      	bne.n	8005378 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	d107      	bne.n	8005378 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f991 	bl	800569a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b20      	cmp	r3, #32
 8005384:	d10e      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b20      	cmp	r3, #32
 8005392:	d107      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0220 	mvn.w	r2, #32
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fc8c 	bl	8005cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053a4:	bf00      	nop
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_IC_ConfigChannel+0x1e>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e088      	b.n	80054dc <HAL_TIM_IC_ConfigChannel+0x130>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d11b      	bne.n	8005410 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6819      	ldr	r1, [r3, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f000 fa02 	bl	80057f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 020c 	bic.w	r2, r2, #12
 80053fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	619a      	str	r2, [r3, #24]
 800540e:	e060      	b.n	80054d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b04      	cmp	r3, #4
 8005414:	d11c      	bne.n	8005450 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6819      	ldr	r1, [r3, #0]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f000 fa86 	bl	8005936 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005438:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6999      	ldr	r1, [r3, #24]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	021a      	lsls	r2, r3, #8
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	619a      	str	r2, [r3, #24]
 800544e:	e040      	b.n	80054d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b08      	cmp	r3, #8
 8005454:	d11b      	bne.n	800548e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6819      	ldr	r1, [r3, #0]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f000 fad3 	bl	8005a10 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 020c 	bic.w	r2, r2, #12
 8005478:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69d9      	ldr	r1, [r3, #28]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	61da      	str	r2, [r3, #28]
 800548c:	e021      	b.n	80054d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b0c      	cmp	r3, #12
 8005492:	d11c      	bne.n	80054ce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6819      	ldr	r1, [r3, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f000 faf0 	bl	8005a88 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054b6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69d9      	ldr	r1, [r3, #28]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	021a      	lsls	r2, r3, #8
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	61da      	str	r2, [r3, #28]
 80054cc:	e001      	b.n	80054d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054da:	7dfb      	ldrb	r3, [r7, #23]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_TIM_ConfigClockSource+0x1c>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e0b4      	b.n	800566a <HAL_TIM_ConfigClockSource+0x186>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800551e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005538:	d03e      	beq.n	80055b8 <HAL_TIM_ConfigClockSource+0xd4>
 800553a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553e:	f200 8087 	bhi.w	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005546:	f000 8086 	beq.w	8005656 <HAL_TIM_ConfigClockSource+0x172>
 800554a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554e:	d87f      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b70      	cmp	r3, #112	; 0x70
 8005552:	d01a      	beq.n	800558a <HAL_TIM_ConfigClockSource+0xa6>
 8005554:	2b70      	cmp	r3, #112	; 0x70
 8005556:	d87b      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005558:	2b60      	cmp	r3, #96	; 0x60
 800555a:	d050      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x11a>
 800555c:	2b60      	cmp	r3, #96	; 0x60
 800555e:	d877      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b50      	cmp	r3, #80	; 0x50
 8005562:	d03c      	beq.n	80055de <HAL_TIM_ConfigClockSource+0xfa>
 8005564:	2b50      	cmp	r3, #80	; 0x50
 8005566:	d873      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d058      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x13a>
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	d86f      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b30      	cmp	r3, #48	; 0x30
 8005572:	d064      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 8005574:	2b30      	cmp	r3, #48	; 0x30
 8005576:	d86b      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b20      	cmp	r3, #32
 800557a:	d060      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 800557c:	2b20      	cmp	r3, #32
 800557e:	d867      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d05c      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 8005584:	2b10      	cmp	r3, #16
 8005586:	d05a      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 8005588:	e062      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6899      	ldr	r1, [r3, #8]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f000 facd 	bl	8005b38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	609a      	str	r2, [r3, #8]
      break;
 80055b6:	e04f      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	6899      	ldr	r1, [r3, #8]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f000 fab6 	bl	8005b38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055da:	609a      	str	r2, [r3, #8]
      break;
 80055dc:	e03c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6859      	ldr	r1, [r3, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f000 f974 	bl	80058d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2150      	movs	r1, #80	; 0x50
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fa83 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 80055fc:	e02c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6859      	ldr	r1, [r3, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	461a      	mov	r2, r3
 800560c:	f000 f9d0 	bl	80059b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2160      	movs	r1, #96	; 0x60
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fa73 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 800561c:	e01c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	461a      	mov	r2, r3
 800562c:	f000 f954 	bl	80058d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2140      	movs	r1, #64	; 0x40
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fa63 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 800563c:	e00c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f000 fa5a 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 800564e:	e003      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      break;
 8005654:	e000      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a40      	ldr	r2, [pc, #256]	; (80057c4 <TIM_Base_SetConfig+0x114>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ce:	d00f      	beq.n	80056f0 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a3d      	ldr	r2, [pc, #244]	; (80057c8 <TIM_Base_SetConfig+0x118>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00b      	beq.n	80056f0 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3c      	ldr	r2, [pc, #240]	; (80057cc <TIM_Base_SetConfig+0x11c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d007      	beq.n	80056f0 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a3b      	ldr	r2, [pc, #236]	; (80057d0 <TIM_Base_SetConfig+0x120>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d003      	beq.n	80056f0 <TIM_Base_SetConfig+0x40>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a3a      	ldr	r2, [pc, #232]	; (80057d4 <TIM_Base_SetConfig+0x124>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d108      	bne.n	8005702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2f      	ldr	r2, [pc, #188]	; (80057c4 <TIM_Base_SetConfig+0x114>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d02b      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005710:	d027      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2c      	ldr	r2, [pc, #176]	; (80057c8 <TIM_Base_SetConfig+0x118>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d023      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2b      	ldr	r2, [pc, #172]	; (80057cc <TIM_Base_SetConfig+0x11c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01f      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2a      	ldr	r2, [pc, #168]	; (80057d0 <TIM_Base_SetConfig+0x120>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01b      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a29      	ldr	r2, [pc, #164]	; (80057d4 <TIM_Base_SetConfig+0x124>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d017      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a28      	ldr	r2, [pc, #160]	; (80057d8 <TIM_Base_SetConfig+0x128>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a27      	ldr	r2, [pc, #156]	; (80057dc <TIM_Base_SetConfig+0x12c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00f      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a26      	ldr	r2, [pc, #152]	; (80057e0 <TIM_Base_SetConfig+0x130>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00b      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <TIM_Base_SetConfig+0x134>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d007      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a24      	ldr	r2, [pc, #144]	; (80057e8 <TIM_Base_SetConfig+0x138>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a23      	ldr	r2, [pc, #140]	; (80057ec <TIM_Base_SetConfig+0x13c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d108      	bne.n	8005774 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <TIM_Base_SetConfig+0x114>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_Base_SetConfig+0xf8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a0c      	ldr	r2, [pc, #48]	; (80057d4 <TIM_Base_SetConfig+0x124>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d103      	bne.n	80057b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	615a      	str	r2, [r3, #20]
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40000c00 	.word	0x40000c00
 80057d4:	40010400 	.word	0x40010400
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40014400 	.word	0x40014400
 80057e0:	40014800 	.word	0x40014800
 80057e4:	40001800 	.word	0x40001800
 80057e8:	40001c00 	.word	0x40001c00
 80057ec:	40002000 	.word	0x40002000

080057f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4a28      	ldr	r2, [pc, #160]	; (80058bc <TIM_TI1_SetConfig+0xcc>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01b      	beq.n	8005856 <TIM_TI1_SetConfig+0x66>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005824:	d017      	beq.n	8005856 <TIM_TI1_SetConfig+0x66>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4a25      	ldr	r2, [pc, #148]	; (80058c0 <TIM_TI1_SetConfig+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <TIM_TI1_SetConfig+0x66>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4a24      	ldr	r2, [pc, #144]	; (80058c4 <TIM_TI1_SetConfig+0xd4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00f      	beq.n	8005856 <TIM_TI1_SetConfig+0x66>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a23      	ldr	r2, [pc, #140]	; (80058c8 <TIM_TI1_SetConfig+0xd8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00b      	beq.n	8005856 <TIM_TI1_SetConfig+0x66>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4a22      	ldr	r2, [pc, #136]	; (80058cc <TIM_TI1_SetConfig+0xdc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <TIM_TI1_SetConfig+0x66>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <TIM_TI1_SetConfig+0xe0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_TI1_SetConfig+0x66>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4a20      	ldr	r2, [pc, #128]	; (80058d4 <TIM_TI1_SetConfig+0xe4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d101      	bne.n	800585a <TIM_TI1_SetConfig+0x6a>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <TIM_TI1_SetConfig+0x6c>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f023 0303 	bic.w	r3, r3, #3
 8005866:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e003      	b.n	800587a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	b2db      	uxtb	r3, r3
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f023 030a 	bic.w	r3, r3, #10
 8005894:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f003 030a 	and.w	r3, r3, #10
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40010000 	.word	0x40010000
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40010400 	.word	0x40010400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40001800 	.word	0x40001800

080058d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f023 0201 	bic.w	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f023 030a 	bic.w	r3, r3, #10
 8005914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005936:	b480      	push	{r7}
 8005938:	b087      	sub	sp, #28
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
 8005942:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	f023 0210 	bic.w	r2, r3, #16
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005962:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	031b      	lsls	r3, r3, #12
 800597a:	b29b      	uxth	r3, r3
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005988:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	621a      	str	r2, [r3, #32]
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f023 0210 	bic.w	r2, r3, #16
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	621a      	str	r2, [r3, #32]
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f023 0303 	bic.w	r3, r3, #3
 8005a3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	621a      	str	r2, [r3, #32]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	031b      	lsls	r3, r3, #12
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	031b      	lsls	r3, r3, #12
 8005ae0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f043 0307 	orr.w	r3, r3, #7
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	609a      	str	r2, [r3, #8]
}
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	021a      	lsls	r2, r3, #8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	609a      	str	r2, [r3, #8]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	401a      	ands	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a1a      	ldr	r2, [r3, #32]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 031f 	and.w	r3, r3, #31
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
	...

08005bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e05a      	b.n	8005c92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a21      	ldr	r2, [pc, #132]	; (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d022      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c28:	d01d      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d018      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d013      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1a      	ldr	r2, [pc, #104]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00e      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d009      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a17      	ldr	r2, [pc, #92]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d004      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d10c      	bne.n	8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	40000c00 	.word	0x40000c00
 8005cb0:	40010400 	.word	0x40010400
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40001800 	.word	0x40001800

08005cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	f107 001c 	add.w	r0, r7, #28
 8005cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d122      	bne.n	8005d42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d105      	bne.n	8005d36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f9c0 	bl	80060bc <USB_CoreReset>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73fb      	strb	r3, [r7, #15]
 8005d40:	e01a      	b.n	8005d78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9b4 	bl	80060bc <USB_CoreReset>
 8005d54:	4603      	mov	r3, r0
 8005d56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
 8005d6a:	e005      	b.n	8005d78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d10b      	bne.n	8005d96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f043 0206 	orr.w	r2, r3, #6
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f043 0220 	orr.w	r2, r3, #32
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005da2:	b004      	add	sp, #16
 8005da4:	4770      	bx	lr

08005da6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f043 0201 	orr.w	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f023 0201 	bic.w	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	460b      	mov	r3, r1
 8005df4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d115      	bne.n	8005e38 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e18:	2001      	movs	r0, #1
 8005e1a:	f7fb fc3f 	bl	800169c <HAL_Delay>
      ms++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f93a 	bl	800609e <USB_GetMode>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d01e      	beq.n	8005e6e <USB_SetCurrentMode+0x84>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b31      	cmp	r3, #49	; 0x31
 8005e34:	d9f0      	bls.n	8005e18 <USB_SetCurrentMode+0x2e>
 8005e36:	e01a      	b.n	8005e6e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d115      	bne.n	8005e6a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	f7fb fc26 	bl	800169c <HAL_Delay>
      ms++;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3301      	adds	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f921 	bl	800609e <USB_GetMode>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <USB_SetCurrentMode+0x84>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b31      	cmp	r3, #49	; 0x31
 8005e66:	d9f0      	bls.n	8005e4a <USB_SetCurrentMode+0x60>
 8005e68:	e001      	b.n	8005e6e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e005      	b.n	8005e7a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b32      	cmp	r3, #50	; 0x32
 8005e72:	d101      	bne.n	8005e78 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3301      	adds	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4a13      	ldr	r2, [pc, #76]	; (8005ee8 <USB_FlushTxFifo+0x64>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d901      	bls.n	8005ea4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e01b      	b.n	8005edc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	daf2      	bge.n	8005e92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	019b      	lsls	r3, r3, #6
 8005eb4:	f043 0220 	orr.w	r2, r3, #32
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4a08      	ldr	r2, [pc, #32]	; (8005ee8 <USB_FlushTxFifo+0x64>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e006      	b.n	8005edc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d0f0      	beq.n	8005ebc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	00030d40 	.word	0x00030d40

08005eec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3301      	adds	r3, #1
 8005efc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a11      	ldr	r2, [pc, #68]	; (8005f48 <USB_FlushRxFifo+0x5c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d901      	bls.n	8005f0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e018      	b.n	8005f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	daf2      	bge.n	8005ef8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2210      	movs	r2, #16
 8005f1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <USB_FlushRxFifo+0x5c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d901      	bls.n	8005f2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e006      	b.n	8005f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0310 	and.w	r3, r3, #16
 8005f36:	2b10      	cmp	r3, #16
 8005f38:	d0f0      	beq.n	8005f1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	00030d40 	.word	0x00030d40

08005f4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b089      	sub	sp, #36	; 0x24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	4611      	mov	r1, r2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	71fb      	strb	r3, [r7, #7]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d123      	bne.n	8005fba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f72:	88bb      	ldrh	r3, [r7, #4]
 8005f74:	3303      	adds	r3, #3
 8005f76:	089b      	lsrs	r3, r3, #2
 8005f78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e018      	b.n	8005fb2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f80:	79fb      	ldrb	r3, [r7, #7]
 8005f82:	031a      	lsls	r2, r3, #12
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	3301      	adds	r3, #1
 8005f98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d3e2      	bcc.n	8005f80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3724      	adds	r7, #36	; 0x24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b08b      	sub	sp, #44	; 0x2c
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	089b      	lsrs	r3, r3, #2
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	f003 0303 	and.w	r3, r3, #3
 8005fec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fee:	2300      	movs	r3, #0
 8005ff0:	623b      	str	r3, [r7, #32]
 8005ff2:	e014      	b.n	800601e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	601a      	str	r2, [r3, #0]
    pDest++;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	3301      	adds	r3, #1
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	3301      	adds	r3, #1
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	3301      	adds	r3, #1
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	3301      	adds	r3, #1
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	3301      	adds	r3, #1
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	6a3a      	ldr	r2, [r7, #32]
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	429a      	cmp	r2, r3
 8006024:	d3e6      	bcc.n	8005ff4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006026:	8bfb      	ldrh	r3, [r7, #30]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01e      	beq.n	800606a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006036:	461a      	mov	r2, r3
 8006038:	f107 0310 	add.w	r3, r7, #16
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	fa22 f303 	lsr.w	r3, r2, r3
 800604c:	b2da      	uxtb	r2, r3
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	701a      	strb	r2, [r3, #0]
      i++;
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	3301      	adds	r3, #1
 8006056:	623b      	str	r3, [r7, #32]
      pDest++;
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	3301      	adds	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800605e:	8bfb      	ldrh	r3, [r7, #30]
 8006060:	3b01      	subs	r3, #1
 8006062:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006064:	8bfb      	ldrh	r3, [r7, #30]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1ea      	bne.n	8006040 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800606c:	4618      	mov	r0, r3
 800606e:	372c      	adds	r7, #44	; 0x2c
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4013      	ands	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006090:	68fb      	ldr	r3, [r7, #12]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	f003 0301 	and.w	r3, r3, #1
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a13      	ldr	r2, [pc, #76]	; (8006120 <USB_CoreReset+0x64>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e01b      	b.n	8006112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	daf2      	bge.n	80060c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4a09      	ldr	r2, [pc, #36]	; (8006120 <USB_CoreReset+0x64>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d901      	bls.n	8006104 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e006      	b.n	8006112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	d0f0      	beq.n	80060f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	00030d40 	.word	0x00030d40

08006124 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006124:	b084      	sub	sp, #16
 8006126:	b580      	push	{r7, lr}
 8006128:	b086      	sub	sp, #24
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006144:	461a      	mov	r2, r3
 8006146:	2300      	movs	r3, #0
 8006148:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	2b01      	cmp	r3, #1
 800617e:	d10a      	bne.n	8006196 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800618e:	f043 0304 	orr.w	r3, r3, #4
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	e014      	b.n	80061c0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061a4:	f023 0304 	bic.w	r3, r3, #4
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e009      	b.n	80061c0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061ba:	f023 0304 	bic.w	r3, r3, #4
 80061be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061c0:	2110      	movs	r1, #16
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fe5e 	bl	8005e84 <USB_FlushTxFifo>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fe8a 	bl	8005eec <USB_FlushRxFifo>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	e015      	b.n	8006214 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f4:	461a      	mov	r2, r3
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
 80061fa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006208:	461a      	mov	r2, r3
 800620a:	2300      	movs	r3, #0
 800620c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	3301      	adds	r3, #1
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	429a      	cmp	r2, r3
 800621a:	d3e5      	bcc.n	80061e8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f04f 32ff 	mov.w	r2, #4294967295
 8006228:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800623c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a13      	ldr	r2, [pc, #76]	; (8006290 <USB_HostInit+0x16c>)
 8006242:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a13      	ldr	r2, [pc, #76]	; (8006294 <USB_HostInit+0x170>)
 8006248:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800624c:	e009      	b.n	8006262 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2280      	movs	r2, #128	; 0x80
 8006252:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a10      	ldr	r2, [pc, #64]	; (8006298 <USB_HostInit+0x174>)
 8006258:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a0f      	ldr	r2, [pc, #60]	; (800629c <USB_HostInit+0x178>)
 800625e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	2b00      	cmp	r3, #0
 8006266:	d105      	bne.n	8006274 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f043 0210 	orr.w	r2, r3, #16
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <USB_HostInit+0x17c>)
 800627a:	4313      	orrs	r3, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800628c:	b004      	add	sp, #16
 800628e:	4770      	bx	lr
 8006290:	01000200 	.word	0x01000200
 8006294:	00e00300 	.word	0x00e00300
 8006298:	00600080 	.word	0x00600080
 800629c:	004000e0 	.word	0x004000e0
 80062a0:	a3200008 	.word	0xa3200008

080062a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062c2:	f023 0303 	bic.w	r3, r3, #3
 80062c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	68f9      	ldr	r1, [r7, #12]
 80062d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062dc:	4313      	orrs	r3, r2
 80062de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d107      	bne.n	80062f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ec:	461a      	mov	r2, r3
 80062ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80062f2:	6053      	str	r3, [r2, #4]
 80062f4:	e009      	b.n	800630a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d106      	bne.n	800630a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006302:	461a      	mov	r2, r3
 8006304:	f241 7370 	movw	r3, #6000	; 0x1770
 8006308:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006338:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006346:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006348:	2064      	movs	r0, #100	; 0x64
 800634a:	f7fb f9a7 	bl	800169c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800635a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800635c:	200a      	movs	r0, #10
 800635e:	f7fb f99d 	bl	800169c <HAL_Delay>

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006390:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <USB_DriveVbus+0x44>
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d106      	bne.n	80063b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ba:	d109      	bne.n	80063d0 <USB_DriveVbus+0x64>
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	0c5b      	lsrs	r3, r3, #17
 80063fc:	f003 0303 	and.w	r3, r3, #3
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	b29b      	uxth	r3, r3
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	4608      	mov	r0, r1
 800643a:	4611      	mov	r1, r2
 800643c:	461a      	mov	r2, r3
 800643e:	4603      	mov	r3, r0
 8006440:	70fb      	strb	r3, [r7, #3]
 8006442:	460b      	mov	r3, r1
 8006444:	70bb      	strb	r3, [r7, #2]
 8006446:	4613      	mov	r3, r2
 8006448:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	461a      	mov	r2, r3
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
 8006464:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006466:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800646a:	2b03      	cmp	r3, #3
 800646c:	d87e      	bhi.n	800656c <USB_HC_Init+0x13c>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <USB_HC_Init+0x44>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006485 	.word	0x08006485
 8006478:	0800652f 	.word	0x0800652f
 800647c:	08006485 	.word	0x08006485
 8006480:	080064f1 	.word	0x080064f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006490:	461a      	mov	r2, r3
 8006492:	f240 439d 	movw	r3, #1181	; 0x49d
 8006496:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006498:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800649c:	2b00      	cmp	r3, #0
 800649e:	da10      	bge.n	80064c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064be:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80064c0:	e057      	b.n	8006572 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d051      	beq.n	8006572 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	78fa      	ldrb	r2, [r7, #3]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064ec:	60d3      	str	r3, [r2, #12]
      break;
 80064ee:	e040      	b.n	8006572 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fc:	461a      	mov	r2, r3
 80064fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8006502:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006504:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006508:	2b00      	cmp	r3, #0
 800650a:	da34      	bge.n	8006576 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	78fa      	ldrb	r2, [r7, #3]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	440a      	add	r2, r1
 8006522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800652c:	e023      	b.n	8006576 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653a:	461a      	mov	r2, r3
 800653c:	f240 2325 	movw	r3, #549	; 0x225
 8006540:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006542:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006546:	2b00      	cmp	r3, #0
 8006548:	da17      	bge.n	800657a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4413      	add	r3, r2
 8006552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	440a      	add	r2, r1
 8006560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006564:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006568:	60d3      	str	r3, [r2, #12]
      }
      break;
 800656a:	e006      	b.n	800657a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	77fb      	strb	r3, [r7, #31]
      break;
 8006570:	e004      	b.n	800657c <USB_HC_Init+0x14c>
      break;
 8006572:	bf00      	nop
 8006574:	e002      	b.n	800657c <USB_HC_Init+0x14c>
      break;
 8006576:	bf00      	nop
 8006578:	e000      	b.n	800657c <USB_HC_Init+0x14c>
      break;
 800657a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	440a      	add	r2, r1
 8006592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006596:	f043 0302 	orr.w	r3, r3, #2
 800659a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	2101      	movs	r1, #1
 80065ac:	fa01 f303 	lsl.w	r3, r1, r3
 80065b0:	6939      	ldr	r1, [r7, #16]
 80065b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065b6:	4313      	orrs	r3, r2
 80065b8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80065c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	da03      	bge.n	80065d6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80065ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	e001      	b.n	80065da <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff feff 	bl	80063de <USB_GetHostSpeed>
 80065e0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80065e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d106      	bne.n	80065f8 <USB_HC_Init+0x1c8>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d003      	beq.n	80065f8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80065f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	e001      	b.n	80065fc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065fc:	787b      	ldrb	r3, [r7, #1]
 80065fe:	059b      	lsls	r3, r3, #22
 8006600:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006604:	78bb      	ldrb	r3, [r7, #2]
 8006606:	02db      	lsls	r3, r3, #11
 8006608:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800660c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800660e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006612:	049b      	lsls	r3, r3, #18
 8006614:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006618:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800661a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800661c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006620:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	0159      	lsls	r1, r3, #5
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	440b      	add	r3, r1
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006638:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800663a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800663e:	2b03      	cmp	r3, #3
 8006640:	d003      	beq.n	800664a <USB_HC_Init+0x21a>
 8006642:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006646:	2b01      	cmp	r3, #1
 8006648:	d10f      	bne.n	800666a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	78fa      	ldrb	r2, [r7, #3]
 800665a:	0151      	lsls	r1, r2, #5
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	440a      	add	r2, r1
 8006660:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006668:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800666a:	7ffb      	ldrb	r3, [r7, #31]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08c      	sub	sp, #48	; 0x30
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	4613      	mov	r3, r2
 8006680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	785b      	ldrb	r3, [r3, #1]
 800668a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800668c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006690:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02d      	beq.n	80066fa <USB_HC_StartXfer+0x86>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	791b      	ldrb	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d129      	bne.n	80066fa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d117      	bne.n	80066dc <USB_HC_StartXfer+0x68>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	79db      	ldrb	r3, [r3, #7]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <USB_HC_StartXfer+0x48>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	79db      	ldrb	r3, [r3, #7]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d10f      	bne.n	80066dc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	6a3a      	ldr	r2, [r7, #32]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066da:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <USB_HC_StartXfer+0x86>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	795b      	ldrb	r3, [r3, #5]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d107      	bne.n	80066fa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	4619      	mov	r1, r3
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fa0f 	bl	8006b14 <USB_DoPing>
      return HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e0f8      	b.n	80068ec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d018      	beq.n	8006734 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	8912      	ldrh	r2, [r2, #8]
 800670a:	4413      	add	r3, r2
 800670c:	3b01      	subs	r3, #1
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	8912      	ldrh	r2, [r2, #8]
 8006712:	fbb3 f3f2 	udiv	r3, r3, r2
 8006716:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006718:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800671a:	8b7b      	ldrh	r3, [r7, #26]
 800671c:	429a      	cmp	r2, r3
 800671e:	d90b      	bls.n	8006738 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006720:	8b7b      	ldrh	r3, [r7, #26]
 8006722:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006724:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	8912      	ldrh	r2, [r2, #8]
 800672a:	fb03 f202 	mul.w	r2, r3, r2
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	611a      	str	r2, [r3, #16]
 8006732:	e001      	b.n	8006738 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006734:	2301      	movs	r3, #1
 8006736:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	78db      	ldrb	r3, [r3, #3]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006740:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	8912      	ldrh	r2, [r2, #8]
 8006746:	fb03 f202 	mul.w	r2, r3, r2
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	611a      	str	r2, [r3, #16]
 800674e:	e003      	b.n	8006758 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	695a      	ldr	r2, [r3, #20]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006762:	04d9      	lsls	r1, r3, #19
 8006764:	4b63      	ldr	r3, [pc, #396]	; (80068f4 <USB_HC_StartXfer+0x280>)
 8006766:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006768:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	7a9b      	ldrb	r3, [r3, #10]
 800676e:	075b      	lsls	r3, r3, #29
 8006770:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006774:	69f9      	ldr	r1, [r7, #28]
 8006776:	0148      	lsls	r0, r1, #5
 8006778:	6a39      	ldr	r1, [r7, #32]
 800677a:	4401      	add	r1, r0
 800677c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006780:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006782:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	68d9      	ldr	r1, [r3, #12]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	4413      	add	r3, r2
 8006796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679a:	460a      	mov	r2, r1
 800679c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bf0c      	ite	eq
 80067ae:	2301      	moveq	r3, #1
 80067b0:	2300      	movne	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	6a3a      	ldr	r2, [r7, #32]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067d4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	7e7b      	ldrb	r3, [r7, #25]
 80067e6:	075b      	lsls	r3, r3, #29
 80067e8:	69f9      	ldr	r1, [r7, #28]
 80067ea:	0148      	lsls	r0, r1, #5
 80067ec:	6a39      	ldr	r1, [r7, #32]
 80067ee:	4401      	add	r1, r0
 80067f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80067f4:	4313      	orrs	r3, r2
 80067f6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800680e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	78db      	ldrb	r3, [r3, #3]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681e:	613b      	str	r3, [r7, #16]
 8006820:	e003      	b.n	800682a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006828:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006830:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683e:	461a      	mov	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	e04e      	b.n	80068ec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	78db      	ldrb	r3, [r3, #3]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d149      	bne.n	80068ea <USB_HC_StartXfer+0x276>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d045      	beq.n	80068ea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	79db      	ldrb	r3, [r3, #7]
 8006862:	2b03      	cmp	r3, #3
 8006864:	d830      	bhi.n	80068c8 <USB_HC_StartXfer+0x254>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <USB_HC_StartXfer+0x1f8>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	0800687d 	.word	0x0800687d
 8006870:	080068a1 	.word	0x080068a1
 8006874:	0800687d 	.word	0x0800687d
 8006878:	080068a1 	.word	0x080068a1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	3303      	adds	r3, #3
 8006882:	089b      	lsrs	r3, r3, #2
 8006884:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006886:	8afa      	ldrh	r2, [r7, #22]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	b29b      	uxth	r3, r3
 800688e:	429a      	cmp	r2, r3
 8006890:	d91c      	bls.n	80068cc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f043 0220 	orr.w	r2, r3, #32
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	619a      	str	r2, [r3, #24]
        }
        break;
 800689e:	e015      	b.n	80068cc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	3303      	adds	r3, #3
 80068a6:	089b      	lsrs	r3, r3, #2
 80068a8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80068aa:	8afa      	ldrh	r2, [r7, #22]
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d90a      	bls.n	80068d0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80068c6:	e003      	b.n	80068d0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80068c8:	bf00      	nop
 80068ca:	e002      	b.n	80068d2 <USB_HC_StartXfer+0x25e>
        break;
 80068cc:	bf00      	nop
 80068ce:	e000      	b.n	80068d2 <USB_HC_StartXfer+0x25e>
        break;
 80068d0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	68d9      	ldr	r1, [r3, #12]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	785a      	ldrb	r2, [r3, #1]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2000      	movs	r0, #0
 80068e2:	9000      	str	r0, [sp, #0]
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff fb31 	bl	8005f4c <USB_WritePacket>
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3728      	adds	r7, #40	; 0x28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	1ff80000 	.word	0x1ff80000

080068f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	b29b      	uxth	r3, r3
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800691a:	b480      	push	{r7}
 800691c:	b089      	sub	sp, #36	; 0x24
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	0c9b      	lsrs	r3, r3, #18
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	4413      	add	r3, r2
 8006950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	0fdb      	lsrs	r3, r3, #31
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b20      	cmp	r3, #32
 8006968:	d104      	bne.n	8006974 <USB_HC_Halt+0x5a>
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	e0c8      	b.n	8006b06 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <USB_HC_Halt+0x66>
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d163      	bne.n	8006a48 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	4413      	add	r3, r2
 8006988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	440a      	add	r2, r1
 8006996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800699a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800699e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f040 80ab 	bne.w	8006b04 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d133      	bne.n	8006a22 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069d8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069f8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a06:	d81d      	bhi.n	8006a44 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1e:	d0ec      	beq.n	80069fa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a20:	e070      	b.n	8006b04 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a42:	e05f      	b.n	8006b04 <USB_HC_Halt+0x1ea>
            break;
 8006a44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a46:	e05d      	b.n	8006b04 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	69fa      	ldr	r2, [r7, #28]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d133      	bne.n	8006ae0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ab6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ac4:	d81d      	bhi.n	8006b02 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006adc:	d0ec      	beq.n	8006ab8 <USB_HC_Halt+0x19e>
 8006ade:	e011      	b.n	8006b04 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	0151      	lsls	r1, r2, #5
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	440a      	add	r2, r1
 8006af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	e000      	b.n	8006b04 <USB_HC_Halt+0x1ea>
          break;
 8006b02:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3724      	adds	r7, #36	; 0x24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	04da      	lsls	r2, r3, #19
 8006b30:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <USB_DoPing+0x74>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b72:	461a      	mov	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	1ff80000 	.word	0x1ff80000

08006b8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff f911 	bl	8005dc8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ba6:	2110      	movs	r1, #16
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff f96b 	bl	8005e84 <USB_FlushTxFifo>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff f997 	bl	8005eec <USB_FlushRxFifo>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	e01f      	b.n	8006c0e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006be4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bf4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c02:	461a      	mov	r2, r3
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b0f      	cmp	r3, #15
 8006c12:	d9dc      	bls.n	8006bce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c14:	2300      	movs	r3, #0
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	e034      	b.n	8006c84 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c30:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c40:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4e:	461a      	mov	r2, r3
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c60:	d80c      	bhi.n	8006c7c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c78:	d0ec      	beq.n	8006c54 <USB_StopHost+0xc8>
 8006c7a:	e000      	b.n	8006c7e <USB_StopHost+0xf2>
        break;
 8006c7c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	3301      	adds	r3, #1
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	2b0f      	cmp	r3, #15
 8006c88:	d9c7      	bls.n	8006c1a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c90:	461a      	mov	r2, r3
 8006c92:	f04f 33ff 	mov.w	r3, #4294967295
 8006c96:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff f880 	bl	8005da6 <USB_EnableGlobalInt>

  return ret;
 8006ca6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3720      	adds	r7, #32
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006cb0:	b590      	push	{r4, r7, lr}
 8006cb2:	b089      	sub	sp, #36	; 0x24
 8006cb4:	af04      	add	r7, sp, #16
 8006cb6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006cb8:	2301      	movs	r3, #1
 8006cba:	2202      	movs	r2, #2
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fc66 	bl	8007590 <USBH_FindInterface>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2bff      	cmp	r3, #255	; 0xff
 8006ccc:	d002      	beq.n	8006cd4 <USBH_CDC_InterfaceInit+0x24>
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d901      	bls.n	8006cd8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e13d      	b.n	8006f54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fc3b 	bl	8007558 <USBH_SelectInterface>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006cec:	2302      	movs	r3, #2
 8006cee:	e131      	b.n	8006f54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006cf6:	2050      	movs	r0, #80	; 0x50
 8006cf8:	f002 fafa 	bl	80092f0 <malloc>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d10:	2302      	movs	r3, #2
 8006d12:	e11f      	b.n	8006f54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d14:	2250      	movs	r2, #80	; 0x50
 8006d16:	2100      	movs	r1, #0
 8006d18:	68b8      	ldr	r0, [r7, #8]
 8006d1a:	f002 faf9 	bl	8009310 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	211a      	movs	r1, #26
 8006d24:	fb01 f303 	mul.w	r3, r1, r3
 8006d28:	4413      	add	r3, r2
 8006d2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	da15      	bge.n	8006d62 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	211a      	movs	r1, #26
 8006d3c:	fb01 f303 	mul.w	r3, r1, r3
 8006d40:	4413      	add	r3, r2
 8006d42:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d46:	781a      	ldrb	r2, [r3, #0]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	211a      	movs	r1, #26
 8006d52:	fb01 f303 	mul.w	r3, r1, r3
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d5c:	881a      	ldrh	r2, [r3, #0]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 ff2c 	bl	8008bc6 <USBH_AllocPipe>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	461a      	mov	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	7819      	ldrb	r1, [r3, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	7858      	ldrb	r0, [r3, #1]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	8952      	ldrh	r2, [r2, #10]
 8006d8e:	9202      	str	r2, [sp, #8]
 8006d90:	2203      	movs	r2, #3
 8006d92:	9201      	str	r2, [sp, #4]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4623      	mov	r3, r4
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fee4 	bl	8008b68 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2200      	movs	r2, #0
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f002 f9f3 	bl	8009194 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006dae:	2300      	movs	r3, #0
 8006db0:	2200      	movs	r2, #0
 8006db2:	210a      	movs	r1, #10
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fbeb 	bl	8007590 <USBH_FindInterface>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	2bff      	cmp	r3, #255	; 0xff
 8006dc2:	d002      	beq.n	8006dca <USBH_CDC_InterfaceInit+0x11a>
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d901      	bls.n	8006dce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e0c2      	b.n	8006f54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	211a      	movs	r1, #26
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
 8006dd8:	4413      	add	r3, r2
 8006dda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	b25b      	sxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	da16      	bge.n	8006e14 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	211a      	movs	r1, #26
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	4413      	add	r3, r2
 8006df2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006df6:	781a      	ldrb	r2, [r3, #0]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	211a      	movs	r1, #26
 8006e02:	fb01 f303 	mul.w	r3, r1, r3
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e0c:	881a      	ldrh	r2, [r3, #0]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	835a      	strh	r2, [r3, #26]
 8006e12:	e015      	b.n	8006e40 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	211a      	movs	r1, #26
 8006e1a:	fb01 f303 	mul.w	r3, r1, r3
 8006e1e:	4413      	add	r3, r2
 8006e20:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	211a      	movs	r1, #26
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e3a:	881a      	ldrh	r2, [r3, #0]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	211a      	movs	r1, #26
 8006e46:	fb01 f303 	mul.w	r3, r1, r3
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	b25b      	sxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	da16      	bge.n	8006e86 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	211a      	movs	r1, #26
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	211a      	movs	r1, #26
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e7e:	881a      	ldrh	r2, [r3, #0]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	835a      	strh	r2, [r3, #26]
 8006e84:	e015      	b.n	8006eb2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	211a      	movs	r1, #26
 8006e8c:	fb01 f303 	mul.w	r3, r1, r3
 8006e90:	4413      	add	r3, r2
 8006e92:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e96:	781a      	ldrb	r2, [r3, #0]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	211a      	movs	r1, #26
 8006ea2:	fb01 f303 	mul.w	r3, r1, r3
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006eac:	881a      	ldrh	r2, [r3, #0]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	7b9b      	ldrb	r3, [r3, #14]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fe84 	bl	8008bc6 <USBH_AllocPipe>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	7bdb      	ldrb	r3, [r3, #15]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 fe7a 	bl	8008bc6 <USBH_AllocPipe>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	7b59      	ldrb	r1, [r3, #13]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	7b98      	ldrb	r0, [r3, #14]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	8b12      	ldrh	r2, [r2, #24]
 8006ef2:	9202      	str	r2, [sp, #8]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	9201      	str	r2, [sp, #4]
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	4623      	mov	r3, r4
 8006efc:	4602      	mov	r2, r0
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f001 fe32 	bl	8008b68 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	7b19      	ldrb	r1, [r3, #12]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	7bd8      	ldrb	r0, [r3, #15]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	8b52      	ldrh	r2, [r2, #26]
 8006f1c:	9202      	str	r2, [sp, #8]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	9201      	str	r2, [sp, #4]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	4623      	mov	r3, r4
 8006f26:	4602      	mov	r2, r0
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 fe1d 	bl	8008b68 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	7b5b      	ldrb	r3, [r3, #13]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f002 f928 	bl	8009194 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	7b1b      	ldrb	r3, [r3, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f002 f921 	bl	8009194 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd90      	pop	{r4, r7, pc}

08006f5c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00e      	beq.n	8006f94 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fe12 	bl	8008ba6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fe3d 	bl	8008c08 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	7b1b      	ldrb	r3, [r3, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00e      	beq.n	8006fba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	7b1b      	ldrb	r3, [r3, #12]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fdff 	bl	8008ba6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	7b1b      	ldrb	r3, [r3, #12]
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 fe2a 	bl	8008c08 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	7b5b      	ldrb	r3, [r3, #13]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00e      	beq.n	8006fe0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	7b5b      	ldrb	r3, [r3, #13]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fdec 	bl	8008ba6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	7b5b      	ldrb	r3, [r3, #13]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 fe17 	bl	8008c08 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00b      	beq.n	8007004 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f002 f983 	bl	8009300 <free>
    phost->pActiveClass->pData = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007000:	2200      	movs	r2, #0
 8007002:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3340      	adds	r3, #64	; 0x40
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8b1 	bl	800718e <GetLineCoding>
 800702c:	4603      	mov	r3, r0
 800702e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007030:	7afb      	ldrb	r3, [r7, #11]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d105      	bne.n	8007042 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800703c:	2102      	movs	r1, #2
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007042:	7afb      	ldrb	r3, [r7, #11]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007054:	2301      	movs	r3, #1
 8007056:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800706c:	2b04      	cmp	r3, #4
 800706e:	d877      	bhi.n	8007160 <USBH_CDC_Process+0x114>
 8007070:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <USBH_CDC_Process+0x2c>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	0800708d 	.word	0x0800708d
 800707c:	08007093 	.word	0x08007093
 8007080:	080070c3 	.word	0x080070c3
 8007084:	08007137 	.word	0x08007137
 8007088:	08007145 	.word	0x08007145
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73fb      	strb	r3, [r7, #15]
      break;
 8007090:	e06d      	b.n	800716e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f897 	bl	80071cc <SetLineCoding>
 800709e:	4603      	mov	r3, r0
 80070a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070b0:	e058      	b.n	8007164 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d055      	beq.n	8007164 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2204      	movs	r2, #4
 80070bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80070c0:	e050      	b.n	8007164 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	3340      	adds	r3, #64	; 0x40
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f860 	bl	800718e <GetLineCoding>
 80070ce:	4603      	mov	r3, r0
 80070d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d126      	bne.n	8007126 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d13b      	bne.n	8007168 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d133      	bne.n	8007168 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800710c:	429a      	cmp	r2, r3
 800710e:	d12b      	bne.n	8007168 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007118:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800711a:	429a      	cmp	r2, r3
 800711c:	d124      	bne.n	8007168 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f958 	bl	80073d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007124:	e020      	b.n	8007168 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d01d      	beq.n	8007168 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2204      	movs	r2, #4
 8007130:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007134:	e018      	b.n	8007168 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f867 	bl	800720a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f8da 	bl	80072f6 <CDC_ProcessReception>
      break;
 8007142:	e014      	b.n	800716e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007144:	2100      	movs	r1, #0
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 ffef 	bl	800812a <USBH_ClrFeature>
 800714c:	4603      	mov	r3, r0
 800714e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800715e:	e005      	b.n	800716c <USBH_CDC_Process+0x120>

    default:
      break;
 8007160:	bf00      	nop
 8007162:	e004      	b.n	800716e <USBH_CDC_Process+0x122>
      break;
 8007164:	bf00      	nop
 8007166:	e002      	b.n	800716e <USBH_CDC_Process+0x122>
      break;
 8007168:	bf00      	nop
 800716a:	e000      	b.n	800716e <USBH_CDC_Process+0x122>
      break;
 800716c:	bf00      	nop

  }

  return status;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	22a1      	movs	r2, #161	; 0xa1
 800719c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2221      	movs	r2, #33	; 0x21
 80071a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2207      	movs	r2, #7
 80071b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2207      	movs	r2, #7
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fa81 	bl	80086c4 <USBH_CtlReq>
 80071c2:	4603      	mov	r3, r0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2221      	movs	r2, #33	; 0x21
 80071da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2207      	movs	r2, #7
 80071f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2207      	movs	r2, #7
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 fa62 	bl	80086c4 <USBH_CtlReq>
 8007200:	4603      	mov	r3, r0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af02      	add	r7, sp, #8
 8007210:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800721c:	2300      	movs	r3, #0
 800721e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007226:	2b01      	cmp	r3, #1
 8007228:	d002      	beq.n	8007230 <CDC_ProcessTransmission+0x26>
 800722a:	2b02      	cmp	r3, #2
 800722c:	d023      	beq.n	8007276 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800722e:	e05e      	b.n	80072ee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	8b12      	ldrh	r2, [r2, #24]
 8007238:	4293      	cmp	r3, r2
 800723a:	d90b      	bls.n	8007254 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	69d9      	ldr	r1, [r3, #28]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8b1a      	ldrh	r2, [r3, #24]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	7b5b      	ldrb	r3, [r3, #13]
 8007248:	2001      	movs	r0, #1
 800724a:	9000      	str	r0, [sp, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 fc48 	bl	8008ae2 <USBH_BulkSendData>
 8007252:	e00b      	b.n	800726c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	7b5b      	ldrb	r3, [r3, #13]
 8007262:	2001      	movs	r0, #1
 8007264:	9000      	str	r0, [sp, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 fc3b 	bl	8008ae2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007274:	e03b      	b.n	80072ee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	7b5b      	ldrb	r3, [r3, #13]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 ff5f 	bl	8009140 <USBH_LL_GetURBState>
 8007282:	4603      	mov	r3, r0
 8007284:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d128      	bne.n	80072de <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	8b12      	ldrh	r2, [r2, #24]
 8007294:	4293      	cmp	r3, r2
 8007296:	d90e      	bls.n	80072b6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	8b12      	ldrh	r2, [r2, #24]
 80072a0:	1a9a      	subs	r2, r3, r2
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	8b12      	ldrh	r2, [r2, #24]
 80072ae:	441a      	add	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	61da      	str	r2, [r3, #28]
 80072b4:	e002      	b.n	80072bc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072cc:	e00e      	b.n	80072ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f868 	bl	80073ac <USBH_CDC_TransmitCallback>
      break;
 80072dc:	e006      	b.n	80072ec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80072de:	7afb      	ldrb	r3, [r7, #11]
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d103      	bne.n	80072ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072ec:	bf00      	nop
  }
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b086      	sub	sp, #24
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007308:	2300      	movs	r3, #0
 800730a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007312:	2b03      	cmp	r3, #3
 8007314:	d002      	beq.n	800731c <CDC_ProcessReception+0x26>
 8007316:	2b04      	cmp	r3, #4
 8007318:	d00e      	beq.n	8007338 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800731a:	e043      	b.n	80073a4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	6a19      	ldr	r1, [r3, #32]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	8b5a      	ldrh	r2, [r3, #26]
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	7b1b      	ldrb	r3, [r3, #12]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 fbff 	bl	8008b2c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2204      	movs	r2, #4
 8007332:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007336:	e035      	b.n	80073a4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	7b1b      	ldrb	r3, [r3, #12]
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 fefe 	bl	8009140 <USBH_LL_GetURBState>
 8007344:	4603      	mov	r3, r0
 8007346:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007348:	7cfb      	ldrb	r3, [r7, #19]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d129      	bne.n	80073a2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	7b1b      	ldrb	r3, [r3, #12]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 fe61 	bl	800901c <USBH_LL_GetLastXferSize>
 800735a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	429a      	cmp	r2, r3
 8007364:	d016      	beq.n	8007394 <CDC_ProcessReception+0x9e>
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	8b5b      	ldrh	r3, [r3, #26]
 800736a:	461a      	mov	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4293      	cmp	r3, r2
 8007370:	d910      	bls.n	8007394 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1ad2      	subs	r2, r2, r3
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	441a      	add	r2, r3
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2203      	movs	r2, #3
 800738e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007392:	e006      	b.n	80073a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f80f 	bl	80073c0 <USBH_CDC_ReceiveCallback>
      break;
 80073a2:	bf00      	nop
  }
}
 80073a4:	bf00      	nop
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	4613      	mov	r3, r2
 80073f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80073fc:	2302      	movs	r3, #2
 80073fe:	e029      	b.n	8007454 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	79fa      	ldrb	r2, [r7, #7]
 8007404:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 f81f 	bl	800745c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f001 fd31 	bl	8008eb4 <USBH_LL_Init>

  return USBH_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007468:	2300      	movs	r3, #0
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e009      	b.n	8007482 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	33e0      	adds	r3, #224	; 0xe0
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	2200      	movs	r2, #0
 800747a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b0f      	cmp	r3, #15
 8007486:	d9f2      	bls.n	800746e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e009      	b.n	80074a2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3301      	adds	r3, #1
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a8:	d3f1      	bcc.n	800748e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2240      	movs	r2, #64	; 0x40
 80074ce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d016      	beq.n	8007546 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10e      	bne.n	8007540 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007528:	1c59      	adds	r1, r3, #1
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	33de      	adds	r3, #222	; 0xde
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
 800753e:	e004      	b.n	800754a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007540:	2302      	movs	r3, #2
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	e001      	b.n	800754a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007546:	2302      	movs	r3, #2
 8007548:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800756e:	78fa      	ldrb	r2, [r7, #3]
 8007570:	429a      	cmp	r2, r3
 8007572:	d204      	bcs.n	800757e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800757c:	e001      	b.n	8007582 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800757e:	2302      	movs	r3, #2
 8007580:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	4608      	mov	r0, r1
 800759a:	4611      	mov	r1, r2
 800759c:	461a      	mov	r2, r3
 800759e:	4603      	mov	r3, r0
 80075a0:	70fb      	strb	r3, [r7, #3]
 80075a2:	460b      	mov	r3, r1
 80075a4:	70bb      	strb	r3, [r7, #2]
 80075a6:	4613      	mov	r3, r2
 80075a8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80075b8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075ba:	e025      	b.n	8007608 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	221a      	movs	r2, #26
 80075c0:	fb02 f303 	mul.w	r3, r2, r3
 80075c4:	3308      	adds	r3, #8
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4413      	add	r3, r2
 80075ca:	3302      	adds	r3, #2
 80075cc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	795b      	ldrb	r3, [r3, #5]
 80075d2:	78fa      	ldrb	r2, [r7, #3]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d002      	beq.n	80075de <USBH_FindInterface+0x4e>
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	2bff      	cmp	r3, #255	; 0xff
 80075dc:	d111      	bne.n	8007602 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80075e2:	78ba      	ldrb	r2, [r7, #2]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d002      	beq.n	80075ee <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075e8:	78bb      	ldrb	r3, [r7, #2]
 80075ea:	2bff      	cmp	r3, #255	; 0xff
 80075ec:	d109      	bne.n	8007602 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075f2:	787a      	ldrb	r2, [r7, #1]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d002      	beq.n	80075fe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075f8:	787b      	ldrb	r3, [r7, #1]
 80075fa:	2bff      	cmp	r3, #255	; 0xff
 80075fc:	d101      	bne.n	8007602 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	e006      	b.n	8007610 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	3301      	adds	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d9d6      	bls.n	80075bc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800760e:	23ff      	movs	r3, #255	; 0xff
}
 8007610:	4618      	mov	r0, r3
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 fc81 	bl	8008f2c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800762a:	2101      	movs	r1, #1
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 fd9a 	bl	8009166 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af04      	add	r7, sp, #16
 8007642:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007644:	2302      	movs	r3, #2
 8007646:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d102      	bne.n	800765e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2203      	movs	r2, #3
 800765c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b0b      	cmp	r3, #11
 8007666:	f200 81be 	bhi.w	80079e6 <USBH_Process+0x3aa>
 800766a:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <USBH_Process+0x34>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	080076a1 	.word	0x080076a1
 8007674:	080076d3 	.word	0x080076d3
 8007678:	0800773b 	.word	0x0800773b
 800767c:	08007981 	.word	0x08007981
 8007680:	080079e7 	.word	0x080079e7
 8007684:	080077df 	.word	0x080077df
 8007688:	08007927 	.word	0x08007927
 800768c:	08007815 	.word	0x08007815
 8007690:	08007835 	.word	0x08007835
 8007694:	08007855 	.word	0x08007855
 8007698:	08007899 	.word	0x08007899
 800769c:	08007969 	.word	0x08007969
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 819e 	beq.w	80079ea <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80076b4:	20c8      	movs	r0, #200	; 0xc8
 80076b6:	f001 fd9d 	bl	80091f4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 fc93 	bl	8008fe6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076d0:	e18b      	b.n	80079ea <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d107      	bne.n	80076ec <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076ea:	e18d      	b.n	8007a08 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076f6:	d914      	bls.n	8007722 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076fe:	3301      	adds	r3, #1
 8007700:	b2da      	uxtb	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800770e:	2b03      	cmp	r3, #3
 8007710:	d903      	bls.n	800771a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	220d      	movs	r2, #13
 8007716:	701a      	strb	r2, [r3, #0]
      break;
 8007718:	e176      	b.n	8007a08 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	701a      	strb	r2, [r3, #0]
      break;
 8007720:	e172      	b.n	8007a08 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007728:	f103 020a 	add.w	r2, r3, #10
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007732:	200a      	movs	r0, #10
 8007734:	f001 fd5e 	bl	80091f4 <USBH_Delay>
      break;
 8007738:	e166      	b.n	8007a08 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800774a:	2104      	movs	r1, #4
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007750:	2064      	movs	r0, #100	; 0x64
 8007752:	f001 fd4f 	bl	80091f4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fc1e 	bl	8008f98 <USBH_LL_GetSpeed>
 800775c:	4603      	mov	r3, r0
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2205      	movs	r2, #5
 800776a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800776c:	2100      	movs	r1, #0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fa29 	bl	8008bc6 <USBH_AllocPipe>
 8007774:	4603      	mov	r3, r0
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800777c:	2180      	movs	r1, #128	; 0x80
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fa21 	bl	8008bc6 <USBH_AllocPipe>
 8007784:	4603      	mov	r3, r0
 8007786:	461a      	mov	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	7919      	ldrb	r1, [r3, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077a0:	b292      	uxth	r2, r2
 80077a2:	9202      	str	r2, [sp, #8]
 80077a4:	2200      	movs	r2, #0
 80077a6:	9201      	str	r2, [sp, #4]
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	4603      	mov	r3, r0
 80077ac:	2280      	movs	r2, #128	; 0x80
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f001 f9da 	bl	8008b68 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	7959      	ldrb	r1, [r3, #5]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80077c8:	b292      	uxth	r2, r2
 80077ca:	9202      	str	r2, [sp, #8]
 80077cc:	2200      	movs	r2, #0
 80077ce:	9201      	str	r2, [sp, #4]
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	4603      	mov	r3, r0
 80077d4:	2200      	movs	r2, #0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 f9c6 	bl	8008b68 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077dc:	e114      	b.n	8007a08 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f918 	bl	8007a14 <USBH_HandleEnum>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f040 80fe 	bne.w	80079ee <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007800:	2b01      	cmp	r3, #1
 8007802:	d103      	bne.n	800780c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2208      	movs	r2, #8
 8007808:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800780a:	e0f0      	b.n	80079ee <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2207      	movs	r2, #7
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e0ec      	b.n	80079ee <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80e9 	beq.w	80079f2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007826:	2101      	movs	r1, #1
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2208      	movs	r2, #8
 8007830:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007832:	e0de      	b.n	80079f2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800783a:	b29b      	uxth	r3, r3
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fc2c 	bl	800809c <USBH_SetCfg>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	f040 80d5 	bne.w	80079f6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2209      	movs	r2, #9
 8007850:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007852:	e0d0      	b.n	80079f6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b00      	cmp	r3, #0
 8007860:	d016      	beq.n	8007890 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007862:	2101      	movs	r1, #1
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fc3c 	bl	80080e2 <USBH_SetFeature>
 800786a:	4603      	mov	r3, r0
 800786c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d103      	bne.n	800787e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	220a      	movs	r2, #10
 800787a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800787c:	e0bd      	b.n	80079fa <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b03      	cmp	r3, #3
 8007884:	f040 80b9 	bne.w	80079fa <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	220a      	movs	r2, #10
 800788c:	701a      	strb	r2, [r3, #0]
      break;
 800788e:	e0b4      	b.n	80079fa <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	220a      	movs	r2, #10
 8007894:	701a      	strb	r2, [r3, #0]
      break;
 8007896:	e0b0      	b.n	80079fa <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 80ad 	beq.w	80079fe <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]
 80078b0:	e016      	b.n	80078e0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80078b2:	7bfa      	ldrb	r2, [r7, #15]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	32de      	adds	r2, #222	; 0xde
 80078b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078bc:	791a      	ldrb	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d108      	bne.n	80078da <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80078c8:	7bfa      	ldrb	r2, [r7, #15]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	32de      	adds	r2, #222	; 0xde
 80078ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80078d8:	e005      	b.n	80078e6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	3301      	adds	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0e5      	beq.n	80078b2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d016      	beq.n	800791e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	4798      	blx	r3
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2206      	movs	r2, #6
 8007906:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800790e:	2103      	movs	r1, #3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007914:	e073      	b.n	80079fe <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	220d      	movs	r2, #13
 800791a:	701a      	strb	r2, [r3, #0]
      break;
 800791c:	e06f      	b.n	80079fe <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	220d      	movs	r2, #13
 8007922:	701a      	strb	r2, [r3, #0]
      break;
 8007924:	e06b      	b.n	80079fe <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d017      	beq.n	8007960 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	4798      	blx	r3
 800793c:	4603      	mov	r3, r0
 800793e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d103      	bne.n	8007950 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	220b      	movs	r2, #11
 800794c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800794e:	e058      	b.n	8007a02 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d154      	bne.n	8007a02 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	220d      	movs	r2, #13
 800795c:	701a      	strb	r2, [r3, #0]
      break;
 800795e:	e050      	b.n	8007a02 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	220d      	movs	r2, #13
 8007964:	701a      	strb	r2, [r3, #0]
      break;
 8007966:	e04c      	b.n	8007a02 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d049      	beq.n	8007a06 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	4798      	blx	r3
      }
      break;
 800797e:	e042      	b.n	8007a06 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff fd67 	bl	800745c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d005      	beq.n	80079c2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079bc:	2105      	movs	r1, #5
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d107      	bne.n	80079de <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff fe20 	bl	800761c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079dc:	e014      	b.n	8007a08 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 faa4 	bl	8008f2c <USBH_LL_Start>
      break;
 80079e4:	e010      	b.n	8007a08 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80079e6:	bf00      	nop
 80079e8:	e00e      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 80079ea:	bf00      	nop
 80079ec:	e00c      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 80079ee:	bf00      	nop
 80079f0:	e00a      	b.n	8007a08 <USBH_Process+0x3cc>
    break;
 80079f2:	bf00      	nop
 80079f4:	e008      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 80079f6:	bf00      	nop
 80079f8:	e006      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 80079fa:	bf00      	nop
 80079fc:	e004      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 80079fe:	bf00      	nop
 8007a00:	e002      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 8007a02:	bf00      	nop
 8007a04:	e000      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 8007a06:	bf00      	nop
  }
  return USBH_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop

08007a14 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af04      	add	r7, sp, #16
 8007a1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007a20:	2301      	movs	r3, #1
 8007a22:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b07      	cmp	r3, #7
 8007a2a:	f200 81c1 	bhi.w	8007db0 <USBH_HandleEnum+0x39c>
 8007a2e:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <USBH_HandleEnum+0x20>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a55 	.word	0x08007a55
 8007a38:	08007b13 	.word	0x08007b13
 8007a3c:	08007b7d 	.word	0x08007b7d
 8007a40:	08007c0b 	.word	0x08007c0b
 8007a44:	08007c75 	.word	0x08007c75
 8007a48:	08007ce5 	.word	0x08007ce5
 8007a4c:	08007d2b 	.word	0x08007d2b
 8007a50:	08007d71 	.word	0x08007d71
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a54:	2108      	movs	r1, #8
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa50 	bl	8007efc <USBH_Get_DevDesc>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d130      	bne.n	8007ac8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	7919      	ldrb	r1, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a8a:	b292      	uxth	r2, r2
 8007a8c:	9202      	str	r2, [sp, #8]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	9201      	str	r2, [sp, #4]
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4603      	mov	r3, r0
 8007a96:	2280      	movs	r2, #128	; 0x80
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f865 	bl	8008b68 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	7959      	ldrb	r1, [r3, #5]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ab2:	b292      	uxth	r2, r2
 8007ab4:	9202      	str	r2, [sp, #8]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	9201      	str	r2, [sp, #4]
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	4603      	mov	r3, r0
 8007abe:	2200      	movs	r2, #0
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f851 	bl	8008b68 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ac6:	e175      	b.n	8007db4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	f040 8172 	bne.w	8007db4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d903      	bls.n	8007af2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	220d      	movs	r2, #13
 8007aee:	701a      	strb	r2, [r3, #0]
      break;
 8007af0:	e160      	b.n	8007db4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	795b      	ldrb	r3, [r3, #5]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f885 	bl	8008c08 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	791b      	ldrb	r3, [r3, #4]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 f87f 	bl	8008c08 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]
      break;
 8007b10:	e150      	b.n	8007db4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007b12:	2112      	movs	r1, #18
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f9f1 	bl	8007efc <USBH_Get_DevDesc>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d103      	bne.n	8007b2c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b2a:	e145      	b.n	8007db8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	f040 8142 	bne.w	8007db8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d903      	bls.n	8007b56 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	220d      	movs	r2, #13
 8007b52:	701a      	strb	r2, [r3, #0]
      break;
 8007b54:	e130      	b.n	8007db8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	795b      	ldrb	r3, [r3, #5]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f853 	bl	8008c08 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	791b      	ldrb	r3, [r3, #4]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f84d 	bl	8008c08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]
      break;
 8007b7a:	e11d      	b.n	8007db8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa68 	bl	8008054 <USBH_SetAddress>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d132      	bne.n	8007bf4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007b8e:	2002      	movs	r0, #2
 8007b90:	f001 fb30 	bl	80091f4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2203      	movs	r2, #3
 8007ba0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	7919      	ldrb	r1, [r3, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007bb6:	b292      	uxth	r2, r2
 8007bb8:	9202      	str	r2, [sp, #8]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	9201      	str	r2, [sp, #4]
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2280      	movs	r2, #128	; 0x80
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 ffcf 	bl	8008b68 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7959      	ldrb	r1, [r3, #5]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bde:	b292      	uxth	r2, r2
 8007be0:	9202      	str	r2, [sp, #8]
 8007be2:	2200      	movs	r2, #0
 8007be4:	9201      	str	r2, [sp, #4]
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	4603      	mov	r3, r0
 8007bea:	2200      	movs	r2, #0
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 ffbb 	bl	8008b68 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007bf2:	e0e3      	b.n	8007dbc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	f040 80e0 	bne.w	8007dbc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	220d      	movs	r2, #13
 8007c00:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	705a      	strb	r2, [r3, #1]
      break;
 8007c08:	e0d8      	b.n	8007dbc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c0a:	2109      	movs	r1, #9
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f99d 	bl	8007f4c <USBH_Get_CfgDesc>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d103      	bne.n	8007c24 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c22:	e0cd      	b.n	8007dc0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	f040 80ca 	bne.w	8007dc0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c32:	3301      	adds	r3, #1
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d903      	bls.n	8007c4e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	220d      	movs	r2, #13
 8007c4a:	701a      	strb	r2, [r3, #0]
      break;
 8007c4c:	e0b8      	b.n	8007dc0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	795b      	ldrb	r3, [r3, #5]
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 ffd7 	bl	8008c08 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	791b      	ldrb	r3, [r3, #4]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 ffd1 	bl	8008c08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	701a      	strb	r2, [r3, #0]
      break;
 8007c72:	e0a5      	b.n	8007dc0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f965 	bl	8007f4c <USBH_Get_CfgDesc>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d103      	bne.n	8007c94 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2205      	movs	r2, #5
 8007c90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c92:	e097      	b.n	8007dc4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	f040 8094 	bne.w	8007dc4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d903      	bls.n	8007cbe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	220d      	movs	r2, #13
 8007cba:	701a      	strb	r2, [r3, #0]
      break;
 8007cbc:	e082      	b.n	8007dc4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	795b      	ldrb	r3, [r3, #5]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 ff9f 	bl	8008c08 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	791b      	ldrb	r3, [r3, #4]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 ff99 	bl	8008c08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	701a      	strb	r2, [r3, #0]
      break;
 8007ce2:	e06f      	b.n	8007dc4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d019      	beq.n	8007d22 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007cfa:	23ff      	movs	r3, #255	; 0xff
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f949 	bl	8007f94 <USBH_Get_StringDesc>
 8007d02:	4603      	mov	r3, r0
 8007d04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d103      	bne.n	8007d14 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2206      	movs	r2, #6
 8007d10:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d12:	e059      	b.n	8007dc8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d156      	bne.n	8007dc8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2206      	movs	r2, #6
 8007d1e:	705a      	strb	r2, [r3, #1]
      break;
 8007d20:	e052      	b.n	8007dc8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2206      	movs	r2, #6
 8007d26:	705a      	strb	r2, [r3, #1]
      break;
 8007d28:	e04e      	b.n	8007dc8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d019      	beq.n	8007d68 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d40:	23ff      	movs	r3, #255	; 0xff
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f926 	bl	8007f94 <USBH_Get_StringDesc>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d103      	bne.n	8007d5a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2207      	movs	r2, #7
 8007d56:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d58:	e038      	b.n	8007dcc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d135      	bne.n	8007dcc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2207      	movs	r2, #7
 8007d64:	705a      	strb	r2, [r3, #1]
      break;
 8007d66:	e031      	b.n	8007dcc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2207      	movs	r2, #7
 8007d6c:	705a      	strb	r2, [r3, #1]
      break;
 8007d6e:	e02d      	b.n	8007dcc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d017      	beq.n	8007daa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d86:	23ff      	movs	r3, #255	; 0xff
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f903 	bl	8007f94 <USBH_Get_StringDesc>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d102      	bne.n	8007d9e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d9c:	e018      	b.n	8007dd0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d115      	bne.n	8007dd0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
      break;
 8007da8:	e012      	b.n	8007dd0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	73fb      	strb	r3, [r7, #15]
      break;
 8007dae:	e00f      	b.n	8007dd0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007db0:	bf00      	nop
 8007db2:	e00e      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007db4:	bf00      	nop
 8007db6:	e00c      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007db8:	bf00      	nop
 8007dba:	e00a      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dbc:	bf00      	nop
 8007dbe:	e008      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dc0:	bf00      	nop
 8007dc2:	e006      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dc4:	bf00      	nop
 8007dc6:	e004      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dc8:	bf00      	nop
 8007dca:	e002      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dcc:	bf00      	nop
 8007dce:	e000      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dd0:	bf00      	nop
  }
  return Status;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f804 	bl	8007e1e <USBH_HandleSof>
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b0b      	cmp	r3, #11
 8007e2e:	d10a      	bne.n	8007e46 <USBH_HandleSof+0x28>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	4798      	blx	r3
  }
}
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007e5e:	bf00      	nop
}
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007e7a:	bf00      	nop
}
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f844 	bl	8008f62 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	791b      	ldrb	r3, [r3, #4]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fe91 	bl	8008c08 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	795b      	ldrb	r3, [r3, #5]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fe8b 	bl	8008c08 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007f0e:	78fb      	ldrb	r3, [r7, #3]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	4613      	mov	r3, r2
 8007f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f864 	bl	8007fea <USBH_GetDescriptor>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	b292      	uxth	r2, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f000 f918 	bl	8008172 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	331c      	adds	r3, #28
 8007f5c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f5e:	887b      	ldrh	r3, [r7, #2]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f68:	2100      	movs	r1, #0
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f83d 	bl	8007fea <USBH_GetDescriptor>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d107      	bne.n	8007f8a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007f7a:	887b      	ldrh	r3, [r7, #2]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f987 	bl	8008294 <USBH_ParseCfgDesc>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	607a      	str	r2, [r7, #4]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	72fb      	strb	r3, [r7, #11]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007fa8:	7afb      	ldrb	r3, [r7, #11]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007fb0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007fb8:	893b      	ldrh	r3, [r7, #8]
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f812 	bl	8007fea <USBH_GetDescriptor>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d107      	bne.n	8007fe0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fd6:	893a      	ldrh	r2, [r7, #8]
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fb24 	bl	8008628 <USBH_ParseStringDesc>
  }

  return status;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	607b      	str	r3, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	72fb      	strb	r3, [r7, #11]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	789b      	ldrb	r3, [r3, #2]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d11c      	bne.n	800803e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008004:	7afb      	ldrb	r3, [r7, #11]
 8008006:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800800a:	b2da      	uxtb	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2206      	movs	r2, #6
 8008014:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	893a      	ldrh	r2, [r7, #8]
 800801a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800801c:	893b      	ldrh	r3, [r7, #8]
 800801e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008026:	d104      	bne.n	8008032 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f240 4209 	movw	r2, #1033	; 0x409
 800802e:	829a      	strh	r2, [r3, #20]
 8008030:	e002      	b.n	8008038 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8b3a      	ldrh	r2, [r7, #24]
 800803c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800803e:	8b3b      	ldrh	r3, [r7, #24]
 8008040:	461a      	mov	r2, r3
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 fb3d 	bl	80086c4 <USBH_CtlReq>
 800804a:	4603      	mov	r3, r0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	789b      	ldrb	r3, [r3, #2]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d10f      	bne.n	8008088 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2205      	movs	r2, #5
 8008072:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	b29a      	uxth	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008088:	2200      	movs	r2, #0
 800808a:	2100      	movs	r1, #0
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fb19 	bl	80086c4 <USBH_CtlReq>
 8008092:	4603      	mov	r3, r0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	789b      	ldrb	r3, [r3, #2]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d10e      	bne.n	80080ce <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2209      	movs	r2, #9
 80080ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	887a      	ldrh	r2, [r7, #2]
 80080c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080ce:	2200      	movs	r2, #0
 80080d0:	2100      	movs	r1, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 faf6 	bl	80086c4 <USBH_CtlReq>
 80080d8:	4603      	mov	r3, r0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	789b      	ldrb	r3, [r3, #2]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d10f      	bne.n	8008116 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2203      	movs	r2, #3
 8008100:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008116:	2200      	movs	r2, #0
 8008118:	2100      	movs	r1, #0
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fad2 	bl	80086c4 <USBH_CtlReq>
 8008120:	4603      	mov	r3, r0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	789b      	ldrb	r3, [r3, #2]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d10f      	bne.n	800815e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2202      	movs	r2, #2
 8008142:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	b29a      	uxth	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800815e:	2200      	movs	r2, #0
 8008160:	2100      	movs	r1, #0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 faae 	bl	80086c4 <USBH_CtlReq>
 8008168:	4603      	mov	r3, r0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008172:	b480      	push	{r7}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	4613      	mov	r3, r2
 800817e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	781a      	ldrb	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	785a      	ldrb	r2, [r3, #1]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	3302      	adds	r3, #2
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	b29a      	uxth	r2, r3
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	3303      	adds	r3, #3
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	4313      	orrs	r3, r2
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	791a      	ldrb	r2, [r3, #4]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	795a      	ldrb	r2, [r3, #5]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	799a      	ldrb	r2, [r3, #6]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	79da      	ldrb	r2, [r3, #7]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	79db      	ldrb	r3, [r3, #7]
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	dc11      	bgt.n	80081f8 <USBH_ParseDevDesc+0x86>
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	db16      	blt.n	8008206 <USBH_ParseDevDesc+0x94>
 80081d8:	3b08      	subs	r3, #8
 80081da:	2201      	movs	r2, #1
 80081dc:	fa02 f303 	lsl.w	r3, r2, r3
 80081e0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80081e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	bf14      	ite	ne
 80081ec:	2301      	movne	r3, #1
 80081ee:	2300      	moveq	r3, #0
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d102      	bne.n	80081fc <USBH_ParseDevDesc+0x8a>
 80081f6:	e006      	b.n	8008206 <USBH_ParseDevDesc+0x94>
 80081f8:	2b40      	cmp	r3, #64	; 0x40
 80081fa:	d104      	bne.n	8008206 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	79da      	ldrb	r2, [r3, #7]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	71da      	strb	r2, [r3, #7]
      break;
 8008204:	e003      	b.n	800820e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2240      	movs	r2, #64	; 0x40
 800820a:	71da      	strb	r2, [r3, #7]
      break;
 800820c:	bf00      	nop
  }

  if (length > 8U)
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	2b08      	cmp	r3, #8
 8008212:	d939      	bls.n	8008288 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	3308      	adds	r3, #8
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	b29a      	uxth	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	3309      	adds	r3, #9
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	021b      	lsls	r3, r3, #8
 8008226:	b29b      	uxth	r3, r3
 8008228:	4313      	orrs	r3, r2
 800822a:	b29a      	uxth	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	330a      	adds	r3, #10
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	b29a      	uxth	r2, r3
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	330b      	adds	r3, #11
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	b29b      	uxth	r3, r3
 8008244:	4313      	orrs	r3, r2
 8008246:	b29a      	uxth	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	330c      	adds	r3, #12
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b29a      	uxth	r2, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	330d      	adds	r3, #13
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	b29b      	uxth	r3, r3
 8008260:	4313      	orrs	r3, r2
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	7b9a      	ldrb	r2, [r3, #14]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	7bda      	ldrb	r2, [r3, #15]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	7c1a      	ldrb	r2, [r3, #16]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	7c5a      	ldrb	r2, [r3, #17]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	745a      	strb	r2, [r3, #17]
  }
}
 8008288:	bf00      	nop
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08c      	sub	sp, #48	; 0x30
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80082a8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	781a      	ldrb	r2, [r3, #0]
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	785a      	ldrb	r2, [r3, #1]
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	3302      	adds	r3, #2
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	b29a      	uxth	r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	3303      	adds	r3, #3
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	4313      	orrs	r3, r2
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f0:	bf28      	it	cs
 80082f2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	791a      	ldrb	r2, [r3, #4]
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	795a      	ldrb	r2, [r3, #5]
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	799a      	ldrb	r2, [r3, #6]
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	79da      	ldrb	r2, [r3, #7]
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	7a1a      	ldrb	r2, [r3, #8]
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b09      	cmp	r3, #9
 800832a:	d002      	beq.n	8008332 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	2209      	movs	r2, #9
 8008330:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008332:	88fb      	ldrh	r3, [r7, #6]
 8008334:	2b09      	cmp	r3, #9
 8008336:	f240 809d 	bls.w	8008474 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800833a:	2309      	movs	r3, #9
 800833c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008342:	e081      	b.n	8008448 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008344:	f107 0316 	add.w	r3, r7, #22
 8008348:	4619      	mov	r1, r3
 800834a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834c:	f000 f99f 	bl	800868e <USBH_GetNextDesc>
 8008350:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	2b04      	cmp	r3, #4
 8008358:	d176      	bne.n	8008448 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b09      	cmp	r3, #9
 8008360:	d002      	beq.n	8008368 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	2209      	movs	r2, #9
 8008366:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800836c:	221a      	movs	r2, #26
 800836e:	fb02 f303 	mul.w	r3, r2, r3
 8008372:	3308      	adds	r3, #8
 8008374:	6a3a      	ldr	r2, [r7, #32]
 8008376:	4413      	add	r3, r2
 8008378:	3302      	adds	r3, #2
 800837a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800837c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800837e:	69f8      	ldr	r0, [r7, #28]
 8008380:	f000 f87e 	bl	8008480 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800838e:	e043      	b.n	8008418 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008390:	f107 0316 	add.w	r3, r7, #22
 8008394:	4619      	mov	r1, r3
 8008396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008398:	f000 f979 	bl	800868e <USBH_GetNextDesc>
 800839c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	2b05      	cmp	r3, #5
 80083a4:	d138      	bne.n	8008418 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	795b      	ldrb	r3, [r3, #5]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d10f      	bne.n	80083ce <USBH_ParseCfgDesc+0x13a>
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	799b      	ldrb	r3, [r3, #6]
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d10b      	bne.n	80083ce <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	79db      	ldrb	r3, [r3, #7]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10f      	bne.n	80083de <USBH_ParseCfgDesc+0x14a>
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b09      	cmp	r3, #9
 80083c4:	d00b      	beq.n	80083de <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	2209      	movs	r2, #9
 80083ca:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083cc:	e007      	b.n	80083de <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b07      	cmp	r3, #7
 80083d4:	d004      	beq.n	80083e0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	2207      	movs	r2, #7
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	e000      	b.n	80083e0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083de:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80083e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80083e8:	3201      	adds	r2, #1
 80083ea:	00d2      	lsls	r2, r2, #3
 80083ec:	211a      	movs	r1, #26
 80083ee:	fb01 f303 	mul.w	r3, r1, r3
 80083f2:	4413      	add	r3, r2
 80083f4:	3308      	adds	r3, #8
 80083f6:	6a3a      	ldr	r2, [r7, #32]
 80083f8:	4413      	add	r3, r2
 80083fa:	3304      	adds	r3, #4
 80083fc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80083fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008400:	69b9      	ldr	r1, [r7, #24]
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 f86b 	bl	80084de <USBH_ParseEPDesc>
 8008408:	4603      	mov	r3, r0
 800840a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800840e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008412:	3301      	adds	r3, #1
 8008414:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	791b      	ldrb	r3, [r3, #4]
 800841c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008420:	429a      	cmp	r2, r3
 8008422:	d204      	bcs.n	800842e <USBH_ParseCfgDesc+0x19a>
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	885a      	ldrh	r2, [r3, #2]
 8008428:	8afb      	ldrh	r3, [r7, #22]
 800842a:	429a      	cmp	r2, r3
 800842c:	d8b0      	bhi.n	8008390 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	791b      	ldrb	r3, [r3, #4]
 8008432:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008436:	429a      	cmp	r2, r3
 8008438:	d201      	bcs.n	800843e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800843a:	2303      	movs	r3, #3
 800843c:	e01c      	b.n	8008478 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800843e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008442:	3301      	adds	r3, #1
 8008444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800844c:	2b01      	cmp	r3, #1
 800844e:	d805      	bhi.n	800845c <USBH_ParseCfgDesc+0x1c8>
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	885a      	ldrh	r2, [r3, #2]
 8008454:	8afb      	ldrh	r3, [r7, #22]
 8008456:	429a      	cmp	r2, r3
 8008458:	f63f af74 	bhi.w	8008344 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	791b      	ldrb	r3, [r3, #4]
 8008460:	2b02      	cmp	r3, #2
 8008462:	bf28      	it	cs
 8008464:	2302      	movcs	r3, #2
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800846c:	429a      	cmp	r2, r3
 800846e:	d201      	bcs.n	8008474 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008470:	2303      	movs	r3, #3
 8008472:	e001      	b.n	8008478 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008478:	4618      	mov	r0, r3
 800847a:	3730      	adds	r7, #48	; 0x30
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781a      	ldrb	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	785a      	ldrb	r2, [r3, #1]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	789a      	ldrb	r2, [r3, #2]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	78da      	ldrb	r2, [r3, #3]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	791a      	ldrb	r2, [r3, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	795a      	ldrb	r2, [r3, #5]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	799a      	ldrb	r2, [r3, #6]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	79da      	ldrb	r2, [r3, #7]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	7a1a      	ldrb	r2, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	721a      	strb	r2, [r3, #8]
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80084de:	b480      	push	{r7}
 80084e0:	b087      	sub	sp, #28
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	781a      	ldrb	r2, [r3, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	785a      	ldrb	r2, [r3, #1]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	789a      	ldrb	r2, [r3, #2]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	78da      	ldrb	r2, [r3, #3]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3304      	adds	r3, #4
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	b29a      	uxth	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3305      	adds	r3, #5
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	021b      	lsls	r3, r3, #8
 8008520:	b29b      	uxth	r3, r3
 8008522:	4313      	orrs	r3, r2
 8008524:	b29a      	uxth	r2, r3
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	799a      	ldrb	r2, [r3, #6]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	889b      	ldrh	r3, [r3, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d102      	bne.n	8008540 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800853a:	2303      	movs	r3, #3
 800853c:	75fb      	strb	r3, [r7, #23]
 800853e:	e033      	b.n	80085a8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	889b      	ldrh	r3, [r3, #4]
 8008544:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008548:	f023 0307 	bic.w	r3, r3, #7
 800854c:	b29a      	uxth	r2, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	b21a      	sxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	b299      	uxth	r1, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3305      	adds	r3, #5
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	b29b      	uxth	r3, r3
 800856c:	430b      	orrs	r3, r1
 800856e:	b29b      	uxth	r3, r3
 8008570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008574:	2b00      	cmp	r3, #0
 8008576:	d110      	bne.n	800859a <USBH_ParseEPDesc+0xbc>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3304      	adds	r3, #4
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	b299      	uxth	r1, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3305      	adds	r3, #5
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	b29b      	uxth	r3, r3
 800858c:	430b      	orrs	r3, r1
 800858e:	b29b      	uxth	r3, r3
 8008590:	b21b      	sxth	r3, r3
 8008592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008596:	b21b      	sxth	r3, r3
 8008598:	e001      	b.n	800859e <USBH_ParseEPDesc+0xc0>
 800859a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800859e:	4313      	orrs	r3, r2
 80085a0:	b21b      	sxth	r3, r3
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d116      	bne.n	80085e0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	78db      	ldrb	r3, [r3, #3]
 80085b6:	f003 0303 	and.w	r3, r3, #3
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d005      	beq.n	80085ca <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	78db      	ldrb	r3, [r3, #3]
 80085c2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d127      	bne.n	800861a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	799b      	ldrb	r3, [r3, #6]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <USBH_ParseEPDesc+0xfc>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	799b      	ldrb	r3, [r3, #6]
 80085d6:	2b10      	cmp	r3, #16
 80085d8:	d91f      	bls.n	800861a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80085da:	2303      	movs	r3, #3
 80085dc:	75fb      	strb	r3, [r7, #23]
 80085de:	e01c      	b.n	800861a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	78db      	ldrb	r3, [r3, #3]
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d10a      	bne.n	8008602 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	799b      	ldrb	r3, [r3, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <USBH_ParseEPDesc+0x11e>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	799b      	ldrb	r3, [r3, #6]
 80085f8:	2b10      	cmp	r3, #16
 80085fa:	d90e      	bls.n	800861a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80085fc:	2303      	movs	r3, #3
 80085fe:	75fb      	strb	r3, [r7, #23]
 8008600:	e00b      	b.n	800861a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	78db      	ldrb	r3, [r3, #3]
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d105      	bne.n	800861a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	799b      	ldrb	r3, [r3, #6]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008616:	2303      	movs	r3, #3
 8008618:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800861a:	7dfb      	ldrb	r3, [r7, #23]
}
 800861c:	4618      	mov	r0, r3
 800861e:	371c      	adds	r7, #28
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3301      	adds	r3, #1
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b03      	cmp	r3, #3
 800863e:	d120      	bne.n	8008682 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	1e9a      	subs	r2, r3, #2
 8008646:	88fb      	ldrh	r3, [r7, #6]
 8008648:	4293      	cmp	r3, r2
 800864a:	bf28      	it	cs
 800864c:	4613      	movcs	r3, r2
 800864e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3302      	adds	r3, #2
 8008654:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008656:	2300      	movs	r3, #0
 8008658:	82fb      	strh	r3, [r7, #22]
 800865a:	e00b      	b.n	8008674 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800865c:	8afb      	ldrh	r3, [r7, #22]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4413      	add	r3, r2
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	3301      	adds	r3, #1
 800866c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800866e:	8afb      	ldrh	r3, [r7, #22]
 8008670:	3302      	adds	r3, #2
 8008672:	82fb      	strh	r3, [r7, #22]
 8008674:	8afa      	ldrh	r2, [r7, #22]
 8008676:	8abb      	ldrh	r3, [r7, #20]
 8008678:	429a      	cmp	r2, r3
 800867a:	d3ef      	bcc.n	800865c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]
  }
}
 8008682:	bf00      	nop
 8008684:	371c      	adds	r7, #28
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800868e:	b480      	push	{r7}
 8008690:	b085      	sub	sp, #20
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	881a      	ldrh	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	4413      	add	r3, r2
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4413      	add	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80086d2:	2301      	movs	r3, #1
 80086d4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	789b      	ldrb	r3, [r3, #2]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d002      	beq.n	80086e4 <USBH_CtlReq+0x20>
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d00f      	beq.n	8008702 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80086e2:	e027      	b.n	8008734 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	88fa      	ldrh	r2, [r7, #6]
 80086ee:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2201      	movs	r2, #1
 80086f4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2202      	movs	r2, #2
 80086fa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008700:	e018      	b.n	8008734 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 f81c 	bl	8008740 <USBH_HandleControl>
 8008708:	4603      	mov	r3, r0
 800870a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <USBH_CtlReq+0x54>
 8008712:	7dfb      	ldrb	r3, [r7, #23]
 8008714:	2b03      	cmp	r3, #3
 8008716:	d106      	bne.n	8008726 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2201      	movs	r2, #1
 800871c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	761a      	strb	r2, [r3, #24]
      break;
 8008724:	e005      	b.n	8008732 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	2b02      	cmp	r3, #2
 800872a:	d102      	bne.n	8008732 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2201      	movs	r2, #1
 8008730:	709a      	strb	r2, [r3, #2]
      break;
 8008732:	bf00      	nop
  }
  return status;
 8008734:	7dfb      	ldrb	r3, [r7, #23]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af02      	add	r7, sp, #8
 8008746:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800874c:	2300      	movs	r3, #0
 800874e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7e1b      	ldrb	r3, [r3, #24]
 8008754:	3b01      	subs	r3, #1
 8008756:	2b0a      	cmp	r3, #10
 8008758:	f200 8156 	bhi.w	8008a08 <USBH_HandleControl+0x2c8>
 800875c:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <USBH_HandleControl+0x24>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	08008791 	.word	0x08008791
 8008768:	080087ab 	.word	0x080087ab
 800876c:	08008815 	.word	0x08008815
 8008770:	0800883b 	.word	0x0800883b
 8008774:	08008873 	.word	0x08008873
 8008778:	0800889d 	.word	0x0800889d
 800877c:	080088ef 	.word	0x080088ef
 8008780:	08008911 	.word	0x08008911
 8008784:	0800894d 	.word	0x0800894d
 8008788:	08008973 	.word	0x08008973
 800878c:	080089b1 	.word	0x080089b1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f103 0110 	add.w	r1, r3, #16
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	795b      	ldrb	r3, [r3, #5]
 800879a:	461a      	mov	r2, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f943 	bl	8008a28 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2202      	movs	r2, #2
 80087a6:	761a      	strb	r2, [r3, #24]
      break;
 80087a8:	e139      	b.n	8008a1e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	795b      	ldrb	r3, [r3, #5]
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fcc5 	bl	8009140 <USBH_LL_GetURBState>
 80087b6:	4603      	mov	r3, r0
 80087b8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d11e      	bne.n	80087fe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	7c1b      	ldrb	r3, [r3, #16]
 80087c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087c8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	8adb      	ldrh	r3, [r3, #22]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80087d2:	7b7b      	ldrb	r3, [r7, #13]
 80087d4:	2b80      	cmp	r3, #128	; 0x80
 80087d6:	d103      	bne.n	80087e0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2203      	movs	r2, #3
 80087dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087de:	e115      	b.n	8008a0c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2205      	movs	r2, #5
 80087e4:	761a      	strb	r2, [r3, #24]
      break;
 80087e6:	e111      	b.n	8008a0c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80087e8:	7b7b      	ldrb	r3, [r7, #13]
 80087ea:	2b80      	cmp	r3, #128	; 0x80
 80087ec:	d103      	bne.n	80087f6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2209      	movs	r2, #9
 80087f2:	761a      	strb	r2, [r3, #24]
      break;
 80087f4:	e10a      	b.n	8008a0c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2207      	movs	r2, #7
 80087fa:	761a      	strb	r2, [r3, #24]
      break;
 80087fc:	e106      	b.n	8008a0c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	2b04      	cmp	r3, #4
 8008802:	d003      	beq.n	800880c <USBH_HandleControl+0xcc>
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	2b02      	cmp	r3, #2
 8008808:	f040 8100 	bne.w	8008a0c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	220b      	movs	r2, #11
 8008810:	761a      	strb	r2, [r3, #24]
      break;
 8008812:	e0fb      	b.n	8008a0c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800881a:	b29a      	uxth	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6899      	ldr	r1, [r3, #8]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	899a      	ldrh	r2, [r3, #12]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	791b      	ldrb	r3, [r3, #4]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f93a 	bl	8008aa6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2204      	movs	r2, #4
 8008836:	761a      	strb	r2, [r3, #24]
      break;
 8008838:	e0f1      	b.n	8008a1e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	791b      	ldrb	r3, [r3, #4]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fc7d 	bl	8009140 <USBH_LL_GetURBState>
 8008846:	4603      	mov	r3, r0
 8008848:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d102      	bne.n	8008856 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2209      	movs	r2, #9
 8008854:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	2b05      	cmp	r3, #5
 800885a:	d102      	bne.n	8008862 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800885c:	2303      	movs	r3, #3
 800885e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008860:	e0d6      	b.n	8008a10 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b04      	cmp	r3, #4
 8008866:	f040 80d3 	bne.w	8008a10 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	220b      	movs	r2, #11
 800886e:	761a      	strb	r2, [r3, #24]
      break;
 8008870:	e0ce      	b.n	8008a10 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6899      	ldr	r1, [r3, #8]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	899a      	ldrh	r2, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	795b      	ldrb	r3, [r3, #5]
 800887e:	2001      	movs	r0, #1
 8008880:	9000      	str	r0, [sp, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f8ea 	bl	8008a5c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2206      	movs	r2, #6
 8008898:	761a      	strb	r2, [r3, #24]
      break;
 800889a:	e0c0      	b.n	8008a1e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	795b      	ldrb	r3, [r3, #5]
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fc4c 	bl	8009140 <USBH_LL_GetURBState>
 80088a8:	4603      	mov	r3, r0
 80088aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d103      	bne.n	80088ba <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2207      	movs	r2, #7
 80088b6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088b8:	e0ac      	b.n	8008a14 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b05      	cmp	r3, #5
 80088be:	d105      	bne.n	80088cc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	220c      	movs	r2, #12
 80088c4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80088c6:	2303      	movs	r3, #3
 80088c8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ca:	e0a3      	b.n	8008a14 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d103      	bne.n	80088da <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2205      	movs	r2, #5
 80088d6:	761a      	strb	r2, [r3, #24]
      break;
 80088d8:	e09c      	b.n	8008a14 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80088da:	7bbb      	ldrb	r3, [r7, #14]
 80088dc:	2b04      	cmp	r3, #4
 80088de:	f040 8099 	bne.w	8008a14 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	220b      	movs	r2, #11
 80088e6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80088e8:	2302      	movs	r3, #2
 80088ea:	73fb      	strb	r3, [r7, #15]
      break;
 80088ec:	e092      	b.n	8008a14 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	791b      	ldrb	r3, [r3, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	2100      	movs	r1, #0
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f8d5 	bl	8008aa6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008902:	b29a      	uxth	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2208      	movs	r2, #8
 800890c:	761a      	strb	r2, [r3, #24]

      break;
 800890e:	e086      	b.n	8008a1e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	791b      	ldrb	r3, [r3, #4]
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fc12 	bl	8009140 <USBH_LL_GetURBState>
 800891c:	4603      	mov	r3, r0
 800891e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d105      	bne.n	8008932 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	220d      	movs	r2, #13
 800892a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008930:	e072      	b.n	8008a18 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b04      	cmp	r3, #4
 8008936:	d103      	bne.n	8008940 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	220b      	movs	r2, #11
 800893c:	761a      	strb	r2, [r3, #24]
      break;
 800893e:	e06b      	b.n	8008a18 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	2b05      	cmp	r3, #5
 8008944:	d168      	bne.n	8008a18 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008946:	2303      	movs	r3, #3
 8008948:	73fb      	strb	r3, [r7, #15]
      break;
 800894a:	e065      	b.n	8008a18 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	795b      	ldrb	r3, [r3, #5]
 8008950:	2201      	movs	r2, #1
 8008952:	9200      	str	r2, [sp, #0]
 8008954:	2200      	movs	r2, #0
 8008956:	2100      	movs	r1, #0
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f87f 	bl	8008a5c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008964:	b29a      	uxth	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	220a      	movs	r2, #10
 800896e:	761a      	strb	r2, [r3, #24]
      break;
 8008970:	e055      	b.n	8008a1e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	795b      	ldrb	r3, [r3, #5]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fbe1 	bl	8009140 <USBH_LL_GetURBState>
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d105      	bne.n	8008994 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	220d      	movs	r2, #13
 8008990:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008992:	e043      	b.n	8008a1c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d103      	bne.n	80089a2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2209      	movs	r2, #9
 800899e:	761a      	strb	r2, [r3, #24]
      break;
 80089a0:	e03c      	b.n	8008a1c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b04      	cmp	r3, #4
 80089a6:	d139      	bne.n	8008a1c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	220b      	movs	r2, #11
 80089ac:	761a      	strb	r2, [r3, #24]
      break;
 80089ae:	e035      	b.n	8008a1c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	7e5b      	ldrb	r3, [r3, #25]
 80089b4:	3301      	adds	r3, #1
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	765a      	strb	r2, [r3, #25]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	7e5b      	ldrb	r3, [r3, #25]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d806      	bhi.n	80089d2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80089d0:	e025      	b.n	8008a1e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089d8:	2106      	movs	r1, #6
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	795b      	ldrb	r3, [r3, #5]
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f90c 	bl	8008c08 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	791b      	ldrb	r3, [r3, #4]
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f906 	bl	8008c08 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a02:	2302      	movs	r3, #2
 8008a04:	73fb      	strb	r3, [r7, #15]
      break;
 8008a06:	e00a      	b.n	8008a1e <USBH_HandleControl+0x2de>

    default:
      break;
 8008a08:	bf00      	nop
 8008a0a:	e008      	b.n	8008a1e <USBH_HandleControl+0x2de>
      break;
 8008a0c:	bf00      	nop
 8008a0e:	e006      	b.n	8008a1e <USBH_HandleControl+0x2de>
      break;
 8008a10:	bf00      	nop
 8008a12:	e004      	b.n	8008a1e <USBH_HandleControl+0x2de>
      break;
 8008a14:	bf00      	nop
 8008a16:	e002      	b.n	8008a1e <USBH_HandleControl+0x2de>
      break;
 8008a18:	bf00      	nop
 8008a1a:	e000      	b.n	8008a1e <USBH_HandleControl+0x2de>
      break;
 8008a1c:	bf00      	nop
  }

  return status;
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af04      	add	r7, sp, #16
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	4613      	mov	r3, r2
 8008a34:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a36:	79f9      	ldrb	r1, [r7, #7]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9303      	str	r3, [sp, #12]
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	9302      	str	r3, [sp, #8]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	2300      	movs	r3, #0
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fb46 	bl	80090de <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af04      	add	r7, sp, #16
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	4611      	mov	r1, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	80fb      	strh	r3, [r7, #6]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a80:	7979      	ldrb	r1, [r7, #5]
 8008a82:	7e3b      	ldrb	r3, [r7, #24]
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	9302      	str	r3, [sp, #8]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	2301      	movs	r3, #1
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	2200      	movs	r2, #0
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fb21 	bl	80090de <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b088      	sub	sp, #32
 8008aaa:	af04      	add	r7, sp, #16
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	80fb      	strh	r3, [r7, #6]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008abc:	7979      	ldrb	r1, [r7, #5]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9303      	str	r3, [sp, #12]
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	9302      	str	r3, [sp, #8]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	2301      	movs	r3, #1
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 fb03 	bl	80090de <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ad8:	2300      	movs	r3, #0

}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b088      	sub	sp, #32
 8008ae6:	af04      	add	r7, sp, #16
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	4611      	mov	r1, r2
 8008aee:	461a      	mov	r2, r3
 8008af0:	460b      	mov	r3, r1
 8008af2:	80fb      	strh	r3, [r7, #6]
 8008af4:	4613      	mov	r3, r2
 8008af6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b06:	7979      	ldrb	r1, [r7, #5]
 8008b08:	7e3b      	ldrb	r3, [r7, #24]
 8008b0a:	9303      	str	r3, [sp, #12]
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	2301      	movs	r3, #1
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	2302      	movs	r3, #2
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 fade 	bl	80090de <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af04      	add	r7, sp, #16
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	4611      	mov	r1, r2
 8008b38:	461a      	mov	r2, r3
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	80fb      	strh	r3, [r7, #6]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b42:	7979      	ldrb	r1, [r7, #5]
 8008b44:	2300      	movs	r3, #0
 8008b46:	9303      	str	r3, [sp, #12]
 8008b48:	88fb      	ldrh	r3, [r7, #6]
 8008b4a:	9302      	str	r3, [sp, #8]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	2301      	movs	r3, #1
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2302      	movs	r3, #2
 8008b56:	2201      	movs	r2, #1
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fac0 	bl	80090de <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af04      	add	r7, sp, #16
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	4608      	mov	r0, r1
 8008b72:	4611      	mov	r1, r2
 8008b74:	461a      	mov	r2, r3
 8008b76:	4603      	mov	r3, r0
 8008b78:	70fb      	strb	r3, [r7, #3]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	70bb      	strb	r3, [r7, #2]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b82:	7878      	ldrb	r0, [r7, #1]
 8008b84:	78ba      	ldrb	r2, [r7, #2]
 8008b86:	78f9      	ldrb	r1, [r7, #3]
 8008b88:	8b3b      	ldrh	r3, [r7, #24]
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	7d3b      	ldrb	r3, [r7, #20]
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	7c3b      	ldrb	r3, [r7, #16]
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	4603      	mov	r3, r0
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa53 	bl	8009042 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	460b      	mov	r3, r1
 8008bb0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008bb2:	78fb      	ldrb	r3, [r7, #3]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fa72 	bl	80090a0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f836 	bl	8008c44 <USBH_GetFreePipe>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008bdc:	89fb      	ldrh	r3, [r7, #14]
 8008bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00a      	beq.n	8008bfc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008be6:	78fa      	ldrb	r2, [r7, #3]
 8008be8:	89fb      	ldrh	r3, [r7, #14]
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	33e0      	adds	r3, #224	; 0xe0
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008bfc:	89fb      	ldrh	r3, [r7, #14]
 8008bfe:	b2db      	uxtb	r3, r3
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	2b0f      	cmp	r3, #15
 8008c18:	d80d      	bhi.n	8008c36 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	33e0      	adds	r3, #224	; 0xe0
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	33e0      	adds	r3, #224	; 0xe0
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
 8008c54:	e00f      	b.n	8008c76 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	33e0      	adds	r3, #224	; 0xe0
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	e007      	b.n	8008c80 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	3301      	adds	r3, #1
 8008c74:	73fb      	strb	r3, [r7, #15]
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	2b0f      	cmp	r3, #15
 8008c7a:	d9ec      	bls.n	8008c56 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008c90:	2201      	movs	r2, #1
 8008c92:	490e      	ldr	r1, [pc, #56]	; (8008ccc <MX_USB_HOST_Init+0x40>)
 8008c94:	480e      	ldr	r0, [pc, #56]	; (8008cd0 <MX_USB_HOST_Init+0x44>)
 8008c96:	f7fe fba7 	bl	80073e8 <USBH_Init>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008ca0:	f7f8 f9c6 	bl	8001030 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008ca4:	490b      	ldr	r1, [pc, #44]	; (8008cd4 <MX_USB_HOST_Init+0x48>)
 8008ca6:	480a      	ldr	r0, [pc, #40]	; (8008cd0 <MX_USB_HOST_Init+0x44>)
 8008ca8:	f7fe fc2c 	bl	8007504 <USBH_RegisterClass>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008cb2:	f7f8 f9bd 	bl	8001030 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008cb6:	4806      	ldr	r0, [pc, #24]	; (8008cd0 <MX_USB_HOST_Init+0x44>)
 8008cb8:	f7fe fcb0 	bl	800761c <USBH_Start>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008cc2:	f7f8 f9b5 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008cc6:	bf00      	nop
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	08008ced 	.word	0x08008ced
 8008cd0:	20000404 	.word	0x20000404
 8008cd4:	20000180 	.word	0x20000180

08008cd8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008cdc:	4802      	ldr	r0, [pc, #8]	; (8008ce8 <MX_USB_HOST_Process+0x10>)
 8008cde:	f7fe fcad 	bl	800763c <USBH_Process>
}
 8008ce2:	bf00      	nop
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20000404 	.word	0x20000404

08008cec <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008cf8:	78fb      	ldrb	r3, [r7, #3]
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d819      	bhi.n	8008d34 <USBH_UserProcess+0x48>
 8008d00:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <USBH_UserProcess+0x1c>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d35 	.word	0x08008d35
 8008d0c:	08008d25 	.word	0x08008d25
 8008d10:	08008d35 	.word	0x08008d35
 8008d14:	08008d2d 	.word	0x08008d2d
 8008d18:	08008d1d 	.word	0x08008d1d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d1c:	4b09      	ldr	r3, [pc, #36]	; (8008d44 <USBH_UserProcess+0x58>)
 8008d1e:	2203      	movs	r2, #3
 8008d20:	701a      	strb	r2, [r3, #0]
  break;
 8008d22:	e008      	b.n	8008d36 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d24:	4b07      	ldr	r3, [pc, #28]	; (8008d44 <USBH_UserProcess+0x58>)
 8008d26:	2202      	movs	r2, #2
 8008d28:	701a      	strb	r2, [r3, #0]
  break;
 8008d2a:	e004      	b.n	8008d36 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <USBH_UserProcess+0x58>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	701a      	strb	r2, [r3, #0]
  break;
 8008d32:	e000      	b.n	8008d36 <USBH_UserProcess+0x4a>

  default:
  break;
 8008d34:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d36:	bf00      	nop
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	200007dc 	.word	0x200007dc

08008d48 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08a      	sub	sp, #40	; 0x28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d50:	f107 0314 	add.w	r3, r7, #20
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	605a      	str	r2, [r3, #4]
 8008d5a:	609a      	str	r2, [r3, #8]
 8008d5c:	60da      	str	r2, [r3, #12]
 8008d5e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d68:	d147      	bne.n	8008dfa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	613b      	str	r3, [r7, #16]
 8008d6e:	4b25      	ldr	r3, [pc, #148]	; (8008e04 <HAL_HCD_MspInit+0xbc>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	4a24      	ldr	r2, [pc, #144]	; (8008e04 <HAL_HCD_MspInit+0xbc>)
 8008d74:	f043 0301 	orr.w	r3, r3, #1
 8008d78:	6313      	str	r3, [r2, #48]	; 0x30
 8008d7a:	4b22      	ldr	r3, [pc, #136]	; (8008e04 <HAL_HCD_MspInit+0xbc>)
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d90:	2300      	movs	r3, #0
 8008d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008d94:	f107 0314 	add.w	r3, r7, #20
 8008d98:	4619      	mov	r1, r3
 8008d9a:	481b      	ldr	r0, [pc, #108]	; (8008e08 <HAL_HCD_MspInit+0xc0>)
 8008d9c:	f7f8 fdb4 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008da0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008da6:	2302      	movs	r3, #2
 8008da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dae:	2300      	movs	r3, #0
 8008db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008db2:	230a      	movs	r3, #10
 8008db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008db6:	f107 0314 	add.w	r3, r7, #20
 8008dba:	4619      	mov	r1, r3
 8008dbc:	4812      	ldr	r0, [pc, #72]	; (8008e08 <HAL_HCD_MspInit+0xc0>)
 8008dbe:	f7f8 fda3 	bl	8001908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008dc2:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <HAL_HCD_MspInit+0xbc>)
 8008dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc6:	4a0f      	ldr	r2, [pc, #60]	; (8008e04 <HAL_HCD_MspInit+0xbc>)
 8008dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dcc:	6353      	str	r3, [r2, #52]	; 0x34
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60fb      	str	r3, [r7, #12]
 8008dd2:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <HAL_HCD_MspInit+0xbc>)
 8008dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd6:	4a0b      	ldr	r2, [pc, #44]	; (8008e04 <HAL_HCD_MspInit+0xbc>)
 8008dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8008dde:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <HAL_HCD_MspInit+0xbc>)
 8008de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008dea:	2200      	movs	r2, #0
 8008dec:	2100      	movs	r1, #0
 8008dee:	2043      	movs	r0, #67	; 0x43
 8008df0:	f7f8 fd53 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008df4:	2043      	movs	r0, #67	; 0x43
 8008df6:	f7f8 fd6c 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008dfa:	bf00      	nop
 8008dfc:	3728      	adds	r7, #40	; 0x28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	40023800 	.word	0x40023800
 8008e08:	40020000 	.word	0x40020000

08008e0c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe ffed 	bl	8007dfa <USBH_LL_IncTimer>
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff f825 	bl	8007e86 <USBH_LL_Connect>
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7ff f82e 	bl	8007eb4 <USBH_LL_Disconnect>
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe ffdf 	bl	8007e4e <USBH_LL_PortEnabled>
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe ffdf 	bl	8007e6a <USBH_LL_PortDisabled>
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d12a      	bne.n	8008f1c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008ec6:	4a18      	ldr	r2, [pc, #96]	; (8008f28 <USBH_LL_Init+0x74>)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a15      	ldr	r2, [pc, #84]	; (8008f28 <USBH_LL_Init+0x74>)
 8008ed2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ed6:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <USBH_LL_Init+0x74>)
 8008ed8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008edc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008ede:	4b12      	ldr	r3, [pc, #72]	; (8008f28 <USBH_LL_Init+0x74>)
 8008ee0:	2208      	movs	r2, #8
 8008ee2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008ee4:	4b10      	ldr	r3, [pc, #64]	; (8008f28 <USBH_LL_Init+0x74>)
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008eea:	4b0f      	ldr	r3, [pc, #60]	; (8008f28 <USBH_LL_Init+0x74>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ef0:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <USBH_LL_Init+0x74>)
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ef6:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <USBH_LL_Init+0x74>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008efc:	480a      	ldr	r0, [pc, #40]	; (8008f28 <USBH_LL_Init+0x74>)
 8008efe:	f7f8 fed0 	bl	8001ca2 <HAL_HCD_Init>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f08:	f7f8 f892 	bl	8001030 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f0c:	4806      	ldr	r0, [pc, #24]	; (8008f28 <USBH_LL_Init+0x74>)
 8008f0e:	f7f9 fab4 	bl	800247a <HAL_HCD_GetCurrentFrame>
 8008f12:	4603      	mov	r3, r0
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7fe ff60 	bl	8007ddc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	200007e0 	.word	0x200007e0

08008f2c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7f9 fa23 	bl	800238e <HAL_HCD_Start>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 f95c 	bl	800920c <USBH_Get_USB_Status>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7f9 fa2b 	bl	80023d4 <HAL_HCD_Stop>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 f941 	bl	800920c <USBH_Get_USB_Status>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7f9 fa73 	bl	8002496 <HAL_HCD_GetCurrentSpeed>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d00c      	beq.n	8008fd0 <USBH_LL_GetSpeed+0x38>
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d80d      	bhi.n	8008fd6 <USBH_LL_GetSpeed+0x3e>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <USBH_LL_GetSpeed+0x2c>
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d003      	beq.n	8008fca <USBH_LL_GetSpeed+0x32>
 8008fc2:	e008      	b.n	8008fd6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fc8:	e008      	b.n	8008fdc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008fce:	e005      	b.n	8008fdc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd4:	e002      	b.n	8008fdc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008fda:	bf00      	nop
  }
  return  speed;
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7f9 fa06 	bl	800240e <HAL_HCD_ResetPort>
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	4618      	mov	r0, r3
 800900a:	f000 f8ff 	bl	800920c <USBH_Get_USB_Status>
 800900e:	4603      	mov	r3, r0
 8009010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009012:	7bbb      	ldrb	r3, [r7, #14]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	460b      	mov	r3, r1
 8009026:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f7f9 fa0d 	bl	8002452 <HAL_HCD_HC_GetXferCount>
 8009038:	4603      	mov	r3, r0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009042:	b590      	push	{r4, r7, lr}
 8009044:	b089      	sub	sp, #36	; 0x24
 8009046:	af04      	add	r7, sp, #16
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	4608      	mov	r0, r1
 800904c:	4611      	mov	r1, r2
 800904e:	461a      	mov	r2, r3
 8009050:	4603      	mov	r3, r0
 8009052:	70fb      	strb	r3, [r7, #3]
 8009054:	460b      	mov	r3, r1
 8009056:	70bb      	strb	r3, [r7, #2]
 8009058:	4613      	mov	r3, r2
 800905a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800906a:	787c      	ldrb	r4, [r7, #1]
 800906c:	78ba      	ldrb	r2, [r7, #2]
 800906e:	78f9      	ldrb	r1, [r7, #3]
 8009070:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009072:	9302      	str	r3, [sp, #8]
 8009074:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	4623      	mov	r3, r4
 8009082:	f7f8 fe70 	bl	8001d66 <HAL_HCD_HC_Init>
 8009086:	4603      	mov	r3, r0
 8009088:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800908a:	7bfb      	ldrb	r3, [r7, #15]
 800908c:	4618      	mov	r0, r3
 800908e:	f000 f8bd 	bl	800920c <USBH_Get_USB_Status>
 8009092:	4603      	mov	r3, r0
 8009094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009096:	7bbb      	ldrb	r3, [r7, #14]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	bd90      	pop	{r4, r7, pc}

080090a0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	4611      	mov	r1, r2
 80090be:	4618      	mov	r0, r3
 80090c0:	f7f8 fee0 	bl	8001e84 <HAL_HCD_HC_Halt>
 80090c4:	4603      	mov	r3, r0
 80090c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f89e 	bl	800920c <USBH_Get_USB_Status>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80090de:	b590      	push	{r4, r7, lr}
 80090e0:	b089      	sub	sp, #36	; 0x24
 80090e2:	af04      	add	r7, sp, #16
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	4608      	mov	r0, r1
 80090e8:	4611      	mov	r1, r2
 80090ea:	461a      	mov	r2, r3
 80090ec:	4603      	mov	r3, r0
 80090ee:	70fb      	strb	r3, [r7, #3]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70bb      	strb	r3, [r7, #2]
 80090f4:	4613      	mov	r3, r2
 80090f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009106:	787c      	ldrb	r4, [r7, #1]
 8009108:	78ba      	ldrb	r2, [r7, #2]
 800910a:	78f9      	ldrb	r1, [r7, #3]
 800910c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009110:	9303      	str	r3, [sp, #12]
 8009112:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009114:	9302      	str	r3, [sp, #8]
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	4623      	mov	r3, r4
 8009122:	f7f8 fed3 	bl	8001ecc <HAL_HCD_HC_SubmitRequest>
 8009126:	4603      	mov	r3, r0
 8009128:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800912a:	7bfb      	ldrb	r3, [r7, #15]
 800912c:	4618      	mov	r0, r3
 800912e:	f000 f86d 	bl	800920c <USBH_Get_USB_Status>
 8009132:	4603      	mov	r3, r0
 8009134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009136:	7bbb      	ldrb	r3, [r7, #14]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	bd90      	pop	{r4, r7, pc}

08009140 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009152:	78fa      	ldrb	r2, [r7, #3]
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f7f9 f967 	bl	800242a <HAL_HCD_HC_GetURBState>
 800915c:	4603      	mov	r3, r0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b082      	sub	sp, #8
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	460b      	mov	r3, r1
 8009170:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009178:	2b01      	cmp	r3, #1
 800917a:	d103      	bne.n	8009184 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	4618      	mov	r0, r3
 8009180:	f000 f870 	bl	8009264 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009184:	20c8      	movs	r0, #200	; 0xc8
 8009186:	f7f8 fa89 	bl	800169c <HAL_Delay>
  return USBH_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
 80091a0:	4613      	mov	r3, r2
 80091a2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091aa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	212c      	movs	r1, #44	; 0x2c
 80091b2:	fb01 f303 	mul.w	r3, r1, r3
 80091b6:	4413      	add	r3, r2
 80091b8:	333b      	adds	r3, #59	; 0x3b
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d009      	beq.n	80091d4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	212c      	movs	r1, #44	; 0x2c
 80091c6:	fb01 f303 	mul.w	r3, r1, r3
 80091ca:	4413      	add	r3, r2
 80091cc:	3354      	adds	r3, #84	; 0x54
 80091ce:	78ba      	ldrb	r2, [r7, #2]
 80091d0:	701a      	strb	r2, [r3, #0]
 80091d2:	e008      	b.n	80091e6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	212c      	movs	r1, #44	; 0x2c
 80091da:	fb01 f303 	mul.w	r3, r1, r3
 80091de:	4413      	add	r3, r2
 80091e0:	3355      	adds	r3, #85	; 0x55
 80091e2:	78ba      	ldrb	r2, [r7, #2]
 80091e4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7f8 fa4d 	bl	800169c <HAL_Delay>
}
 8009202:	bf00      	nop
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800921a:	79fb      	ldrb	r3, [r7, #7]
 800921c:	2b03      	cmp	r3, #3
 800921e:	d817      	bhi.n	8009250 <USBH_Get_USB_Status+0x44>
 8009220:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <USBH_Get_USB_Status+0x1c>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	08009239 	.word	0x08009239
 800922c:	0800923f 	.word	0x0800923f
 8009230:	08009245 	.word	0x08009245
 8009234:	0800924b 	.word	0x0800924b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]
    break;
 800923c:	e00b      	b.n	8009256 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800923e:	2302      	movs	r3, #2
 8009240:	73fb      	strb	r3, [r7, #15]
    break;
 8009242:	e008      	b.n	8009256 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009244:	2301      	movs	r3, #1
 8009246:	73fb      	strb	r3, [r7, #15]
    break;
 8009248:	e005      	b.n	8009256 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800924a:	2302      	movs	r3, #2
 800924c:	73fb      	strb	r3, [r7, #15]
    break;
 800924e:	e002      	b.n	8009256 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009250:	2302      	movs	r3, #2
 8009252:	73fb      	strb	r3, [r7, #15]
    break;
 8009254:	bf00      	nop
  }
  return usb_status;
 8009256:	7bfb      	ldrb	r3, [r7, #15]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]
 800927c:	e001      	b.n	8009282 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800927e:	2301      	movs	r3, #1
 8009280:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	461a      	mov	r2, r3
 8009286:	2101      	movs	r1, #1
 8009288:	4803      	ldr	r0, [pc, #12]	; (8009298 <MX_DriverVbusFS+0x34>)
 800928a:	f7f8 fcf1 	bl	8001c70 <HAL_GPIO_WritePin>
}
 800928e:	bf00      	nop
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	40020800 	.word	0x40020800

0800929c <__errno>:
 800929c:	4b01      	ldr	r3, [pc, #4]	; (80092a4 <__errno+0x8>)
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	200001a0 	.word	0x200001a0

080092a8 <__libc_init_array>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	4d0d      	ldr	r5, [pc, #52]	; (80092e0 <__libc_init_array+0x38>)
 80092ac:	4c0d      	ldr	r4, [pc, #52]	; (80092e4 <__libc_init_array+0x3c>)
 80092ae:	1b64      	subs	r4, r4, r5
 80092b0:	10a4      	asrs	r4, r4, #2
 80092b2:	2600      	movs	r6, #0
 80092b4:	42a6      	cmp	r6, r4
 80092b6:	d109      	bne.n	80092cc <__libc_init_array+0x24>
 80092b8:	4d0b      	ldr	r5, [pc, #44]	; (80092e8 <__libc_init_array+0x40>)
 80092ba:	4c0c      	ldr	r4, [pc, #48]	; (80092ec <__libc_init_array+0x44>)
 80092bc:	f000 f92e 	bl	800951c <_init>
 80092c0:	1b64      	subs	r4, r4, r5
 80092c2:	10a4      	asrs	r4, r4, #2
 80092c4:	2600      	movs	r6, #0
 80092c6:	42a6      	cmp	r6, r4
 80092c8:	d105      	bne.n	80092d6 <__libc_init_array+0x2e>
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d0:	4798      	blx	r3
 80092d2:	3601      	adds	r6, #1
 80092d4:	e7ee      	b.n	80092b4 <__libc_init_array+0xc>
 80092d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092da:	4798      	blx	r3
 80092dc:	3601      	adds	r6, #1
 80092de:	e7f2      	b.n	80092c6 <__libc_init_array+0x1e>
 80092e0:	08009558 	.word	0x08009558
 80092e4:	08009558 	.word	0x08009558
 80092e8:	08009558 	.word	0x08009558
 80092ec:	0800955c 	.word	0x0800955c

080092f0 <malloc>:
 80092f0:	4b02      	ldr	r3, [pc, #8]	; (80092fc <malloc+0xc>)
 80092f2:	4601      	mov	r1, r0
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	f000 b87f 	b.w	80093f8 <_malloc_r>
 80092fa:	bf00      	nop
 80092fc:	200001a0 	.word	0x200001a0

08009300 <free>:
 8009300:	4b02      	ldr	r3, [pc, #8]	; (800930c <free+0xc>)
 8009302:	4601      	mov	r1, r0
 8009304:	6818      	ldr	r0, [r3, #0]
 8009306:	f000 b80b 	b.w	8009320 <_free_r>
 800930a:	bf00      	nop
 800930c:	200001a0 	.word	0x200001a0

08009310 <memset>:
 8009310:	4402      	add	r2, r0
 8009312:	4603      	mov	r3, r0
 8009314:	4293      	cmp	r3, r2
 8009316:	d100      	bne.n	800931a <memset+0xa>
 8009318:	4770      	bx	lr
 800931a:	f803 1b01 	strb.w	r1, [r3], #1
 800931e:	e7f9      	b.n	8009314 <memset+0x4>

08009320 <_free_r>:
 8009320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009322:	2900      	cmp	r1, #0
 8009324:	d044      	beq.n	80093b0 <_free_r+0x90>
 8009326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800932a:	9001      	str	r0, [sp, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f1a1 0404 	sub.w	r4, r1, #4
 8009332:	bfb8      	it	lt
 8009334:	18e4      	addlt	r4, r4, r3
 8009336:	f000 f8e3 	bl	8009500 <__malloc_lock>
 800933a:	4a1e      	ldr	r2, [pc, #120]	; (80093b4 <_free_r+0x94>)
 800933c:	9801      	ldr	r0, [sp, #4]
 800933e:	6813      	ldr	r3, [r2, #0]
 8009340:	b933      	cbnz	r3, 8009350 <_free_r+0x30>
 8009342:	6063      	str	r3, [r4, #4]
 8009344:	6014      	str	r4, [r2, #0]
 8009346:	b003      	add	sp, #12
 8009348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800934c:	f000 b8de 	b.w	800950c <__malloc_unlock>
 8009350:	42a3      	cmp	r3, r4
 8009352:	d908      	bls.n	8009366 <_free_r+0x46>
 8009354:	6825      	ldr	r5, [r4, #0]
 8009356:	1961      	adds	r1, r4, r5
 8009358:	428b      	cmp	r3, r1
 800935a:	bf01      	itttt	eq
 800935c:	6819      	ldreq	r1, [r3, #0]
 800935e:	685b      	ldreq	r3, [r3, #4]
 8009360:	1949      	addeq	r1, r1, r5
 8009362:	6021      	streq	r1, [r4, #0]
 8009364:	e7ed      	b.n	8009342 <_free_r+0x22>
 8009366:	461a      	mov	r2, r3
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	b10b      	cbz	r3, 8009370 <_free_r+0x50>
 800936c:	42a3      	cmp	r3, r4
 800936e:	d9fa      	bls.n	8009366 <_free_r+0x46>
 8009370:	6811      	ldr	r1, [r2, #0]
 8009372:	1855      	adds	r5, r2, r1
 8009374:	42a5      	cmp	r5, r4
 8009376:	d10b      	bne.n	8009390 <_free_r+0x70>
 8009378:	6824      	ldr	r4, [r4, #0]
 800937a:	4421      	add	r1, r4
 800937c:	1854      	adds	r4, r2, r1
 800937e:	42a3      	cmp	r3, r4
 8009380:	6011      	str	r1, [r2, #0]
 8009382:	d1e0      	bne.n	8009346 <_free_r+0x26>
 8009384:	681c      	ldr	r4, [r3, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	6053      	str	r3, [r2, #4]
 800938a:	4421      	add	r1, r4
 800938c:	6011      	str	r1, [r2, #0]
 800938e:	e7da      	b.n	8009346 <_free_r+0x26>
 8009390:	d902      	bls.n	8009398 <_free_r+0x78>
 8009392:	230c      	movs	r3, #12
 8009394:	6003      	str	r3, [r0, #0]
 8009396:	e7d6      	b.n	8009346 <_free_r+0x26>
 8009398:	6825      	ldr	r5, [r4, #0]
 800939a:	1961      	adds	r1, r4, r5
 800939c:	428b      	cmp	r3, r1
 800939e:	bf04      	itt	eq
 80093a0:	6819      	ldreq	r1, [r3, #0]
 80093a2:	685b      	ldreq	r3, [r3, #4]
 80093a4:	6063      	str	r3, [r4, #4]
 80093a6:	bf04      	itt	eq
 80093a8:	1949      	addeq	r1, r1, r5
 80093aa:	6021      	streq	r1, [r4, #0]
 80093ac:	6054      	str	r4, [r2, #4]
 80093ae:	e7ca      	b.n	8009346 <_free_r+0x26>
 80093b0:	b003      	add	sp, #12
 80093b2:	bd30      	pop	{r4, r5, pc}
 80093b4:	20000ae4 	.word	0x20000ae4

080093b8 <sbrk_aligned>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	4e0e      	ldr	r6, [pc, #56]	; (80093f4 <sbrk_aligned+0x3c>)
 80093bc:	460c      	mov	r4, r1
 80093be:	6831      	ldr	r1, [r6, #0]
 80093c0:	4605      	mov	r5, r0
 80093c2:	b911      	cbnz	r1, 80093ca <sbrk_aligned+0x12>
 80093c4:	f000 f88c 	bl	80094e0 <_sbrk_r>
 80093c8:	6030      	str	r0, [r6, #0]
 80093ca:	4621      	mov	r1, r4
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 f887 	bl	80094e0 <_sbrk_r>
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	d00a      	beq.n	80093ec <sbrk_aligned+0x34>
 80093d6:	1cc4      	adds	r4, r0, #3
 80093d8:	f024 0403 	bic.w	r4, r4, #3
 80093dc:	42a0      	cmp	r0, r4
 80093de:	d007      	beq.n	80093f0 <sbrk_aligned+0x38>
 80093e0:	1a21      	subs	r1, r4, r0
 80093e2:	4628      	mov	r0, r5
 80093e4:	f000 f87c 	bl	80094e0 <_sbrk_r>
 80093e8:	3001      	adds	r0, #1
 80093ea:	d101      	bne.n	80093f0 <sbrk_aligned+0x38>
 80093ec:	f04f 34ff 	mov.w	r4, #4294967295
 80093f0:	4620      	mov	r0, r4
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	20000ae8 	.word	0x20000ae8

080093f8 <_malloc_r>:
 80093f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093fc:	1ccd      	adds	r5, r1, #3
 80093fe:	f025 0503 	bic.w	r5, r5, #3
 8009402:	3508      	adds	r5, #8
 8009404:	2d0c      	cmp	r5, #12
 8009406:	bf38      	it	cc
 8009408:	250c      	movcc	r5, #12
 800940a:	2d00      	cmp	r5, #0
 800940c:	4607      	mov	r7, r0
 800940e:	db01      	blt.n	8009414 <_malloc_r+0x1c>
 8009410:	42a9      	cmp	r1, r5
 8009412:	d905      	bls.n	8009420 <_malloc_r+0x28>
 8009414:	230c      	movs	r3, #12
 8009416:	603b      	str	r3, [r7, #0]
 8009418:	2600      	movs	r6, #0
 800941a:	4630      	mov	r0, r6
 800941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009420:	4e2e      	ldr	r6, [pc, #184]	; (80094dc <_malloc_r+0xe4>)
 8009422:	f000 f86d 	bl	8009500 <__malloc_lock>
 8009426:	6833      	ldr	r3, [r6, #0]
 8009428:	461c      	mov	r4, r3
 800942a:	bb34      	cbnz	r4, 800947a <_malloc_r+0x82>
 800942c:	4629      	mov	r1, r5
 800942e:	4638      	mov	r0, r7
 8009430:	f7ff ffc2 	bl	80093b8 <sbrk_aligned>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	4604      	mov	r4, r0
 8009438:	d14d      	bne.n	80094d6 <_malloc_r+0xde>
 800943a:	6834      	ldr	r4, [r6, #0]
 800943c:	4626      	mov	r6, r4
 800943e:	2e00      	cmp	r6, #0
 8009440:	d140      	bne.n	80094c4 <_malloc_r+0xcc>
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	4631      	mov	r1, r6
 8009446:	4638      	mov	r0, r7
 8009448:	eb04 0803 	add.w	r8, r4, r3
 800944c:	f000 f848 	bl	80094e0 <_sbrk_r>
 8009450:	4580      	cmp	r8, r0
 8009452:	d13a      	bne.n	80094ca <_malloc_r+0xd2>
 8009454:	6821      	ldr	r1, [r4, #0]
 8009456:	3503      	adds	r5, #3
 8009458:	1a6d      	subs	r5, r5, r1
 800945a:	f025 0503 	bic.w	r5, r5, #3
 800945e:	3508      	adds	r5, #8
 8009460:	2d0c      	cmp	r5, #12
 8009462:	bf38      	it	cc
 8009464:	250c      	movcc	r5, #12
 8009466:	4629      	mov	r1, r5
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff ffa5 	bl	80093b8 <sbrk_aligned>
 800946e:	3001      	adds	r0, #1
 8009470:	d02b      	beq.n	80094ca <_malloc_r+0xd2>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	442b      	add	r3, r5
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	e00e      	b.n	8009498 <_malloc_r+0xa0>
 800947a:	6822      	ldr	r2, [r4, #0]
 800947c:	1b52      	subs	r2, r2, r5
 800947e:	d41e      	bmi.n	80094be <_malloc_r+0xc6>
 8009480:	2a0b      	cmp	r2, #11
 8009482:	d916      	bls.n	80094b2 <_malloc_r+0xba>
 8009484:	1961      	adds	r1, r4, r5
 8009486:	42a3      	cmp	r3, r4
 8009488:	6025      	str	r5, [r4, #0]
 800948a:	bf18      	it	ne
 800948c:	6059      	strne	r1, [r3, #4]
 800948e:	6863      	ldr	r3, [r4, #4]
 8009490:	bf08      	it	eq
 8009492:	6031      	streq	r1, [r6, #0]
 8009494:	5162      	str	r2, [r4, r5]
 8009496:	604b      	str	r3, [r1, #4]
 8009498:	4638      	mov	r0, r7
 800949a:	f104 060b 	add.w	r6, r4, #11
 800949e:	f000 f835 	bl	800950c <__malloc_unlock>
 80094a2:	f026 0607 	bic.w	r6, r6, #7
 80094a6:	1d23      	adds	r3, r4, #4
 80094a8:	1af2      	subs	r2, r6, r3
 80094aa:	d0b6      	beq.n	800941a <_malloc_r+0x22>
 80094ac:	1b9b      	subs	r3, r3, r6
 80094ae:	50a3      	str	r3, [r4, r2]
 80094b0:	e7b3      	b.n	800941a <_malloc_r+0x22>
 80094b2:	6862      	ldr	r2, [r4, #4]
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	bf0c      	ite	eq
 80094b8:	6032      	streq	r2, [r6, #0]
 80094ba:	605a      	strne	r2, [r3, #4]
 80094bc:	e7ec      	b.n	8009498 <_malloc_r+0xa0>
 80094be:	4623      	mov	r3, r4
 80094c0:	6864      	ldr	r4, [r4, #4]
 80094c2:	e7b2      	b.n	800942a <_malloc_r+0x32>
 80094c4:	4634      	mov	r4, r6
 80094c6:	6876      	ldr	r6, [r6, #4]
 80094c8:	e7b9      	b.n	800943e <_malloc_r+0x46>
 80094ca:	230c      	movs	r3, #12
 80094cc:	603b      	str	r3, [r7, #0]
 80094ce:	4638      	mov	r0, r7
 80094d0:	f000 f81c 	bl	800950c <__malloc_unlock>
 80094d4:	e7a1      	b.n	800941a <_malloc_r+0x22>
 80094d6:	6025      	str	r5, [r4, #0]
 80094d8:	e7de      	b.n	8009498 <_malloc_r+0xa0>
 80094da:	bf00      	nop
 80094dc:	20000ae4 	.word	0x20000ae4

080094e0 <_sbrk_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4d06      	ldr	r5, [pc, #24]	; (80094fc <_sbrk_r+0x1c>)
 80094e4:	2300      	movs	r3, #0
 80094e6:	4604      	mov	r4, r0
 80094e8:	4608      	mov	r0, r1
 80094ea:	602b      	str	r3, [r5, #0]
 80094ec:	f7f7 fe9e 	bl	800122c <_sbrk>
 80094f0:	1c43      	adds	r3, r0, #1
 80094f2:	d102      	bne.n	80094fa <_sbrk_r+0x1a>
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	b103      	cbz	r3, 80094fa <_sbrk_r+0x1a>
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
 80094fc:	20000aec 	.word	0x20000aec

08009500 <__malloc_lock>:
 8009500:	4801      	ldr	r0, [pc, #4]	; (8009508 <__malloc_lock+0x8>)
 8009502:	f000 b809 	b.w	8009518 <__retarget_lock_acquire_recursive>
 8009506:	bf00      	nop
 8009508:	20000af0 	.word	0x20000af0

0800950c <__malloc_unlock>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__malloc_unlock+0x8>)
 800950e:	f000 b804 	b.w	800951a <__retarget_lock_release_recursive>
 8009512:	bf00      	nop
 8009514:	20000af0 	.word	0x20000af0

08009518 <__retarget_lock_acquire_recursive>:
 8009518:	4770      	bx	lr

0800951a <__retarget_lock_release_recursive>:
 800951a:	4770      	bx	lr

0800951c <_init>:
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	bf00      	nop
 8009520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009522:	bc08      	pop	{r3}
 8009524:	469e      	mov	lr, r3
 8009526:	4770      	bx	lr

08009528 <_fini>:
 8009528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952a:	bf00      	nop
 800952c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952e:	bc08      	pop	{r3}
 8009530:	469e      	mov	lr, r3
 8009532:	4770      	bx	lr
